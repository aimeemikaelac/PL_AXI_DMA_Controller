// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.1
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "pl_axi_dma_controller.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic pl_axi_dma_controller::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic pl_axi_dma_controller::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> pl_axi_dma_controller::ap_ST_st1_fsm_0 = "00000";
const sc_lv<5> pl_axi_dma_controller::ap_ST_st2_fsm_1 = "1";
const sc_lv<5> pl_axi_dma_controller::ap_ST_st3_fsm_2 = "10";
const sc_lv<5> pl_axi_dma_controller::ap_ST_st4_fsm_3 = "11";
const sc_lv<5> pl_axi_dma_controller::ap_ST_st5_fsm_4 = "100";
const sc_lv<5> pl_axi_dma_controller::ap_ST_st6_fsm_5 = "101";
const sc_lv<5> pl_axi_dma_controller::ap_ST_st7_fsm_6 = "110";
const sc_lv<5> pl_axi_dma_controller::ap_ST_st8_fsm_7 = "111";
const sc_lv<5> pl_axi_dma_controller::ap_ST_st9_fsm_8 = "1000";
const sc_lv<5> pl_axi_dma_controller::ap_ST_st10_fsm_9 = "1001";
const sc_lv<5> pl_axi_dma_controller::ap_ST_st11_fsm_10 = "1010";
const sc_lv<5> pl_axi_dma_controller::ap_ST_st12_fsm_11 = "1011";
const sc_lv<5> pl_axi_dma_controller::ap_ST_st13_fsm_12 = "1100";
const sc_lv<5> pl_axi_dma_controller::ap_ST_st14_fsm_13 = "1101";
const sc_lv<5> pl_axi_dma_controller::ap_ST_st15_fsm_14 = "1110";
const sc_lv<5> pl_axi_dma_controller::ap_ST_st16_fsm_15 = "1111";
const sc_lv<5> pl_axi_dma_controller::ap_ST_st17_fsm_16 = "10000";
const sc_lv<5> pl_axi_dma_controller::ap_ST_st18_fsm_17 = "10001";
const sc_lv<5> pl_axi_dma_controller::ap_ST_st19_fsm_18 = "10010";
const sc_lv<5> pl_axi_dma_controller::ap_ST_st20_fsm_19 = "10011";
const sc_lv<5> pl_axi_dma_controller::ap_ST_st21_fsm_20 = "10100";
const sc_lv<5> pl_axi_dma_controller::ap_ST_st22_fsm_21 = "10101";
const sc_lv<5> pl_axi_dma_controller::ap_ST_st23_fsm_22 = "10110";
const sc_lv<5> pl_axi_dma_controller::ap_ST_st24_fsm_23 = "10111";
const sc_lv<5> pl_axi_dma_controller::ap_ST_st25_fsm_24 = "11000";
const sc_lv<5> pl_axi_dma_controller::ap_ST_st26_fsm_25 = "11001";
const sc_lv<5> pl_axi_dma_controller::ap_ST_st27_fsm_26 = "11010";
const sc_lv<5> pl_axi_dma_controller::ap_ST_st28_fsm_27 = "11011";
const sc_lv<5> pl_axi_dma_controller::ap_ST_st29_fsm_28 = "11100";
const sc_lv<5> pl_axi_dma_controller::ap_ST_st30_fsm_29 = "11101";
const sc_lv<5> pl_axi_dma_controller::ap_ST_st31_fsm_30 = "11110";
const sc_lv<5> pl_axi_dma_controller::ap_ST_st32_fsm_31 = "11111";
const int pl_axi_dma_controller::C_DATA_WIDTH = "100000";
const int pl_axi_dma_controller::C_M_AXI_AXI_DMA_SLAVE_TARGET_ADDR = "0000000000000000000000000000000000000000000000000000000000000000";
const int pl_axi_dma_controller::C_M_AXI_AXI_DMA_SLAVE_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int pl_axi_dma_controller::C_M_AXI_AXI_DMA_SLAVE_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int pl_axi_dma_controller::C_M_AXI_AXI_DMA_SLAVE_CACHE_VALUE = "11";
const sc_lv<1> pl_axi_dma_controller::ap_const_lv1_0 = "0";
const sc_lv<32> pl_axi_dma_controller::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<64> pl_axi_dma_controller::ap_const_lv64_C = "1100";
const sc_lv<64> pl_axi_dma_controller::ap_const_lv64_12 = "10010";
const sc_lv<64> pl_axi_dma_controller::ap_const_lv64_16 = "10110";
const sc_lv<64> pl_axi_dma_controller::ap_const_lv64_1 = "1";
const sc_lv<64> pl_axi_dma_controller::ap_const_lv64_6 = "110";
const sc_lv<64> pl_axi_dma_controller::ap_const_lv64_A = "1010";
const sc_lv<32> pl_axi_dma_controller::ap_const_lv32_1 = "1";
const sc_lv<3> pl_axi_dma_controller::ap_const_lv3_0 = "000";
const sc_lv<2> pl_axi_dma_controller::ap_const_lv2_0 = "00";
const sc_lv<4> pl_axi_dma_controller::ap_const_lv4_0 = "0000";
const sc_lv<4> pl_axi_dma_controller::ap_const_lv4_F = "1111";
const sc_lv<32> pl_axi_dma_controller::ap_const_lv32_4 = "100";
const sc_lv<1> pl_axi_dma_controller::ap_const_lv1_1 = "1";
const sc_lv<32> pl_axi_dma_controller::ap_const_lv32_1F = "11111";
const sc_lv<32> pl_axi_dma_controller::ap_const_lv32_D = "1101";
const sc_lv<32> pl_axi_dma_controller::ap_const_lv32_2 = "10";

pl_axi_dma_controller::pl_axi_dma_controller(sc_module_name name) : sc_module(name), mVcdFile(0) {
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U = new pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi<32,32,2,C_M_AXI_AXI_DMA_SLAVE_ID_WIDTH,C_M_AXI_AXI_DMA_SLAVE_ADDR_WIDTH,C_M_AXI_AXI_DMA_SLAVE_DATA_WIDTH,C_M_AXI_AXI_DMA_SLAVE_AWUSER_WIDTH,C_M_AXI_AXI_DMA_SLAVE_ARUSER_WIDTH,C_M_AXI_AXI_DMA_SLAVE_WUSER_WIDTH,C_M_AXI_AXI_DMA_SLAVE_RUSER_WIDTH,C_M_AXI_AXI_DMA_SLAVE_BUSER_WIDTH,C_M_AXI_AXI_DMA_SLAVE_TARGET_ADDR,C_M_AXI_AXI_DMA_SLAVE_USER_VALUE,C_M_AXI_AXI_DMA_SLAVE_PROT_VALUE,C_M_AXI_AXI_DMA_SLAVE_CACHE_VALUE>("pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U");
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->AWVALID(m_axi_AXI_DMA_SLAVE_AWVALID);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->AWREADY(m_axi_AXI_DMA_SLAVE_AWREADY);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->AWADDR(m_axi_AXI_DMA_SLAVE_AWADDR);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->AWID(m_axi_AXI_DMA_SLAVE_AWID);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->AWLEN(m_axi_AXI_DMA_SLAVE_AWLEN);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->AWSIZE(m_axi_AXI_DMA_SLAVE_AWSIZE);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->AWBURST(m_axi_AXI_DMA_SLAVE_AWBURST);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->AWLOCK(m_axi_AXI_DMA_SLAVE_AWLOCK);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->AWCACHE(m_axi_AXI_DMA_SLAVE_AWCACHE);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->AWPROT(m_axi_AXI_DMA_SLAVE_AWPROT);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->AWQOS(m_axi_AXI_DMA_SLAVE_AWQOS);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->AWREGION(m_axi_AXI_DMA_SLAVE_AWREGION);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->AWUSER(m_axi_AXI_DMA_SLAVE_AWUSER);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->WVALID(m_axi_AXI_DMA_SLAVE_WVALID);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->WREADY(m_axi_AXI_DMA_SLAVE_WREADY);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->WDATA(m_axi_AXI_DMA_SLAVE_WDATA);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->WSTRB(m_axi_AXI_DMA_SLAVE_WSTRB);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->WLAST(m_axi_AXI_DMA_SLAVE_WLAST);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->WID(m_axi_AXI_DMA_SLAVE_WID);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->WUSER(m_axi_AXI_DMA_SLAVE_WUSER);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->ARVALID(m_axi_AXI_DMA_SLAVE_ARVALID);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->ARREADY(m_axi_AXI_DMA_SLAVE_ARREADY);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->ARADDR(m_axi_AXI_DMA_SLAVE_ARADDR);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->ARID(m_axi_AXI_DMA_SLAVE_ARID);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->ARLEN(m_axi_AXI_DMA_SLAVE_ARLEN);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->ARSIZE(m_axi_AXI_DMA_SLAVE_ARSIZE);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->ARBURST(m_axi_AXI_DMA_SLAVE_ARBURST);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->ARLOCK(m_axi_AXI_DMA_SLAVE_ARLOCK);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->ARCACHE(m_axi_AXI_DMA_SLAVE_ARCACHE);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->ARPROT(m_axi_AXI_DMA_SLAVE_ARPROT);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->ARQOS(m_axi_AXI_DMA_SLAVE_ARQOS);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->ARREGION(m_axi_AXI_DMA_SLAVE_ARREGION);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->ARUSER(m_axi_AXI_DMA_SLAVE_ARUSER);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->RVALID(m_axi_AXI_DMA_SLAVE_RVALID);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->RREADY(m_axi_AXI_DMA_SLAVE_RREADY);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->RDATA(m_axi_AXI_DMA_SLAVE_RDATA);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->RLAST(m_axi_AXI_DMA_SLAVE_RLAST);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->RID(m_axi_AXI_DMA_SLAVE_RID);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->RUSER(m_axi_AXI_DMA_SLAVE_RUSER);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->RRESP(m_axi_AXI_DMA_SLAVE_RRESP);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->BVALID(m_axi_AXI_DMA_SLAVE_BVALID);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->BREADY(m_axi_AXI_DMA_SLAVE_BREADY);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->BRESP(m_axi_AXI_DMA_SLAVE_BRESP);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->BID(m_axi_AXI_DMA_SLAVE_BID);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->BUSER(m_axi_AXI_DMA_SLAVE_BUSER);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->ACLK(ap_clk);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->ARESETN(ap_rst_n);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->I_ARVALID(AXI_DMA_SLAVE_ARVALID);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->I_ARREADY(AXI_DMA_SLAVE_ARREADY);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->I_ARADDR(AXI_DMA_SLAVE_ARADDR);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->I_ARID(AXI_DMA_SLAVE_ARID);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->I_ARLEN(AXI_DMA_SLAVE_ARLEN);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->I_ARSIZE(AXI_DMA_SLAVE_ARSIZE);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->I_ARLOCK(AXI_DMA_SLAVE_ARLOCK);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->I_ARCACHE(AXI_DMA_SLAVE_ARCACHE);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->I_ARQOS(AXI_DMA_SLAVE_ARQOS);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->I_ARPROT(AXI_DMA_SLAVE_ARPROT);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->I_ARUSER(AXI_DMA_SLAVE_ARUSER);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->I_ARBURST(AXI_DMA_SLAVE_ARBURST);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->I_ARREGION(AXI_DMA_SLAVE_ARREGION);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->I_RVALID(AXI_DMA_SLAVE_RVALID);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->I_RREADY(AXI_DMA_SLAVE_RREADY);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->I_RDATA(AXI_DMA_SLAVE_RDATA);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->I_RID(AXI_DMA_SLAVE_RID);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->I_RUSER(AXI_DMA_SLAVE_RUSER);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->I_RRESP(AXI_DMA_SLAVE_RRESP);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->I_RLAST(AXI_DMA_SLAVE_RLAST);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->I_AWVALID(AXI_DMA_SLAVE_AWVALID);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->I_AWREADY(AXI_DMA_SLAVE_AWREADY);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->I_AWADDR(AXI_DMA_SLAVE_AWADDR);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->I_AWID(AXI_DMA_SLAVE_AWID);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->I_AWLEN(AXI_DMA_SLAVE_AWLEN);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->I_AWSIZE(AXI_DMA_SLAVE_AWSIZE);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->I_AWLOCK(AXI_DMA_SLAVE_AWLOCK);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->I_AWCACHE(AXI_DMA_SLAVE_AWCACHE);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->I_AWQOS(AXI_DMA_SLAVE_AWQOS);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->I_AWPROT(AXI_DMA_SLAVE_AWPROT);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->I_AWUSER(AXI_DMA_SLAVE_AWUSER);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->I_AWBURST(AXI_DMA_SLAVE_AWBURST);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->I_AWREGION(AXI_DMA_SLAVE_AWREGION);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->I_WVALID(AXI_DMA_SLAVE_WVALID);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->I_WREADY(AXI_DMA_SLAVE_WREADY);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->I_WDATA(AXI_DMA_SLAVE_WDATA);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->I_WID(AXI_DMA_SLAVE_WID);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->I_WUSER(AXI_DMA_SLAVE_WUSER);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->I_WLAST(AXI_DMA_SLAVE_WLAST);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->I_WSTRB(AXI_DMA_SLAVE_WSTRB);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->I_BVALID(AXI_DMA_SLAVE_BVALID);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->I_BREADY(AXI_DMA_SLAVE_BREADY);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->I_BRESP(AXI_DMA_SLAVE_BRESP);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->I_BID(AXI_DMA_SLAVE_BID);
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U->I_BUSER(AXI_DMA_SLAVE_BUSER);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_AXI_DMA_SLAVE_ARADDR);
    sensitive << ( ap_CS_fsm );
    sensitive << ( AXI_DMA_SLAVE_RVALID );
    sensitive << ( AXI_DMA_SLAVE_BVALID );
    sensitive << ( localEnabled_load_fu_331_p1 );
    sensitive << ( write_assign_load_load_fu_334_p1 );
    sensitive << ( AXI_DMA_SLAVE_addr_3_reg_489 );
    sensitive << ( AXI_DMA_SLAVE_addr_reg_525 );
    sensitive << ( ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY );
    sensitive << ( tmp_8_fu_414_p3 );
    sensitive << ( ap_sig_bdd_504 );

    SC_METHOD(thread_AXI_DMA_SLAVE_ARBURST);

    SC_METHOD(thread_AXI_DMA_SLAVE_ARCACHE);

    SC_METHOD(thread_AXI_DMA_SLAVE_ARID);

    SC_METHOD(thread_AXI_DMA_SLAVE_ARLEN);
    sensitive << ( ap_CS_fsm );
    sensitive << ( AXI_DMA_SLAVE_RVALID );
    sensitive << ( AXI_DMA_SLAVE_BVALID );
    sensitive << ( localEnabled_load_fu_331_p1 );
    sensitive << ( write_assign_load_load_fu_334_p1 );
    sensitive << ( ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY );
    sensitive << ( tmp_8_fu_414_p3 );
    sensitive << ( ap_sig_bdd_504 );

    SC_METHOD(thread_AXI_DMA_SLAVE_ARLOCK);

    SC_METHOD(thread_AXI_DMA_SLAVE_ARPROT);

    SC_METHOD(thread_AXI_DMA_SLAVE_ARQOS);

    SC_METHOD(thread_AXI_DMA_SLAVE_ARREGION);

    SC_METHOD(thread_AXI_DMA_SLAVE_ARSIZE);

    SC_METHOD(thread_AXI_DMA_SLAVE_ARUSER);

    SC_METHOD(thread_AXI_DMA_SLAVE_ARVALID);
    sensitive << ( ap_CS_fsm );
    sensitive << ( AXI_DMA_SLAVE_RVALID );
    sensitive << ( AXI_DMA_SLAVE_BVALID );
    sensitive << ( localEnabled_load_fu_331_p1 );
    sensitive << ( write_assign_load_load_fu_334_p1 );
    sensitive << ( ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY );
    sensitive << ( tmp_8_fu_414_p3 );
    sensitive << ( ap_sig_bdd_504 );

    SC_METHOD(thread_AXI_DMA_SLAVE_AWADDR);
    sensitive << ( ap_CS_fsm );
    sensitive << ( AXI_DMA_SLAVE_BVALID );
    sensitive << ( AXI_DMA_SLAVE_addr_3_reg_489 );
    sensitive << ( AXI_DMA_SLAVE_addr_1_reg_531 );
    sensitive << ( AXI_DMA_SLAVE_addr_2_reg_536 );
    sensitive << ( tmp_2_fu_402_p2 );
    sensitive << ( ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY );
    sensitive << ( ap_sig_bdd_504 );

    SC_METHOD(thread_AXI_DMA_SLAVE_AWBURST);

    SC_METHOD(thread_AXI_DMA_SLAVE_AWCACHE);

    SC_METHOD(thread_AXI_DMA_SLAVE_AWID);

    SC_METHOD(thread_AXI_DMA_SLAVE_AWLEN);
    sensitive << ( ap_CS_fsm );
    sensitive << ( AXI_DMA_SLAVE_BVALID );
    sensitive << ( tmp_2_fu_402_p2 );
    sensitive << ( ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY );
    sensitive << ( ap_sig_bdd_504 );

    SC_METHOD(thread_AXI_DMA_SLAVE_AWLOCK);

    SC_METHOD(thread_AXI_DMA_SLAVE_AWPROT);

    SC_METHOD(thread_AXI_DMA_SLAVE_AWQOS);

    SC_METHOD(thread_AXI_DMA_SLAVE_AWREGION);

    SC_METHOD(thread_AXI_DMA_SLAVE_AWSIZE);

    SC_METHOD(thread_AXI_DMA_SLAVE_AWUSER);

    SC_METHOD(thread_AXI_DMA_SLAVE_AWVALID);
    sensitive << ( ap_CS_fsm );
    sensitive << ( AXI_DMA_SLAVE_BVALID );
    sensitive << ( tmp_2_fu_402_p2 );
    sensitive << ( ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY );
    sensitive << ( ap_sig_bdd_504 );

    SC_METHOD(thread_AXI_DMA_SLAVE_BREADY);
    sensitive << ( ap_CS_fsm );
    sensitive << ( AXI_DMA_SLAVE_BVALID );
    sensitive << ( ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY );
    sensitive << ( ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY );
    sensitive << ( ap_sig_ioackin_AXI_DMA_SLAVE_WREADY );
    sensitive << ( ap_sig_bdd_504 );

    SC_METHOD(thread_AXI_DMA_SLAVE_RREADY);
    sensitive << ( ap_CS_fsm );
    sensitive << ( AXI_DMA_SLAVE_RVALID );
    sensitive << ( ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY );
    sensitive << ( ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY );
    sensitive << ( ap_sig_ioackin_AXI_DMA_SLAVE_WREADY );
    sensitive << ( tmp_8_fu_414_p3 );
    sensitive << ( ap_sig_bdd_504 );

    SC_METHOD(thread_AXI_DMA_SLAVE_WDATA);
    sensitive << ( ap_CS_fsm );
    sensitive << ( AXI_DMA_SLAVE_BVALID );
    sensitive << ( tmp_2_fu_402_p2 );
    sensitive << ( localAddress1_reg_248 );
    sensitive << ( ap_reg_ioackin_AXI_DMA_SLAVE_WREADY );
    sensitive << ( tmp_fu_344_p3 );
    sensitive << ( tmp_1_fu_357_p4 );
    sensitive << ( tmp_5_fu_422_p3 );
    sensitive << ( tmp_6_fu_435_p4 );
    sensitive << ( ap_sig_bdd_504 );
    sensitive << ( startAddress_assign_fu_106 );
    sensitive << ( length_assign_fu_114 );

    SC_METHOD(thread_AXI_DMA_SLAVE_WID);

    SC_METHOD(thread_AXI_DMA_SLAVE_WLAST);

    SC_METHOD(thread_AXI_DMA_SLAVE_WSTRB);

    SC_METHOD(thread_AXI_DMA_SLAVE_WUSER);

    SC_METHOD(thread_AXI_DMA_SLAVE_WVALID);
    sensitive << ( ap_CS_fsm );
    sensitive << ( AXI_DMA_SLAVE_BVALID );
    sensitive << ( tmp_2_fu_402_p2 );
    sensitive << ( ap_reg_ioackin_AXI_DMA_SLAVE_WREADY );
    sensitive << ( ap_sig_bdd_504 );

    SC_METHOD(thread_AXI_DMA_SLAVE_addr_1_fu_387_p2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_AXI_DMA_SLAVE_addr_2_fu_393_p2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_AXI_DMA_SLAVE_addr_3_fu_337_p2);
    sensitive << ( ap_CS_fsm );
    sensitive << ( localEnabled_load_fu_331_p1 );
    sensitive << ( write_assign_load_load_fu_334_p1 );

    SC_METHOD(thread_AXI_DMA_SLAVE_addr_fu_381_p2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm );
    sensitive << ( localEnabled_reg_481 );
    sensitive << ( write_assign_load_reg_485 );
    sensitive << ( p_Val2_2_phi_fu_231_p4 );
    sensitive << ( tmp_2_reg_541 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm );
    sensitive << ( localEnabled_reg_481 );
    sensitive << ( write_assign_load_reg_485 );
    sensitive << ( p_Val2_2_phi_fu_231_p4 );
    sensitive << ( tmp_2_reg_541 );

    SC_METHOD(thread_ap_sig_bdd_504);
    sensitive << ( AXI_DMA_SLAVE_RVALID );
    sensitive << ( AXI_DMA_SLAVE_BVALID );

    SC_METHOD(thread_ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY);
    sensitive << ( AXI_DMA_SLAVE_ARREADY );
    sensitive << ( ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY );

    SC_METHOD(thread_ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY);
    sensitive << ( AXI_DMA_SLAVE_AWREADY );
    sensitive << ( ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY );

    SC_METHOD(thread_ap_sig_ioackin_AXI_DMA_SLAVE_WREADY);
    sensitive << ( AXI_DMA_SLAVE_WREADY );
    sensitive << ( ap_reg_ioackin_AXI_DMA_SLAVE_WREADY );

    SC_METHOD(thread_controller_finished_V);
    sensitive << ( ap_CS_fsm );
    sensitive << ( AXI_DMA_SLAVE_BVALID );
    sensitive << ( localEnabled_reg_481 );
    sensitive << ( write_assign_load_reg_485 );
    sensitive << ( p_Val2_2_phi_fu_231_p4 );
    sensitive << ( p_Val2_s_phi_fu_263_p4 );
    sensitive << ( controller_finished_V_preg );

    SC_METHOD(thread_dma_address);
    sensitive << ( ap_CS_fsm );
    sensitive << ( AXI_DMA_SLAVE_BVALID );
    sensitive << ( ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY );
    sensitive << ( ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY );
    sensitive << ( ap_sig_ioackin_AXI_DMA_SLAVE_WREADY );
    sensitive << ( localAddress1_reg_248 );
    sensitive << ( dma_address_preg );

    SC_METHOD(thread_dma_control);
    sensitive << ( ap_CS_fsm );
    sensitive << ( AXI_DMA_SLAVE_RVALID );
    sensitive << ( AXI_DMA_SLAVE_RDATA );
    sensitive << ( ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY );
    sensitive << ( ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY );
    sensitive << ( ap_sig_ioackin_AXI_DMA_SLAVE_WREADY );
    sensitive << ( ap_sig_bdd_504 );
    sensitive << ( dma_control_preg );

    SC_METHOD(thread_dma_status);
    sensitive << ( ap_CS_fsm );
    sensitive << ( AXI_DMA_SLAVE_RVALID );
    sensitive << ( AXI_DMA_SLAVE_RDATA );
    sensitive << ( ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY );
    sensitive << ( ap_sig_bdd_504 );
    sensitive << ( dma_status_preg );

    SC_METHOD(thread_enabled_read_read_fu_126_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( enabled );

    SC_METHOD(thread_i_1_fu_408_p2);
    sensitive << ( i_reg_237 );

    SC_METHOD(thread_localAddress_1_fu_445_p2);
    sensitive << ( localAddress1_reg_248 );

    SC_METHOD(thread_localEnabled_load_fu_331_p1);
    sensitive << ( ap_CS_fsm );
    sensitive << ( enabled_assign_fu_122 );

    SC_METHOD(thread_p_Val2_2_phi_fu_231_p4);
    sensitive << ( p_Val2_2_reg_228 );

    SC_METHOD(thread_p_Val2_s_phi_fu_263_p4);
    sensitive << ( p_Val2_s_reg_260 );

    SC_METHOD(thread_reset_scanner);
    sensitive << ( ap_CS_fsm );
    sensitive << ( localEnabled_load_fu_331_p1 );
    sensitive << ( write_assign_load_load_fu_334_p1 );
    sensitive << ( ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY );
    sensitive << ( reset_scanner_preg );

    SC_METHOD(thread_tmp_10_fu_431_p1);
    sensitive << ( AXI_DMA_SLAVE_RDATA );

    SC_METHOD(thread_tmp_1_fu_357_p4);
    sensitive << ( reg_302 );
    sensitive << ( tmp_4_reg_495 );

    SC_METHOD(thread_tmp_2_fu_402_p2);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY );
    sensitive << ( ap_sig_ioackin_AXI_DMA_SLAVE_WREADY );
    sensitive << ( tmp_2_fu_402_p2 );
    sensitive << ( i_reg_237 );
    sensitive << ( iterations_assign_fu_118 );

    SC_METHOD(thread_tmp_4_fu_353_p1);
    sensitive << ( AXI_DMA_SLAVE_RDATA );

    SC_METHOD(thread_tmp_5_fu_422_p3);
    sensitive << ( reg_298 );

    SC_METHOD(thread_tmp_6_fu_435_p4);
    sensitive << ( reg_302 );
    sensitive << ( tmp_10_reg_553 );

    SC_METHOD(thread_tmp_8_fu_414_p3);
    sensitive << ( AXI_DMA_SLAVE_RDATA );

    SC_METHOD(thread_tmp_fu_344_p3);
    sensitive << ( reg_298 );

    SC_METHOD(thread_write_assign_load_load_fu_334_p1);
    sensitive << ( ap_CS_fsm );
    sensitive << ( localEnabled_load_fu_331_p1 );
    sensitive << ( write_assign_fu_110 );

    SC_METHOD(thread_write_read_read_fu_132_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( write_r );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( AXI_DMA_SLAVE_RVALID );
    sensitive << ( AXI_DMA_SLAVE_BVALID );
    sensitive << ( localEnabled_load_fu_331_p1 );
    sensitive << ( localEnabled_reg_481 );
    sensitive << ( write_assign_load_load_fu_334_p1 );
    sensitive << ( ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY );
    sensitive << ( write_assign_load_reg_485 );
    sensitive << ( ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY );
    sensitive << ( ap_sig_ioackin_AXI_DMA_SLAVE_WREADY );
    sensitive << ( p_Val2_2_phi_fu_231_p4 );
    sensitive << ( tmp_2_fu_402_p2 );
    sensitive << ( tmp_2_reg_541 );
    sensitive << ( p_Val2_s_phi_fu_263_p4 );
    sensitive << ( tmp_8_fu_414_p3 );
    sensitive << ( ap_sig_bdd_504 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "00000";
    ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY = SC_LOGIC_0;
    ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY = SC_LOGIC_0;
    ap_reg_ioackin_AXI_DMA_SLAVE_WREADY = SC_LOGIC_0;
    reset_scanner_preg = SC_LOGIC_0;
    controller_finished_V_preg = "0";
    dma_address_preg = "00000000000000000000000000000000";
    dma_control_preg = "00000000000000000000000000000000";
    dma_status_preg = "00000000000000000000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "pl_axi_dma_controller_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, m_axi_AXI_DMA_SLAVE_AWVALID, "(port)m_axi_AXI_DMA_SLAVE_AWVALID");
    sc_trace(mVcdFile, m_axi_AXI_DMA_SLAVE_AWREADY, "(port)m_axi_AXI_DMA_SLAVE_AWREADY");
    sc_trace(mVcdFile, m_axi_AXI_DMA_SLAVE_AWADDR, "(port)m_axi_AXI_DMA_SLAVE_AWADDR");
    sc_trace(mVcdFile, m_axi_AXI_DMA_SLAVE_AWID, "(port)m_axi_AXI_DMA_SLAVE_AWID");
    sc_trace(mVcdFile, m_axi_AXI_DMA_SLAVE_AWLEN, "(port)m_axi_AXI_DMA_SLAVE_AWLEN");
    sc_trace(mVcdFile, m_axi_AXI_DMA_SLAVE_AWSIZE, "(port)m_axi_AXI_DMA_SLAVE_AWSIZE");
    sc_trace(mVcdFile, m_axi_AXI_DMA_SLAVE_AWBURST, "(port)m_axi_AXI_DMA_SLAVE_AWBURST");
    sc_trace(mVcdFile, m_axi_AXI_DMA_SLAVE_AWLOCK, "(port)m_axi_AXI_DMA_SLAVE_AWLOCK");
    sc_trace(mVcdFile, m_axi_AXI_DMA_SLAVE_AWCACHE, "(port)m_axi_AXI_DMA_SLAVE_AWCACHE");
    sc_trace(mVcdFile, m_axi_AXI_DMA_SLAVE_AWPROT, "(port)m_axi_AXI_DMA_SLAVE_AWPROT");
    sc_trace(mVcdFile, m_axi_AXI_DMA_SLAVE_AWQOS, "(port)m_axi_AXI_DMA_SLAVE_AWQOS");
    sc_trace(mVcdFile, m_axi_AXI_DMA_SLAVE_AWREGION, "(port)m_axi_AXI_DMA_SLAVE_AWREGION");
    sc_trace(mVcdFile, m_axi_AXI_DMA_SLAVE_AWUSER, "(port)m_axi_AXI_DMA_SLAVE_AWUSER");
    sc_trace(mVcdFile, m_axi_AXI_DMA_SLAVE_WVALID, "(port)m_axi_AXI_DMA_SLAVE_WVALID");
    sc_trace(mVcdFile, m_axi_AXI_DMA_SLAVE_WREADY, "(port)m_axi_AXI_DMA_SLAVE_WREADY");
    sc_trace(mVcdFile, m_axi_AXI_DMA_SLAVE_WDATA, "(port)m_axi_AXI_DMA_SLAVE_WDATA");
    sc_trace(mVcdFile, m_axi_AXI_DMA_SLAVE_WSTRB, "(port)m_axi_AXI_DMA_SLAVE_WSTRB");
    sc_trace(mVcdFile, m_axi_AXI_DMA_SLAVE_WLAST, "(port)m_axi_AXI_DMA_SLAVE_WLAST");
    sc_trace(mVcdFile, m_axi_AXI_DMA_SLAVE_WID, "(port)m_axi_AXI_DMA_SLAVE_WID");
    sc_trace(mVcdFile, m_axi_AXI_DMA_SLAVE_WUSER, "(port)m_axi_AXI_DMA_SLAVE_WUSER");
    sc_trace(mVcdFile, m_axi_AXI_DMA_SLAVE_ARVALID, "(port)m_axi_AXI_DMA_SLAVE_ARVALID");
    sc_trace(mVcdFile, m_axi_AXI_DMA_SLAVE_ARREADY, "(port)m_axi_AXI_DMA_SLAVE_ARREADY");
    sc_trace(mVcdFile, m_axi_AXI_DMA_SLAVE_ARADDR, "(port)m_axi_AXI_DMA_SLAVE_ARADDR");
    sc_trace(mVcdFile, m_axi_AXI_DMA_SLAVE_ARID, "(port)m_axi_AXI_DMA_SLAVE_ARID");
    sc_trace(mVcdFile, m_axi_AXI_DMA_SLAVE_ARLEN, "(port)m_axi_AXI_DMA_SLAVE_ARLEN");
    sc_trace(mVcdFile, m_axi_AXI_DMA_SLAVE_ARSIZE, "(port)m_axi_AXI_DMA_SLAVE_ARSIZE");
    sc_trace(mVcdFile, m_axi_AXI_DMA_SLAVE_ARBURST, "(port)m_axi_AXI_DMA_SLAVE_ARBURST");
    sc_trace(mVcdFile, m_axi_AXI_DMA_SLAVE_ARLOCK, "(port)m_axi_AXI_DMA_SLAVE_ARLOCK");
    sc_trace(mVcdFile, m_axi_AXI_DMA_SLAVE_ARCACHE, "(port)m_axi_AXI_DMA_SLAVE_ARCACHE");
    sc_trace(mVcdFile, m_axi_AXI_DMA_SLAVE_ARPROT, "(port)m_axi_AXI_DMA_SLAVE_ARPROT");
    sc_trace(mVcdFile, m_axi_AXI_DMA_SLAVE_ARQOS, "(port)m_axi_AXI_DMA_SLAVE_ARQOS");
    sc_trace(mVcdFile, m_axi_AXI_DMA_SLAVE_ARREGION, "(port)m_axi_AXI_DMA_SLAVE_ARREGION");
    sc_trace(mVcdFile, m_axi_AXI_DMA_SLAVE_ARUSER, "(port)m_axi_AXI_DMA_SLAVE_ARUSER");
    sc_trace(mVcdFile, m_axi_AXI_DMA_SLAVE_RVALID, "(port)m_axi_AXI_DMA_SLAVE_RVALID");
    sc_trace(mVcdFile, m_axi_AXI_DMA_SLAVE_RREADY, "(port)m_axi_AXI_DMA_SLAVE_RREADY");
    sc_trace(mVcdFile, m_axi_AXI_DMA_SLAVE_RDATA, "(port)m_axi_AXI_DMA_SLAVE_RDATA");
    sc_trace(mVcdFile, m_axi_AXI_DMA_SLAVE_RLAST, "(port)m_axi_AXI_DMA_SLAVE_RLAST");
    sc_trace(mVcdFile, m_axi_AXI_DMA_SLAVE_RID, "(port)m_axi_AXI_DMA_SLAVE_RID");
    sc_trace(mVcdFile, m_axi_AXI_DMA_SLAVE_RUSER, "(port)m_axi_AXI_DMA_SLAVE_RUSER");
    sc_trace(mVcdFile, m_axi_AXI_DMA_SLAVE_RRESP, "(port)m_axi_AXI_DMA_SLAVE_RRESP");
    sc_trace(mVcdFile, m_axi_AXI_DMA_SLAVE_BVALID, "(port)m_axi_AXI_DMA_SLAVE_BVALID");
    sc_trace(mVcdFile, m_axi_AXI_DMA_SLAVE_BREADY, "(port)m_axi_AXI_DMA_SLAVE_BREADY");
    sc_trace(mVcdFile, m_axi_AXI_DMA_SLAVE_BRESP, "(port)m_axi_AXI_DMA_SLAVE_BRESP");
    sc_trace(mVcdFile, m_axi_AXI_DMA_SLAVE_BID, "(port)m_axi_AXI_DMA_SLAVE_BID");
    sc_trace(mVcdFile, m_axi_AXI_DMA_SLAVE_BUSER, "(port)m_axi_AXI_DMA_SLAVE_BUSER");
    sc_trace(mVcdFile, startAddress, "(port)startAddress");
    sc_trace(mVcdFile, write_r, "(port)write_r");
    sc_trace(mVcdFile, length_r, "(port)length_r");
    sc_trace(mVcdFile, iterations, "(port)iterations");
    sc_trace(mVcdFile, enabled, "(port)enabled");
    sc_trace(mVcdFile, reset_scanner, "(port)reset_scanner");
    sc_trace(mVcdFile, dma_control, "(port)dma_control");
    sc_trace(mVcdFile, dma_status, "(port)dma_status");
    sc_trace(mVcdFile, dma_address, "(port)dma_address");
    sc_trace(mVcdFile, fabric_interrupt_write_finished_V, "(port)fabric_interrupt_write_finished_V");
    sc_trace(mVcdFile, fabric_interrupt_read_finished_V, "(port)fabric_interrupt_read_finished_V");
    sc_trace(mVcdFile, controller_finished_V, "(port)controller_finished_V");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, AXI_DMA_SLAVE_AWVALID, "AXI_DMA_SLAVE_AWVALID");
    sc_trace(mVcdFile, AXI_DMA_SLAVE_AWREADY, "AXI_DMA_SLAVE_AWREADY");
    sc_trace(mVcdFile, AXI_DMA_SLAVE_AWADDR, "AXI_DMA_SLAVE_AWADDR");
    sc_trace(mVcdFile, AXI_DMA_SLAVE_AWID, "AXI_DMA_SLAVE_AWID");
    sc_trace(mVcdFile, AXI_DMA_SLAVE_AWLEN, "AXI_DMA_SLAVE_AWLEN");
    sc_trace(mVcdFile, AXI_DMA_SLAVE_AWSIZE, "AXI_DMA_SLAVE_AWSIZE");
    sc_trace(mVcdFile, AXI_DMA_SLAVE_AWBURST, "AXI_DMA_SLAVE_AWBURST");
    sc_trace(mVcdFile, AXI_DMA_SLAVE_AWLOCK, "AXI_DMA_SLAVE_AWLOCK");
    sc_trace(mVcdFile, AXI_DMA_SLAVE_AWCACHE, "AXI_DMA_SLAVE_AWCACHE");
    sc_trace(mVcdFile, AXI_DMA_SLAVE_AWPROT, "AXI_DMA_SLAVE_AWPROT");
    sc_trace(mVcdFile, AXI_DMA_SLAVE_AWQOS, "AXI_DMA_SLAVE_AWQOS");
    sc_trace(mVcdFile, AXI_DMA_SLAVE_AWREGION, "AXI_DMA_SLAVE_AWREGION");
    sc_trace(mVcdFile, AXI_DMA_SLAVE_AWUSER, "AXI_DMA_SLAVE_AWUSER");
    sc_trace(mVcdFile, AXI_DMA_SLAVE_WVALID, "AXI_DMA_SLAVE_WVALID");
    sc_trace(mVcdFile, AXI_DMA_SLAVE_WREADY, "AXI_DMA_SLAVE_WREADY");
    sc_trace(mVcdFile, AXI_DMA_SLAVE_WDATA, "AXI_DMA_SLAVE_WDATA");
    sc_trace(mVcdFile, AXI_DMA_SLAVE_WSTRB, "AXI_DMA_SLAVE_WSTRB");
    sc_trace(mVcdFile, AXI_DMA_SLAVE_WLAST, "AXI_DMA_SLAVE_WLAST");
    sc_trace(mVcdFile, AXI_DMA_SLAVE_WID, "AXI_DMA_SLAVE_WID");
    sc_trace(mVcdFile, AXI_DMA_SLAVE_WUSER, "AXI_DMA_SLAVE_WUSER");
    sc_trace(mVcdFile, AXI_DMA_SLAVE_ARVALID, "AXI_DMA_SLAVE_ARVALID");
    sc_trace(mVcdFile, AXI_DMA_SLAVE_ARREADY, "AXI_DMA_SLAVE_ARREADY");
    sc_trace(mVcdFile, AXI_DMA_SLAVE_ARADDR, "AXI_DMA_SLAVE_ARADDR");
    sc_trace(mVcdFile, AXI_DMA_SLAVE_ARID, "AXI_DMA_SLAVE_ARID");
    sc_trace(mVcdFile, AXI_DMA_SLAVE_ARLEN, "AXI_DMA_SLAVE_ARLEN");
    sc_trace(mVcdFile, AXI_DMA_SLAVE_ARSIZE, "AXI_DMA_SLAVE_ARSIZE");
    sc_trace(mVcdFile, AXI_DMA_SLAVE_ARBURST, "AXI_DMA_SLAVE_ARBURST");
    sc_trace(mVcdFile, AXI_DMA_SLAVE_ARLOCK, "AXI_DMA_SLAVE_ARLOCK");
    sc_trace(mVcdFile, AXI_DMA_SLAVE_ARCACHE, "AXI_DMA_SLAVE_ARCACHE");
    sc_trace(mVcdFile, AXI_DMA_SLAVE_ARPROT, "AXI_DMA_SLAVE_ARPROT");
    sc_trace(mVcdFile, AXI_DMA_SLAVE_ARQOS, "AXI_DMA_SLAVE_ARQOS");
    sc_trace(mVcdFile, AXI_DMA_SLAVE_ARREGION, "AXI_DMA_SLAVE_ARREGION");
    sc_trace(mVcdFile, AXI_DMA_SLAVE_ARUSER, "AXI_DMA_SLAVE_ARUSER");
    sc_trace(mVcdFile, AXI_DMA_SLAVE_RVALID, "AXI_DMA_SLAVE_RVALID");
    sc_trace(mVcdFile, AXI_DMA_SLAVE_RREADY, "AXI_DMA_SLAVE_RREADY");
    sc_trace(mVcdFile, AXI_DMA_SLAVE_RDATA, "AXI_DMA_SLAVE_RDATA");
    sc_trace(mVcdFile, AXI_DMA_SLAVE_RLAST, "AXI_DMA_SLAVE_RLAST");
    sc_trace(mVcdFile, AXI_DMA_SLAVE_RID, "AXI_DMA_SLAVE_RID");
    sc_trace(mVcdFile, AXI_DMA_SLAVE_RUSER, "AXI_DMA_SLAVE_RUSER");
    sc_trace(mVcdFile, AXI_DMA_SLAVE_RRESP, "AXI_DMA_SLAVE_RRESP");
    sc_trace(mVcdFile, AXI_DMA_SLAVE_BVALID, "AXI_DMA_SLAVE_BVALID");
    sc_trace(mVcdFile, AXI_DMA_SLAVE_BREADY, "AXI_DMA_SLAVE_BREADY");
    sc_trace(mVcdFile, AXI_DMA_SLAVE_BRESP, "AXI_DMA_SLAVE_BRESP");
    sc_trace(mVcdFile, AXI_DMA_SLAVE_BID, "AXI_DMA_SLAVE_BID");
    sc_trace(mVcdFile, AXI_DMA_SLAVE_BUSER, "AXI_DMA_SLAVE_BUSER");
    sc_trace(mVcdFile, reg_298, "reg_298");
    sc_trace(mVcdFile, reg_302, "reg_302");
    sc_trace(mVcdFile, localEnabled_load_fu_331_p1, "localEnabled_load_fu_331_p1");
    sc_trace(mVcdFile, localEnabled_reg_481, "localEnabled_reg_481");
    sc_trace(mVcdFile, write_assign_load_load_fu_334_p1, "write_assign_load_load_fu_334_p1");
    sc_trace(mVcdFile, ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY, "ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY");
    sc_trace(mVcdFile, write_assign_load_reg_485, "write_assign_load_reg_485");
    sc_trace(mVcdFile, AXI_DMA_SLAVE_addr_3_fu_337_p2, "AXI_DMA_SLAVE_addr_3_fu_337_p2");
    sc_trace(mVcdFile, AXI_DMA_SLAVE_addr_3_reg_489, "AXI_DMA_SLAVE_addr_3_reg_489");
    sc_trace(mVcdFile, tmp_4_fu_353_p1, "tmp_4_fu_353_p1");
    sc_trace(mVcdFile, tmp_4_reg_495, "tmp_4_reg_495");
    sc_trace(mVcdFile, ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY, "ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY");
    sc_trace(mVcdFile, ap_sig_ioackin_AXI_DMA_SLAVE_WREADY, "ap_sig_ioackin_AXI_DMA_SLAVE_WREADY");
    sc_trace(mVcdFile, p_Val2_2_phi_fu_231_p4, "p_Val2_2_phi_fu_231_p4");
    sc_trace(mVcdFile, AXI_DMA_SLAVE_addr_fu_381_p2, "AXI_DMA_SLAVE_addr_fu_381_p2");
    sc_trace(mVcdFile, AXI_DMA_SLAVE_addr_reg_525, "AXI_DMA_SLAVE_addr_reg_525");
    sc_trace(mVcdFile, AXI_DMA_SLAVE_addr_1_fu_387_p2, "AXI_DMA_SLAVE_addr_1_fu_387_p2");
    sc_trace(mVcdFile, AXI_DMA_SLAVE_addr_1_reg_531, "AXI_DMA_SLAVE_addr_1_reg_531");
    sc_trace(mVcdFile, AXI_DMA_SLAVE_addr_2_fu_393_p2, "AXI_DMA_SLAVE_addr_2_fu_393_p2");
    sc_trace(mVcdFile, AXI_DMA_SLAVE_addr_2_reg_536, "AXI_DMA_SLAVE_addr_2_reg_536");
    sc_trace(mVcdFile, tmp_2_fu_402_p2, "tmp_2_fu_402_p2");
    sc_trace(mVcdFile, tmp_2_reg_541, "tmp_2_reg_541");
    sc_trace(mVcdFile, i_1_fu_408_p2, "i_1_fu_408_p2");
    sc_trace(mVcdFile, i_1_reg_545, "i_1_reg_545");
    sc_trace(mVcdFile, tmp_10_fu_431_p1, "tmp_10_fu_431_p1");
    sc_trace(mVcdFile, tmp_10_reg_553, "tmp_10_reg_553");
    sc_trace(mVcdFile, localAddress_1_fu_445_p2, "localAddress_1_fu_445_p2");
    sc_trace(mVcdFile, localAddress_1_reg_558, "localAddress_1_reg_558");
    sc_trace(mVcdFile, p_Val2_s_phi_fu_263_p4, "p_Val2_s_phi_fu_263_p4");
    sc_trace(mVcdFile, p_Val2_2_reg_228, "p_Val2_2_reg_228");
    sc_trace(mVcdFile, i_reg_237, "i_reg_237");
    sc_trace(mVcdFile, localAddress1_reg_248, "localAddress1_reg_248");
    sc_trace(mVcdFile, p_Val2_s_reg_260, "p_Val2_s_reg_260");
    sc_trace(mVcdFile, ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY, "ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY, "ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_AXI_DMA_SLAVE_WREADY, "ap_reg_ioackin_AXI_DMA_SLAVE_WREADY");
    sc_trace(mVcdFile, tmp_fu_344_p3, "tmp_fu_344_p3");
    sc_trace(mVcdFile, tmp_1_fu_357_p4, "tmp_1_fu_357_p4");
    sc_trace(mVcdFile, tmp_8_fu_414_p3, "tmp_8_fu_414_p3");
    sc_trace(mVcdFile, tmp_5_fu_422_p3, "tmp_5_fu_422_p3");
    sc_trace(mVcdFile, tmp_6_fu_435_p4, "tmp_6_fu_435_p4");
    sc_trace(mVcdFile, ap_sig_bdd_504, "ap_sig_bdd_504");
    sc_trace(mVcdFile, startAddress_assign_fu_106, "startAddress_assign_fu_106");
    sc_trace(mVcdFile, write_assign_fu_110, "write_assign_fu_110");
    sc_trace(mVcdFile, write_read_read_fu_132_p2, "write_read_read_fu_132_p2");
    sc_trace(mVcdFile, length_assign_fu_114, "length_assign_fu_114");
    sc_trace(mVcdFile, iterations_assign_fu_118, "iterations_assign_fu_118");
    sc_trace(mVcdFile, enabled_assign_fu_122, "enabled_assign_fu_122");
    sc_trace(mVcdFile, enabled_read_read_fu_126_p2, "enabled_read_read_fu_126_p2");
    sc_trace(mVcdFile, reset_scanner_preg, "reset_scanner_preg");
    sc_trace(mVcdFile, controller_finished_V_preg, "controller_finished_V_preg");
    sc_trace(mVcdFile, dma_address_preg, "dma_address_preg");
    sc_trace(mVcdFile, dma_control_preg, "dma_control_preg");
    sc_trace(mVcdFile, dma_status_preg, "dma_status_preg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("pl_axi_dma_controller.hdltvin.dat");
    mHdltvoutHandle.open("pl_axi_dma_controller.hdltvout.dat");
}

pl_axi_dma_controller::~pl_axi_dma_controller() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U;
}

void pl_axi_dma_controller::thread_ap_clk_no_reset_() {
    if ( ap_rst_n.read() == ap_const_logic_0) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n.read() == ap_const_logic_0) {
        ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,5,5>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
              !esl_seteq<1,1,1>(localEnabled_load_fu_331_p1.read(), ap_const_lv1_0) && 
              esl_seteq<1,1,1>(ap_const_lv1_0, write_assign_load_load_fu_334_p1.read()) && 
              !(!esl_seteq<1,1,1>(localEnabled_load_fu_331_p1.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_lv1_0, write_assign_load_load_fu_334_p1.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY.read()))) || 
             (esl_seteq<1,5,5>(ap_ST_st24_fsm_23, ap_CS_fsm.read()) && 
              !(esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY.read()) || esl_seteq<1,1,1>(AXI_DMA_SLAVE_BVALID.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_WREADY.read()))) || 
             (esl_seteq<1,5,5>(ap_ST_st5_fsm_4, ap_CS_fsm.read()) && 
              !(esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY.read()) || esl_seteq<1,1,1>(AXI_DMA_SLAVE_BVALID.read(), ap_const_logic_0))) || 
             (esl_seteq<1,5,5>(ap_ST_st15_fsm_14, ap_CS_fsm.read()) && 
              !esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY.read())) || 
             (esl_seteq<1,5,5>(ap_ST_st16_fsm_15, ap_CS_fsm.read()) && 
              esl_seteq<1,1,1>(ap_const_lv1_0, tmp_8_fu_414_p3.read()) && 
              !(esl_seteq<1,1,1>(AXI_DMA_SLAVE_RVALID.read(), ap_const_logic_0) || (esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, tmp_8_fu_414_p3.read())))) || 
             (!(esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY.read()) || esl_seteq<1,1,1>(AXI_DMA_SLAVE_BVALID.read(), ap_const_logic_0)) && 
              esl_seteq<1,5,5>(ap_ST_st21_fsm_20, ap_CS_fsm.read())) || 
             (!esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY.read()) && 
              esl_seteq<1,5,5>(ap_ST_st25_fsm_24, ap_CS_fsm.read())) || 
             (esl_seteq<1,5,5>(ap_ST_st29_fsm_28, ap_CS_fsm.read()) && 
              !(esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY.read()) || ap_sig_bdd_504.read())) || 
             (esl_seteq<1,5,5>(ap_ST_st30_fsm_29, ap_CS_fsm.read()) && 
              !(esl_seteq<1,1,1>(AXI_DMA_SLAVE_RVALID.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY.read()))))) {
            ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY = ap_const_logic_0;
        } else if (((esl_seteq<1,5,5>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
                     !esl_seteq<1,1,1>(localEnabled_load_fu_331_p1.read(), ap_const_lv1_0) && 
                     esl_seteq<1,1,1>(ap_const_lv1_0, write_assign_load_load_fu_334_p1.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, AXI_DMA_SLAVE_ARREADY.read())) || 
                    (!esl_seteq<1,1,1>(AXI_DMA_SLAVE_BVALID.read(), ap_const_logic_0) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, AXI_DMA_SLAVE_ARREADY.read()) && 
                     esl_seteq<1,5,5>(ap_ST_st5_fsm_4, ap_CS_fsm.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, AXI_DMA_SLAVE_ARREADY.read()) && 
                     esl_seteq<1,5,5>(ap_ST_st15_fsm_14, ap_CS_fsm.read())) || 
                    (!esl_seteq<1,1,1>(AXI_DMA_SLAVE_RVALID.read(), ap_const_logic_0) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, AXI_DMA_SLAVE_ARREADY.read()) && 
                     esl_seteq<1,5,5>(ap_ST_st16_fsm_15, ap_CS_fsm.read()) && 
                     esl_seteq<1,1,1>(ap_const_lv1_0, tmp_8_fu_414_p3.read())) || 
                    (!esl_seteq<1,1,1>(AXI_DMA_SLAVE_BVALID.read(), ap_const_logic_0) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, AXI_DMA_SLAVE_ARREADY.read()) && 
                     esl_seteq<1,5,5>(ap_ST_st21_fsm_20, ap_CS_fsm.read())) || 
                    (!esl_seteq<1,1,1>(AXI_DMA_SLAVE_BVALID.read(), ap_const_logic_0) && 
                     esl_seteq<1,5,5>(ap_ST_st24_fsm_23, ap_CS_fsm.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, AXI_DMA_SLAVE_ARREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, AXI_DMA_SLAVE_ARREADY.read()) && 
                     esl_seteq<1,5,5>(ap_ST_st25_fsm_24, ap_CS_fsm.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, AXI_DMA_SLAVE_ARREADY.read()) && 
                     !ap_sig_bdd_504.read() && 
                     esl_seteq<1,5,5>(ap_ST_st29_fsm_28, ap_CS_fsm.read())) || 
                    (!esl_seteq<1,1,1>(AXI_DMA_SLAVE_RVALID.read(), ap_const_logic_0) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, AXI_DMA_SLAVE_ARREADY.read()) && 
                     esl_seteq<1,5,5>(ap_ST_st30_fsm_29, ap_CS_fsm.read())))) {
            ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY = ap_const_logic_1;
        }
    }
    if ( ap_rst_n.read() == ap_const_logic_0) {
        ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,5,5>(ap_ST_st8_fsm_7, ap_CS_fsm.read()) && 
              !(esl_seteq<1,1,1>(AXI_DMA_SLAVE_BVALID.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_WREADY.read()))) || 
             (!(esl_seteq<1,1,1>(AXI_DMA_SLAVE_BVALID.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_WREADY.read())) && 
              esl_seteq<1,5,5>(ap_ST_st9_fsm_8, ap_CS_fsm.read())) || 
             (esl_seteq<1,5,5>(ap_ST_st24_fsm_23, ap_CS_fsm.read()) && 
              !(esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY.read()) || esl_seteq<1,1,1>(AXI_DMA_SLAVE_BVALID.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_WREADY.read()))) || 
             (esl_seteq<1,5,5>(ap_ST_st4_fsm_3, ap_CS_fsm.read()) && 
              !(esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_WREADY.read()))) || 
             (!(esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_WREADY.read())) && 
              esl_seteq<1,5,5>(ap_ST_st7_fsm_6, ap_CS_fsm.read())) || 
             (esl_seteq<1,5,5>(ap_ST_st13_fsm_12, ap_CS_fsm.read()) && 
              !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_fu_402_p2.read()) && 
              !((esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY.read()) && 
  !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_fu_402_p2.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_WREADY.read()) && 
  !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_fu_402_p2.read())))) || 
             (!(esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_WREADY.read())) && 
              esl_seteq<1,5,5>(ap_ST_st17_fsm_16, ap_CS_fsm.read())) || 
             (!(esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_WREADY.read())) && 
              esl_seteq<1,5,5>(ap_ST_st20_fsm_19, ap_CS_fsm.read())) || 
             (!(esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_WREADY.read())) && 
              esl_seteq<1,5,5>(ap_ST_st23_fsm_22, ap_CS_fsm.read())) || 
             (esl_seteq<1,5,5>(ap_ST_st28_fsm_27, ap_CS_fsm.read()) && 
              !(esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_WREADY.read()) || ap_sig_bdd_504.read())))) {
            ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY = ap_const_logic_0;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, AXI_DMA_SLAVE_AWREADY.read()) && 
                     esl_seteq<1,5,5>(ap_ST_st4_fsm_3, ap_CS_fsm.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, AXI_DMA_SLAVE_AWREADY.read()) && 
                     esl_seteq<1,5,5>(ap_ST_st7_fsm_6, ap_CS_fsm.read())) || 
                    (esl_seteq<1,5,5>(ap_ST_st8_fsm_7, ap_CS_fsm.read()) && 
                     !esl_seteq<1,1,1>(AXI_DMA_SLAVE_BVALID.read(), ap_const_logic_0) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, AXI_DMA_SLAVE_AWREADY.read())) || 
                    (esl_seteq<1,5,5>(ap_ST_st9_fsm_8, ap_CS_fsm.read()) && 
                     !esl_seteq<1,1,1>(AXI_DMA_SLAVE_BVALID.read(), ap_const_logic_0) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, AXI_DMA_SLAVE_AWREADY.read())) || 
                    (esl_seteq<1,5,5>(ap_ST_st13_fsm_12, ap_CS_fsm.read()) && 
                     !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_fu_402_p2.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, AXI_DMA_SLAVE_AWREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, AXI_DMA_SLAVE_AWREADY.read()) && 
                     esl_seteq<1,5,5>(ap_ST_st17_fsm_16, ap_CS_fsm.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, AXI_DMA_SLAVE_AWREADY.read()) && 
                     esl_seteq<1,5,5>(ap_ST_st20_fsm_19, ap_CS_fsm.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, AXI_DMA_SLAVE_AWREADY.read()) && 
                     esl_seteq<1,5,5>(ap_ST_st23_fsm_22, ap_CS_fsm.read())) || 
                    (!esl_seteq<1,1,1>(AXI_DMA_SLAVE_BVALID.read(), ap_const_logic_0) && 
                     esl_seteq<1,5,5>(ap_ST_st24_fsm_23, ap_CS_fsm.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, AXI_DMA_SLAVE_AWREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, AXI_DMA_SLAVE_AWREADY.read()) && 
                     esl_seteq<1,5,5>(ap_ST_st28_fsm_27, ap_CS_fsm.read()) && 
                     !ap_sig_bdd_504.read()))) {
            ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY = ap_const_logic_1;
        }
    }
    if ( ap_rst_n.read() == ap_const_logic_0) {
        ap_reg_ioackin_AXI_DMA_SLAVE_WREADY = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,5,5>(ap_ST_st8_fsm_7, ap_CS_fsm.read()) && 
              !(esl_seteq<1,1,1>(AXI_DMA_SLAVE_BVALID.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_WREADY.read()))) || 
             (!(esl_seteq<1,1,1>(AXI_DMA_SLAVE_BVALID.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_WREADY.read())) && 
              esl_seteq<1,5,5>(ap_ST_st9_fsm_8, ap_CS_fsm.read())) || 
             (esl_seteq<1,5,5>(ap_ST_st24_fsm_23, ap_CS_fsm.read()) && 
              !(esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY.read()) || esl_seteq<1,1,1>(AXI_DMA_SLAVE_BVALID.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_WREADY.read()))) || 
             (esl_seteq<1,5,5>(ap_ST_st4_fsm_3, ap_CS_fsm.read()) && 
              !(esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_WREADY.read()))) || 
             (!(esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_WREADY.read())) && 
              esl_seteq<1,5,5>(ap_ST_st7_fsm_6, ap_CS_fsm.read())) || 
             (esl_seteq<1,5,5>(ap_ST_st13_fsm_12, ap_CS_fsm.read()) && 
              !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_fu_402_p2.read()) && 
              !((esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY.read()) && 
  !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_fu_402_p2.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_WREADY.read()) && 
  !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_fu_402_p2.read())))) || 
             (!(esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_WREADY.read())) && 
              esl_seteq<1,5,5>(ap_ST_st17_fsm_16, ap_CS_fsm.read())) || 
             (!(esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_WREADY.read())) && 
              esl_seteq<1,5,5>(ap_ST_st20_fsm_19, ap_CS_fsm.read())) || 
             (!(esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_WREADY.read())) && 
              esl_seteq<1,5,5>(ap_ST_st23_fsm_22, ap_CS_fsm.read())) || 
             (esl_seteq<1,5,5>(ap_ST_st28_fsm_27, ap_CS_fsm.read()) && 
              !(esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_WREADY.read()) || ap_sig_bdd_504.read())))) {
            ap_reg_ioackin_AXI_DMA_SLAVE_WREADY = ap_const_logic_0;
        } else if (((esl_seteq<1,5,5>(ap_ST_st4_fsm_3, ap_CS_fsm.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, AXI_DMA_SLAVE_WREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, AXI_DMA_SLAVE_WREADY.read()) && 
                     esl_seteq<1,5,5>(ap_ST_st7_fsm_6, ap_CS_fsm.read())) || 
                    (esl_seteq<1,5,5>(ap_ST_st8_fsm_7, ap_CS_fsm.read()) && 
                     !esl_seteq<1,1,1>(AXI_DMA_SLAVE_BVALID.read(), ap_const_logic_0) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, AXI_DMA_SLAVE_WREADY.read())) || 
                    (esl_seteq<1,5,5>(ap_ST_st9_fsm_8, ap_CS_fsm.read()) && 
                     !esl_seteq<1,1,1>(AXI_DMA_SLAVE_BVALID.read(), ap_const_logic_0) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, AXI_DMA_SLAVE_WREADY.read())) || 
                    (esl_seteq<1,5,5>(ap_ST_st13_fsm_12, ap_CS_fsm.read()) && 
                     !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_fu_402_p2.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, AXI_DMA_SLAVE_WREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, AXI_DMA_SLAVE_WREADY.read()) && 
                     esl_seteq<1,5,5>(ap_ST_st17_fsm_16, ap_CS_fsm.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, AXI_DMA_SLAVE_WREADY.read()) && 
                     esl_seteq<1,5,5>(ap_ST_st20_fsm_19, ap_CS_fsm.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, AXI_DMA_SLAVE_WREADY.read()) && 
                     esl_seteq<1,5,5>(ap_ST_st23_fsm_22, ap_CS_fsm.read())) || 
                    (!esl_seteq<1,1,1>(AXI_DMA_SLAVE_BVALID.read(), ap_const_logic_0) && 
                     esl_seteq<1,5,5>(ap_ST_st24_fsm_23, ap_CS_fsm.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, AXI_DMA_SLAVE_WREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, AXI_DMA_SLAVE_WREADY.read()) && 
                     esl_seteq<1,5,5>(ap_ST_st28_fsm_27, ap_CS_fsm.read()) && 
                     !ap_sig_bdd_504.read()))) {
            ap_reg_ioackin_AXI_DMA_SLAVE_WREADY = ap_const_logic_1;
        }
    }
    if ( ap_rst_n.read() == ap_const_logic_0) {
        controller_finished_V_preg = ap_const_lv1_0;
    } else {
        if ((!esl_seteq<1,1,1>(AXI_DMA_SLAVE_BVALID.read(), ap_const_logic_0) && 
             esl_seteq<1,5,5>(ap_ST_st14_fsm_13, ap_CS_fsm.read()))) {
            controller_finished_V_preg = ap_const_lv1_0;
        } else if (((esl_seteq<1,5,5>(ap_ST_st32_fsm_31, ap_CS_fsm.read()) && 
                     !esl_seteq<1,1,1>(ap_const_lv1_0, p_Val2_s_phi_fu_263_p4.read())) || 
                    (esl_seteq<1,5,5>(ap_ST_st11_fsm_10, ap_CS_fsm.read()) && 
                     !esl_seteq<1,1,1>(localEnabled_reg_481.read(), ap_const_lv1_0) && 
                     esl_seteq<1,1,1>(ap_const_lv1_0, write_assign_load_reg_485.read()) && 
                     !esl_seteq<1,1,1>(ap_const_lv1_0, p_Val2_2_phi_fu_231_p4.read())))) {
            controller_finished_V_preg = ap_const_lv1_1;
        }
    }
    if ( ap_rst_n.read() == ap_const_logic_0) {
        dma_address_preg = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,5,5>(ap_ST_st24_fsm_23, ap_CS_fsm.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY.read()) || esl_seteq<1,1,1>(AXI_DMA_SLAVE_BVALID.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_WREADY.read())))) {
            dma_address_preg = localAddress1_reg_248.read();
        }
    }
    if ( ap_rst_n.read() == ap_const_logic_0) {
        dma_control_preg = ap_const_lv32_0;
    } else {
        if (((esl_seteq<1,5,5>(ap_ST_st28_fsm_27, ap_CS_fsm.read()) && 
              !(esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_WREADY.read()) || ap_sig_bdd_504.read())) || 
             (esl_seteq<1,5,5>(ap_ST_st30_fsm_29, ap_CS_fsm.read()) && 
              !(esl_seteq<1,1,1>(AXI_DMA_SLAVE_RVALID.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY.read()))))) {
            dma_control_preg = AXI_DMA_SLAVE_RDATA.read();
        }
    }
    if ( ap_rst_n.read() == ap_const_logic_0) {
        dma_status_preg = ap_const_lv32_0;
    } else {
        if (((!esl_seteq<1,1,1>(AXI_DMA_SLAVE_RVALID.read(), ap_const_logic_0) && 
              esl_seteq<1,5,5>(ap_ST_st31_fsm_30, ap_CS_fsm.read())) || 
             (esl_seteq<1,5,5>(ap_ST_st29_fsm_28, ap_CS_fsm.read()) && 
              !(esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY.read()) || ap_sig_bdd_504.read())))) {
            dma_status_preg = AXI_DMA_SLAVE_RDATA.read();
        }
    }
    if ((esl_seteq<1,5,5>(ap_ST_st32_fsm_31, ap_CS_fsm.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, p_Val2_s_phi_fu_263_p4.read()))) {
        i_reg_237 = i_1_reg_545.read();
    } else if (esl_seteq<1,5,5>(ap_ST_st12_fsm_11, ap_CS_fsm.read())) {
        i_reg_237 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,5,5>(ap_ST_st32_fsm_31, ap_CS_fsm.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, p_Val2_s_phi_fu_263_p4.read()))) {
        localAddress1_reg_248 = localAddress_1_reg_558.read();
    } else if (esl_seteq<1,5,5>(ap_ST_st12_fsm_11, ap_CS_fsm.read())) {
        localAddress1_reg_248 = startAddress_assign_fu_106.read();
    }
    if ( ap_rst_n.read() == ap_const_logic_0) {
        reset_scanner_preg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,5,5>(ap_ST_st12_fsm_11, ap_CS_fsm.read())) {
            reset_scanner_preg =  (sc_logic) (ap_const_lv1_0[0]);
        } else if ((esl_seteq<1,5,5>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
                    !esl_seteq<1,1,1>(localEnabled_load_fu_331_p1.read(), ap_const_lv1_0) && 
                    !(!esl_seteq<1,1,1>(localEnabled_load_fu_331_p1.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_lv1_0, write_assign_load_load_fu_334_p1.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY.read())) && 
                    !esl_seteq<1,1,1>(ap_const_lv1_0, write_assign_load_load_fu_334_p1.read()))) {
            reset_scanner_preg =  (sc_logic) (ap_const_lv1_1[0]);
        }
    }
    if (esl_seteq<1,5,5>(ap_ST_st12_fsm_11, ap_CS_fsm.read())) {
        AXI_DMA_SLAVE_addr_1_reg_531 = AXI_DMA_SLAVE_addr_1_fu_387_p2.read();
        AXI_DMA_SLAVE_addr_2_reg_536 = AXI_DMA_SLAVE_addr_2_fu_393_p2.read();
        AXI_DMA_SLAVE_addr_reg_525 = AXI_DMA_SLAVE_addr_fu_381_p2.read();
    }
    if ((esl_seteq<1,5,5>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && !esl_seteq<1,1,1>(localEnabled_load_fu_331_p1.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_lv1_0, write_assign_load_load_fu_334_p1.read()) && !(!esl_seteq<1,1,1>(localEnabled_load_fu_331_p1.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_lv1_0, write_assign_load_load_fu_334_p1.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY.read())))) {
        AXI_DMA_SLAVE_addr_3_reg_489 = AXI_DMA_SLAVE_addr_3_fu_337_p2.read();
    }
    if ((esl_seteq<1,5,5>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        enabled_assign_fu_122 = enabled_read_read_fu_126_p2.read();
        write_assign_fu_110 = write_read_read_fu_132_p2.read();
    }
    if ((esl_seteq<1,5,5>(ap_ST_st13_fsm_12, ap_CS_fsm.read()) && !((esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY.read()) && 
  !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_fu_402_p2.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_WREADY.read()) && 
  !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_fu_402_p2.read()))))) {
        i_1_reg_545 = i_1_fu_408_p2.read();
        tmp_2_reg_541 = tmp_2_fu_402_p2.read();
    }
    if ((esl_seteq<1,5,5>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && !(!esl_seteq<1,1,1>(localEnabled_load_fu_331_p1.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_lv1_0, write_assign_load_load_fu_334_p1.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY.read())))) {
        iterations_assign_fu_118 = iterations.read();
        length_assign_fu_114 = length_r.read();
        localEnabled_reg_481 = enabled_assign_fu_122.read();
        startAddress_assign_fu_106 = startAddress.read();
    }
    if ((esl_seteq<1,5,5>(ap_ST_st24_fsm_23, ap_CS_fsm.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY.read()) || esl_seteq<1,1,1>(AXI_DMA_SLAVE_BVALID.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_WREADY.read())))) {
        localAddress_1_reg_558 = localAddress_1_fu_445_p2.read();
    }
    if (((esl_seteq<1,5,5>(ap_ST_st10_fsm_9, ap_CS_fsm.read()) && 
  !esl_seteq<1,1,1>(AXI_DMA_SLAVE_BVALID.read(), ap_const_logic_0)) || (esl_seteq<1,5,5>(ap_ST_st11_fsm_10, ap_CS_fsm.read()) && 
  !esl_seteq<1,1,1>(localEnabled_reg_481.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, write_assign_load_reg_485.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, p_Val2_2_phi_fu_231_p4.read())))) {
        p_Val2_2_reg_228 = fabric_interrupt_write_finished_V.read();
    }
    if (((!esl_seteq<1,1,1>(AXI_DMA_SLAVE_RVALID.read(), ap_const_logic_0) && 
  esl_seteq<1,5,5>(ap_ST_st31_fsm_30, ap_CS_fsm.read())) || (esl_seteq<1,5,5>(ap_ST_st32_fsm_31, ap_CS_fsm.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, p_Val2_s_phi_fu_263_p4.read())))) {
        p_Val2_s_reg_260 = fabric_interrupt_read_finished_V.read();
    }
    if (((esl_seteq<1,5,5>(ap_ST_st3_fsm_2, ap_CS_fsm.read()) && 
  !esl_seteq<1,1,1>(AXI_DMA_SLAVE_RVALID.read(), ap_const_logic_0)) || (!esl_seteq<1,1,1>(AXI_DMA_SLAVE_RVALID.read(), ap_const_logic_0) && 
  esl_seteq<1,5,5>(ap_ST_st19_fsm_18, ap_CS_fsm.read())))) {
        reg_298 = AXI_DMA_SLAVE_RDATA.read().range(31, 1);
    }
    if (((!esl_seteq<1,1,1>(AXI_DMA_SLAVE_RVALID.read(), ap_const_logic_0) && 
  esl_seteq<1,5,5>(ap_ST_st6_fsm_5, ap_CS_fsm.read())) || (!esl_seteq<1,1,1>(AXI_DMA_SLAVE_RVALID.read(), ap_const_logic_0) && 
  esl_seteq<1,5,5>(ap_ST_st22_fsm_21, ap_CS_fsm.read())))) {
        reg_302 = AXI_DMA_SLAVE_RDATA.read().range(31, 13);
    }
    if ((!esl_seteq<1,1,1>(AXI_DMA_SLAVE_RVALID.read(), ap_const_logic_0) && esl_seteq<1,5,5>(ap_ST_st22_fsm_21, ap_CS_fsm.read()))) {
        tmp_10_reg_553 = tmp_10_fu_431_p1.read();
    }
    if ((!esl_seteq<1,1,1>(AXI_DMA_SLAVE_RVALID.read(), ap_const_logic_0) && esl_seteq<1,5,5>(ap_ST_st6_fsm_5, ap_CS_fsm.read()))) {
        tmp_4_reg_495 = tmp_4_fu_353_p1.read();
    }
    if ((esl_seteq<1,5,5>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && !esl_seteq<1,1,1>(localEnabled_load_fu_331_p1.read(), ap_const_lv1_0) && !(!esl_seteq<1,1,1>(localEnabled_load_fu_331_p1.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_lv1_0, write_assign_load_load_fu_334_p1.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY.read())))) {
        write_assign_load_reg_485 = write_assign_fu_110.read();
    }
}

void pl_axi_dma_controller::thread_AXI_DMA_SLAVE_ARADDR() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY.read()) && 
          esl_seteq<1,5,5>(ap_ST_st25_fsm_24, ap_CS_fsm.read())) || 
         (!esl_seteq<1,1,1>(AXI_DMA_SLAVE_RVALID.read(), ap_const_logic_0) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY.read()) && 
          esl_seteq<1,5,5>(ap_ST_st30_fsm_29, ap_CS_fsm.read())))) {
        AXI_DMA_SLAVE_ARADDR = AXI_DMA_SLAVE_addr_reg_525.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY.read()) && 
                 esl_seteq<1,5,5>(ap_ST_st15_fsm_14, ap_CS_fsm.read())) || 
                (!esl_seteq<1,1,1>(AXI_DMA_SLAVE_RVALID.read(), ap_const_logic_0) && 
                 esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY.read()) && 
                 esl_seteq<1,5,5>(ap_ST_st16_fsm_15, ap_CS_fsm.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, tmp_8_fu_414_p3.read())) || 
                (!esl_seteq<1,1,1>(AXI_DMA_SLAVE_BVALID.read(), ap_const_logic_0) && 
                 esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY.read()) && 
                 esl_seteq<1,5,5>(ap_ST_st21_fsm_20, ap_CS_fsm.read())) || 
                (!esl_seteq<1,1,1>(AXI_DMA_SLAVE_BVALID.read(), ap_const_logic_0) && 
                 esl_seteq<1,5,5>(ap_ST_st24_fsm_23, ap_CS_fsm.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY.read()) && 
                 !ap_sig_bdd_504.read() && 
                 esl_seteq<1,5,5>(ap_ST_st29_fsm_28, ap_CS_fsm.read())))) {
        AXI_DMA_SLAVE_ARADDR = ap_const_lv32_0;
    } else if ((!esl_seteq<1,1,1>(AXI_DMA_SLAVE_BVALID.read(), ap_const_logic_0) && 
                esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY.read()) && 
                esl_seteq<1,5,5>(ap_ST_st5_fsm_4, ap_CS_fsm.read()))) {
        AXI_DMA_SLAVE_ARADDR = AXI_DMA_SLAVE_addr_3_reg_489.read();
    } else if ((esl_seteq<1,5,5>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
                !esl_seteq<1,1,1>(localEnabled_load_fu_331_p1.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, write_assign_load_load_fu_334_p1.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY.read()))) {
        AXI_DMA_SLAVE_ARADDR =  (sc_lv<32>) (ap_const_lv64_C);
    } else {
        AXI_DMA_SLAVE_ARADDR = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void pl_axi_dma_controller::thread_AXI_DMA_SLAVE_ARBURST() {
    AXI_DMA_SLAVE_ARBURST = ap_const_lv2_0;
}

void pl_axi_dma_controller::thread_AXI_DMA_SLAVE_ARCACHE() {
    AXI_DMA_SLAVE_ARCACHE = ap_const_lv4_0;
}

void pl_axi_dma_controller::thread_AXI_DMA_SLAVE_ARID() {
    AXI_DMA_SLAVE_ARID = ap_const_lv1_0;
}

void pl_axi_dma_controller::thread_AXI_DMA_SLAVE_ARLEN() {
    AXI_DMA_SLAVE_ARLEN = ap_const_lv32_1;
}

void pl_axi_dma_controller::thread_AXI_DMA_SLAVE_ARLOCK() {
    AXI_DMA_SLAVE_ARLOCK = ap_const_lv2_0;
}

void pl_axi_dma_controller::thread_AXI_DMA_SLAVE_ARPROT() {
    AXI_DMA_SLAVE_ARPROT = ap_const_lv3_0;
}

void pl_axi_dma_controller::thread_AXI_DMA_SLAVE_ARQOS() {
    AXI_DMA_SLAVE_ARQOS = ap_const_lv4_0;
}

void pl_axi_dma_controller::thread_AXI_DMA_SLAVE_ARREGION() {
    AXI_DMA_SLAVE_ARREGION = ap_const_lv4_0;
}

void pl_axi_dma_controller::thread_AXI_DMA_SLAVE_ARSIZE() {
    AXI_DMA_SLAVE_ARSIZE = ap_const_lv3_0;
}

void pl_axi_dma_controller::thread_AXI_DMA_SLAVE_ARUSER() {
    AXI_DMA_SLAVE_ARUSER = ap_const_lv1_0;
}

void pl_axi_dma_controller::thread_AXI_DMA_SLAVE_ARVALID() {
    if (((esl_seteq<1,5,5>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
          !esl_seteq<1,1,1>(localEnabled_load_fu_331_p1.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, write_assign_load_load_fu_334_p1.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY.read())) || 
         (!esl_seteq<1,1,1>(AXI_DMA_SLAVE_BVALID.read(), ap_const_logic_0) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY.read()) && 
          esl_seteq<1,5,5>(ap_ST_st5_fsm_4, ap_CS_fsm.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY.read()) && 
          esl_seteq<1,5,5>(ap_ST_st15_fsm_14, ap_CS_fsm.read())) || 
         (!esl_seteq<1,1,1>(AXI_DMA_SLAVE_RVALID.read(), ap_const_logic_0) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY.read()) && 
          esl_seteq<1,5,5>(ap_ST_st16_fsm_15, ap_CS_fsm.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_8_fu_414_p3.read())) || 
         (!esl_seteq<1,1,1>(AXI_DMA_SLAVE_BVALID.read(), ap_const_logic_0) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY.read()) && 
          esl_seteq<1,5,5>(ap_ST_st21_fsm_20, ap_CS_fsm.read())) || 
         (!esl_seteq<1,1,1>(AXI_DMA_SLAVE_BVALID.read(), ap_const_logic_0) && 
          esl_seteq<1,5,5>(ap_ST_st24_fsm_23, ap_CS_fsm.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY.read()) && 
          esl_seteq<1,5,5>(ap_ST_st25_fsm_24, ap_CS_fsm.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY.read()) && 
          !ap_sig_bdd_504.read() && 
          esl_seteq<1,5,5>(ap_ST_st29_fsm_28, ap_CS_fsm.read())) || 
         (!esl_seteq<1,1,1>(AXI_DMA_SLAVE_RVALID.read(), ap_const_logic_0) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY.read()) && 
          esl_seteq<1,5,5>(ap_ST_st30_fsm_29, ap_CS_fsm.read())))) {
        AXI_DMA_SLAVE_ARVALID = ap_const_logic_1;
    } else {
        AXI_DMA_SLAVE_ARVALID = ap_const_logic_0;
    }
}

void pl_axi_dma_controller::thread_AXI_DMA_SLAVE_AWADDR() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY.read()) && 
         esl_seteq<1,5,5>(ap_ST_st28_fsm_27, ap_CS_fsm.read()) && 
         !ap_sig_bdd_504.read())) {
        AXI_DMA_SLAVE_AWADDR = AXI_DMA_SLAVE_addr_2_reg_536.read();
    } else if ((!esl_seteq<1,1,1>(AXI_DMA_SLAVE_BVALID.read(), ap_const_logic_0) && 
                esl_seteq<1,5,5>(ap_ST_st24_fsm_23, ap_CS_fsm.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY.read()))) {
        AXI_DMA_SLAVE_AWADDR = AXI_DMA_SLAVE_addr_1_reg_531.read();
    } else if (((esl_seteq<1,5,5>(ap_ST_st13_fsm_12, ap_CS_fsm.read()) && 
                 !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_fu_402_p2.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY.read()) && 
                 esl_seteq<1,5,5>(ap_ST_st17_fsm_16, ap_CS_fsm.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY.read()) && 
                 esl_seteq<1,5,5>(ap_ST_st20_fsm_19, ap_CS_fsm.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY.read()) && 
                 esl_seteq<1,5,5>(ap_ST_st23_fsm_22, ap_CS_fsm.read())))) {
        AXI_DMA_SLAVE_AWADDR = ap_const_lv32_0;
    } else if ((esl_seteq<1,5,5>(ap_ST_st9_fsm_8, ap_CS_fsm.read()) && 
                !esl_seteq<1,1,1>(AXI_DMA_SLAVE_BVALID.read(), ap_const_logic_0) && 
                esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY.read()))) {
        AXI_DMA_SLAVE_AWADDR =  (sc_lv<32>) (ap_const_lv64_16);
    } else if ((esl_seteq<1,5,5>(ap_ST_st8_fsm_7, ap_CS_fsm.read()) && 
                !esl_seteq<1,1,1>(AXI_DMA_SLAVE_BVALID.read(), ap_const_logic_0) && 
                esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY.read()))) {
        AXI_DMA_SLAVE_AWADDR =  (sc_lv<32>) (ap_const_lv64_12);
    } else if (((esl_seteq<1,5,5>(ap_ST_st4_fsm_3, ap_CS_fsm.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY.read()) && 
                 esl_seteq<1,5,5>(ap_ST_st7_fsm_6, ap_CS_fsm.read())))) {
        AXI_DMA_SLAVE_AWADDR = AXI_DMA_SLAVE_addr_3_reg_489.read();
    } else {
        AXI_DMA_SLAVE_AWADDR = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void pl_axi_dma_controller::thread_AXI_DMA_SLAVE_AWBURST() {
    AXI_DMA_SLAVE_AWBURST = ap_const_lv2_0;
}

void pl_axi_dma_controller::thread_AXI_DMA_SLAVE_AWCACHE() {
    AXI_DMA_SLAVE_AWCACHE = ap_const_lv4_0;
}

void pl_axi_dma_controller::thread_AXI_DMA_SLAVE_AWID() {
    AXI_DMA_SLAVE_AWID = ap_const_lv1_0;
}

void pl_axi_dma_controller::thread_AXI_DMA_SLAVE_AWLEN() {
    AXI_DMA_SLAVE_AWLEN = ap_const_lv32_1;
}

void pl_axi_dma_controller::thread_AXI_DMA_SLAVE_AWLOCK() {
    AXI_DMA_SLAVE_AWLOCK = ap_const_lv2_0;
}

void pl_axi_dma_controller::thread_AXI_DMA_SLAVE_AWPROT() {
    AXI_DMA_SLAVE_AWPROT = ap_const_lv3_0;
}

void pl_axi_dma_controller::thread_AXI_DMA_SLAVE_AWQOS() {
    AXI_DMA_SLAVE_AWQOS = ap_const_lv4_0;
}

void pl_axi_dma_controller::thread_AXI_DMA_SLAVE_AWREGION() {
    AXI_DMA_SLAVE_AWREGION = ap_const_lv4_0;
}

void pl_axi_dma_controller::thread_AXI_DMA_SLAVE_AWSIZE() {
    AXI_DMA_SLAVE_AWSIZE = ap_const_lv3_0;
}

void pl_axi_dma_controller::thread_AXI_DMA_SLAVE_AWUSER() {
    AXI_DMA_SLAVE_AWUSER = ap_const_lv1_0;
}

void pl_axi_dma_controller::thread_AXI_DMA_SLAVE_AWVALID() {
    if (((esl_seteq<1,5,5>(ap_ST_st4_fsm_3, ap_CS_fsm.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY.read()) && 
          esl_seteq<1,5,5>(ap_ST_st7_fsm_6, ap_CS_fsm.read())) || 
         (esl_seteq<1,5,5>(ap_ST_st8_fsm_7, ap_CS_fsm.read()) && 
          !esl_seteq<1,1,1>(AXI_DMA_SLAVE_BVALID.read(), ap_const_logic_0) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY.read())) || 
         (esl_seteq<1,5,5>(ap_ST_st9_fsm_8, ap_CS_fsm.read()) && 
          !esl_seteq<1,1,1>(AXI_DMA_SLAVE_BVALID.read(), ap_const_logic_0) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY.read())) || 
         (esl_seteq<1,5,5>(ap_ST_st13_fsm_12, ap_CS_fsm.read()) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_fu_402_p2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY.read()) && 
          esl_seteq<1,5,5>(ap_ST_st17_fsm_16, ap_CS_fsm.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY.read()) && 
          esl_seteq<1,5,5>(ap_ST_st20_fsm_19, ap_CS_fsm.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY.read()) && 
          esl_seteq<1,5,5>(ap_ST_st23_fsm_22, ap_CS_fsm.read())) || 
         (!esl_seteq<1,1,1>(AXI_DMA_SLAVE_BVALID.read(), ap_const_logic_0) && 
          esl_seteq<1,5,5>(ap_ST_st24_fsm_23, ap_CS_fsm.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY.read()) && 
          esl_seteq<1,5,5>(ap_ST_st28_fsm_27, ap_CS_fsm.read()) && 
          !ap_sig_bdd_504.read()))) {
        AXI_DMA_SLAVE_AWVALID = ap_const_logic_1;
    } else {
        AXI_DMA_SLAVE_AWVALID = ap_const_logic_0;
    }
}

void pl_axi_dma_controller::thread_AXI_DMA_SLAVE_BREADY() {
    if (((esl_seteq<1,5,5>(ap_ST_st8_fsm_7, ap_CS_fsm.read()) && 
          !(esl_seteq<1,1,1>(AXI_DMA_SLAVE_BVALID.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_WREADY.read()))) || 
         (!(esl_seteq<1,1,1>(AXI_DMA_SLAVE_BVALID.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_WREADY.read())) && 
          esl_seteq<1,5,5>(ap_ST_st9_fsm_8, ap_CS_fsm.read())) || 
         (esl_seteq<1,5,5>(ap_ST_st10_fsm_9, ap_CS_fsm.read()) && 
          !esl_seteq<1,1,1>(AXI_DMA_SLAVE_BVALID.read(), ap_const_logic_0)) || 
         (esl_seteq<1,5,5>(ap_ST_st24_fsm_23, ap_CS_fsm.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY.read()) || esl_seteq<1,1,1>(AXI_DMA_SLAVE_BVALID.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_WREADY.read()))) || 
         (esl_seteq<1,5,5>(ap_ST_st5_fsm_4, ap_CS_fsm.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY.read()) || esl_seteq<1,1,1>(AXI_DMA_SLAVE_BVALID.read(), ap_const_logic_0))) || 
         (!esl_seteq<1,1,1>(AXI_DMA_SLAVE_BVALID.read(), ap_const_logic_0) && 
          esl_seteq<1,5,5>(ap_ST_st14_fsm_13, ap_CS_fsm.read())) || 
         (!esl_seteq<1,1,1>(AXI_DMA_SLAVE_BVALID.read(), ap_const_logic_0) && 
          esl_seteq<1,5,5>(ap_ST_st18_fsm_17, ap_CS_fsm.read())) || 
         (!(esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY.read()) || esl_seteq<1,1,1>(AXI_DMA_SLAVE_BVALID.read(), ap_const_logic_0)) && 
          esl_seteq<1,5,5>(ap_ST_st21_fsm_20, ap_CS_fsm.read())) || 
         (esl_seteq<1,5,5>(ap_ST_st28_fsm_27, ap_CS_fsm.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_WREADY.read()) || ap_sig_bdd_504.read())) || 
         (esl_seteq<1,5,5>(ap_ST_st29_fsm_28, ap_CS_fsm.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY.read()) || ap_sig_bdd_504.read())))) {
        AXI_DMA_SLAVE_BREADY = ap_const_logic_1;
    } else {
        AXI_DMA_SLAVE_BREADY = ap_const_logic_0;
    }
}

void pl_axi_dma_controller::thread_AXI_DMA_SLAVE_RREADY() {
    if (((esl_seteq<1,5,5>(ap_ST_st3_fsm_2, ap_CS_fsm.read()) && 
          !esl_seteq<1,1,1>(AXI_DMA_SLAVE_RVALID.read(), ap_const_logic_0)) || 
         (!esl_seteq<1,1,1>(AXI_DMA_SLAVE_RVALID.read(), ap_const_logic_0) && 
          esl_seteq<1,5,5>(ap_ST_st19_fsm_18, ap_CS_fsm.read())) || 
         (!esl_seteq<1,1,1>(AXI_DMA_SLAVE_RVALID.read(), ap_const_logic_0) && 
          esl_seteq<1,5,5>(ap_ST_st6_fsm_5, ap_CS_fsm.read())) || 
         (!esl_seteq<1,1,1>(AXI_DMA_SLAVE_RVALID.read(), ap_const_logic_0) && 
          esl_seteq<1,5,5>(ap_ST_st22_fsm_21, ap_CS_fsm.read())) || 
         (!esl_seteq<1,1,1>(AXI_DMA_SLAVE_RVALID.read(), ap_const_logic_0) && 
          esl_seteq<1,5,5>(ap_ST_st31_fsm_30, ap_CS_fsm.read())) || 
         (esl_seteq<1,5,5>(ap_ST_st16_fsm_15, ap_CS_fsm.read()) && 
          !(esl_seteq<1,1,1>(AXI_DMA_SLAVE_RVALID.read(), ap_const_logic_0) || (esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, tmp_8_fu_414_p3.read())))) || 
         (esl_seteq<1,5,5>(ap_ST_st28_fsm_27, ap_CS_fsm.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_WREADY.read()) || ap_sig_bdd_504.read())) || 
         (esl_seteq<1,5,5>(ap_ST_st29_fsm_28, ap_CS_fsm.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY.read()) || ap_sig_bdd_504.read())) || 
         (esl_seteq<1,5,5>(ap_ST_st30_fsm_29, ap_CS_fsm.read()) && 
          !(esl_seteq<1,1,1>(AXI_DMA_SLAVE_RVALID.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY.read()))))) {
        AXI_DMA_SLAVE_RREADY = ap_const_logic_1;
    } else {
        AXI_DMA_SLAVE_RREADY = ap_const_logic_0;
    }
}

void pl_axi_dma_controller::thread_AXI_DMA_SLAVE_WDATA() {
    if ((!esl_seteq<1,1,1>(AXI_DMA_SLAVE_BVALID.read(), ap_const_logic_0) && 
         esl_seteq<1,5,5>(ap_ST_st24_fsm_23, ap_CS_fsm.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_DMA_SLAVE_WREADY.read()))) {
        AXI_DMA_SLAVE_WDATA = localAddress1_reg_248.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_DMA_SLAVE_WREADY.read()) && 
                esl_seteq<1,5,5>(ap_ST_st23_fsm_22, ap_CS_fsm.read()))) {
        AXI_DMA_SLAVE_WDATA = tmp_6_fu_435_p4.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_DMA_SLAVE_WREADY.read()) && 
                esl_seteq<1,5,5>(ap_ST_st20_fsm_19, ap_CS_fsm.read()))) {
        AXI_DMA_SLAVE_WDATA = tmp_5_fu_422_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_DMA_SLAVE_WREADY.read()) && 
                esl_seteq<1,5,5>(ap_ST_st17_fsm_16, ap_CS_fsm.read()))) {
        AXI_DMA_SLAVE_WDATA = ap_const_lv32_0;
    } else if ((esl_seteq<1,5,5>(ap_ST_st13_fsm_12, ap_CS_fsm.read()) && 
                !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_fu_402_p2.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_DMA_SLAVE_WREADY.read()))) {
        AXI_DMA_SLAVE_WDATA = ap_const_lv32_4;
    } else if (((esl_seteq<1,5,5>(ap_ST_st9_fsm_8, ap_CS_fsm.read()) && 
                 !esl_seteq<1,1,1>(AXI_DMA_SLAVE_BVALID.read(), ap_const_logic_0) && 
                 esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_DMA_SLAVE_WREADY.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_DMA_SLAVE_WREADY.read()) && 
                 esl_seteq<1,5,5>(ap_ST_st28_fsm_27, ap_CS_fsm.read()) && 
                 !ap_sig_bdd_504.read()))) {
        AXI_DMA_SLAVE_WDATA = length_assign_fu_114.read();
    } else if ((esl_seteq<1,5,5>(ap_ST_st8_fsm_7, ap_CS_fsm.read()) && 
                !esl_seteq<1,1,1>(AXI_DMA_SLAVE_BVALID.read(), ap_const_logic_0) && 
                esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_DMA_SLAVE_WREADY.read()))) {
        AXI_DMA_SLAVE_WDATA = startAddress_assign_fu_106.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_DMA_SLAVE_WREADY.read()) && 
                esl_seteq<1,5,5>(ap_ST_st7_fsm_6, ap_CS_fsm.read()))) {
        AXI_DMA_SLAVE_WDATA = tmp_1_fu_357_p4.read();
    } else if ((esl_seteq<1,5,5>(ap_ST_st4_fsm_3, ap_CS_fsm.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_DMA_SLAVE_WREADY.read()))) {
        AXI_DMA_SLAVE_WDATA = tmp_fu_344_p3.read();
    } else {
        AXI_DMA_SLAVE_WDATA = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void pl_axi_dma_controller::thread_AXI_DMA_SLAVE_WID() {
    AXI_DMA_SLAVE_WID = ap_const_lv1_0;
}

void pl_axi_dma_controller::thread_AXI_DMA_SLAVE_WLAST() {
    AXI_DMA_SLAVE_WLAST = ap_const_logic_0;
}

void pl_axi_dma_controller::thread_AXI_DMA_SLAVE_WSTRB() {
    AXI_DMA_SLAVE_WSTRB = ap_const_lv4_F;
}

void pl_axi_dma_controller::thread_AXI_DMA_SLAVE_WUSER() {
    AXI_DMA_SLAVE_WUSER = ap_const_lv1_0;
}

void pl_axi_dma_controller::thread_AXI_DMA_SLAVE_WVALID() {
    if (((esl_seteq<1,5,5>(ap_ST_st4_fsm_3, ap_CS_fsm.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_DMA_SLAVE_WREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_DMA_SLAVE_WREADY.read()) && 
          esl_seteq<1,5,5>(ap_ST_st7_fsm_6, ap_CS_fsm.read())) || 
         (esl_seteq<1,5,5>(ap_ST_st8_fsm_7, ap_CS_fsm.read()) && 
          !esl_seteq<1,1,1>(AXI_DMA_SLAVE_BVALID.read(), ap_const_logic_0) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_DMA_SLAVE_WREADY.read())) || 
         (esl_seteq<1,5,5>(ap_ST_st9_fsm_8, ap_CS_fsm.read()) && 
          !esl_seteq<1,1,1>(AXI_DMA_SLAVE_BVALID.read(), ap_const_logic_0) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_DMA_SLAVE_WREADY.read())) || 
         (esl_seteq<1,5,5>(ap_ST_st13_fsm_12, ap_CS_fsm.read()) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_fu_402_p2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_DMA_SLAVE_WREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_DMA_SLAVE_WREADY.read()) && 
          esl_seteq<1,5,5>(ap_ST_st17_fsm_16, ap_CS_fsm.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_DMA_SLAVE_WREADY.read()) && 
          esl_seteq<1,5,5>(ap_ST_st20_fsm_19, ap_CS_fsm.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_DMA_SLAVE_WREADY.read()) && 
          esl_seteq<1,5,5>(ap_ST_st23_fsm_22, ap_CS_fsm.read())) || 
         (!esl_seteq<1,1,1>(AXI_DMA_SLAVE_BVALID.read(), ap_const_logic_0) && 
          esl_seteq<1,5,5>(ap_ST_st24_fsm_23, ap_CS_fsm.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_DMA_SLAVE_WREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_DMA_SLAVE_WREADY.read()) && 
          esl_seteq<1,5,5>(ap_ST_st28_fsm_27, ap_CS_fsm.read()) && 
          !ap_sig_bdd_504.read()))) {
        AXI_DMA_SLAVE_WVALID = ap_const_logic_1;
    } else {
        AXI_DMA_SLAVE_WVALID = ap_const_logic_0;
    }
}

void pl_axi_dma_controller::thread_AXI_DMA_SLAVE_addr_1_fu_387_p2() {
    AXI_DMA_SLAVE_addr_1_fu_387_p2 =  (sc_lv<32>) (ap_const_lv64_6);
}

void pl_axi_dma_controller::thread_AXI_DMA_SLAVE_addr_2_fu_393_p2() {
    AXI_DMA_SLAVE_addr_2_fu_393_p2 =  (sc_lv<32>) (ap_const_lv64_A);
}

void pl_axi_dma_controller::thread_AXI_DMA_SLAVE_addr_3_fu_337_p2() {
    AXI_DMA_SLAVE_addr_3_fu_337_p2 =  (sc_lv<32>) (ap_const_lv64_C);
}

void pl_axi_dma_controller::thread_AXI_DMA_SLAVE_addr_fu_381_p2() {
    AXI_DMA_SLAVE_addr_fu_381_p2 =  (sc_lv<32>) (ap_const_lv64_1);
}

void pl_axi_dma_controller::thread_ap_done() {
    if ((esl_seteq<1,5,5>(ap_ST_st11_fsm_10, ap_CS_fsm.read()) && 
         (esl_seteq<1,1,1>(localEnabled_reg_481.read(), ap_const_lv1_0) || 
          (esl_seteq<1,1,1>(ap_const_lv1_0, write_assign_load_reg_485.read()) && 
           !esl_seteq<1,1,1>(ap_const_lv1_0, p_Val2_2_phi_fu_231_p4.read())) || 
          (!esl_seteq<1,1,1>(ap_const_lv1_0, write_assign_load_reg_485.read()) && 
           esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_reg_541.read()))))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void pl_axi_dma_controller::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,5,5>(ap_ST_st1_fsm_0, ap_CS_fsm.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void pl_axi_dma_controller::thread_ap_ready() {
    if ((esl_seteq<1,5,5>(ap_ST_st11_fsm_10, ap_CS_fsm.read()) && 
         (esl_seteq<1,1,1>(localEnabled_reg_481.read(), ap_const_lv1_0) || 
          (esl_seteq<1,1,1>(ap_const_lv1_0, write_assign_load_reg_485.read()) && 
           !esl_seteq<1,1,1>(ap_const_lv1_0, p_Val2_2_phi_fu_231_p4.read())) || 
          (!esl_seteq<1,1,1>(ap_const_lv1_0, write_assign_load_reg_485.read()) && 
           esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_reg_541.read()))))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void pl_axi_dma_controller::thread_ap_sig_bdd_504() {
    ap_sig_bdd_504 = (esl_seteq<1,1,1>(AXI_DMA_SLAVE_RVALID.read(), ap_const_logic_0) || esl_seteq<1,1,1>(AXI_DMA_SLAVE_BVALID.read(), ap_const_logic_0));
}

void pl_axi_dma_controller::thread_ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY.read())) {
        ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY = AXI_DMA_SLAVE_ARREADY.read();
    } else {
        ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY = ap_const_logic_1;
    }
}

void pl_axi_dma_controller::thread_ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY.read())) {
        ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY = AXI_DMA_SLAVE_AWREADY.read();
    } else {
        ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY = ap_const_logic_1;
    }
}

void pl_axi_dma_controller::thread_ap_sig_ioackin_AXI_DMA_SLAVE_WREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_DMA_SLAVE_WREADY.read())) {
        ap_sig_ioackin_AXI_DMA_SLAVE_WREADY = AXI_DMA_SLAVE_WREADY.read();
    } else {
        ap_sig_ioackin_AXI_DMA_SLAVE_WREADY = ap_const_logic_1;
    }
}

void pl_axi_dma_controller::thread_controller_finished_V() {
    if ((!esl_seteq<1,1,1>(AXI_DMA_SLAVE_BVALID.read(), ap_const_logic_0) && 
         esl_seteq<1,5,5>(ap_ST_st14_fsm_13, ap_CS_fsm.read()))) {
        controller_finished_V = ap_const_lv1_0;
    } else if (((esl_seteq<1,5,5>(ap_ST_st32_fsm_31, ap_CS_fsm.read()) && 
                 !esl_seteq<1,1,1>(ap_const_lv1_0, p_Val2_s_phi_fu_263_p4.read())) || 
                (esl_seteq<1,5,5>(ap_ST_st11_fsm_10, ap_CS_fsm.read()) && 
                 !esl_seteq<1,1,1>(localEnabled_reg_481.read(), ap_const_lv1_0) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, write_assign_load_reg_485.read()) && 
                 !esl_seteq<1,1,1>(ap_const_lv1_0, p_Val2_2_phi_fu_231_p4.read())))) {
        controller_finished_V = ap_const_lv1_1;
    } else {
        controller_finished_V = controller_finished_V_preg.read();
    }
}

void pl_axi_dma_controller::thread_dma_address() {
    if ((esl_seteq<1,5,5>(ap_ST_st24_fsm_23, ap_CS_fsm.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY.read()) || esl_seteq<1,1,1>(AXI_DMA_SLAVE_BVALID.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_WREADY.read())))) {
        dma_address = localAddress1_reg_248.read();
    } else {
        dma_address = dma_address_preg.read();
    }
}

void pl_axi_dma_controller::thread_dma_control() {
    if (((esl_seteq<1,5,5>(ap_ST_st28_fsm_27, ap_CS_fsm.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_WREADY.read()) || ap_sig_bdd_504.read())) || 
         (esl_seteq<1,5,5>(ap_ST_st30_fsm_29, ap_CS_fsm.read()) && 
          !(esl_seteq<1,1,1>(AXI_DMA_SLAVE_RVALID.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY.read()))))) {
        dma_control = AXI_DMA_SLAVE_RDATA.read();
    } else {
        dma_control = dma_control_preg.read();
    }
}

void pl_axi_dma_controller::thread_dma_status() {
    if (((!esl_seteq<1,1,1>(AXI_DMA_SLAVE_RVALID.read(), ap_const_logic_0) && 
          esl_seteq<1,5,5>(ap_ST_st31_fsm_30, ap_CS_fsm.read())) || 
         (esl_seteq<1,5,5>(ap_ST_st29_fsm_28, ap_CS_fsm.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY.read()) || ap_sig_bdd_504.read())))) {
        dma_status = AXI_DMA_SLAVE_RDATA.read();
    } else {
        dma_status = dma_status_preg.read();
    }
}

void pl_axi_dma_controller::thread_enabled_read_read_fu_126_p2() {
    enabled_read_read_fu_126_p2 =  (sc_lv<1>) (enabled.read());
}

void pl_axi_dma_controller::thread_i_1_fu_408_p2() {
    i_1_fu_408_p2 = (!i_reg_237.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_bigint<32>(i_reg_237.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void pl_axi_dma_controller::thread_localAddress_1_fu_445_p2() {
    localAddress_1_fu_445_p2 = (!localAddress1_reg_248.read().is_01() || !ap_const_lv32_4.is_01())? sc_lv<32>(): (sc_bigint<32>(localAddress1_reg_248.read()) + sc_biguint<32>(ap_const_lv32_4));
}

void pl_axi_dma_controller::thread_localEnabled_load_fu_331_p1() {
    localEnabled_load_fu_331_p1 = enabled_assign_fu_122.read();
}

void pl_axi_dma_controller::thread_p_Val2_2_phi_fu_231_p4() {
    p_Val2_2_phi_fu_231_p4 = p_Val2_2_reg_228.read();
}

void pl_axi_dma_controller::thread_p_Val2_s_phi_fu_263_p4() {
    p_Val2_s_phi_fu_263_p4 = p_Val2_s_reg_260.read();
}

void pl_axi_dma_controller::thread_reset_scanner() {
    if (esl_seteq<1,5,5>(ap_ST_st12_fsm_11, ap_CS_fsm.read())) {
        reset_scanner =  (sc_logic) (ap_const_lv1_0[0]);
    } else if ((esl_seteq<1,5,5>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
                !esl_seteq<1,1,1>(localEnabled_load_fu_331_p1.read(), ap_const_lv1_0) && 
                !(!esl_seteq<1,1,1>(localEnabled_load_fu_331_p1.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_lv1_0, write_assign_load_load_fu_334_p1.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY.read())) && 
                !esl_seteq<1,1,1>(ap_const_lv1_0, write_assign_load_load_fu_334_p1.read()))) {
        reset_scanner =  (sc_logic) (ap_const_lv1_1[0]);
    } else {
        reset_scanner = reset_scanner_preg.read();
    }
}

void pl_axi_dma_controller::thread_tmp_10_fu_431_p1() {
    tmp_10_fu_431_p1 = AXI_DMA_SLAVE_RDATA.read().range(12-1, 0);
}

void pl_axi_dma_controller::thread_tmp_1_fu_357_p4() {
    tmp_1_fu_357_p4 = esl_concat<20,12>(esl_concat<19,1>(reg_302.read(), ap_const_lv1_1), tmp_4_reg_495.read());
}

void pl_axi_dma_controller::thread_tmp_2_fu_402_p2() {
    tmp_2_fu_402_p2 = (!i_reg_237.read().is_01() || !iterations_assign_fu_118.read().is_01())? sc_lv<1>(): (sc_bigint<32>(i_reg_237.read()) < sc_bigint<32>(iterations_assign_fu_118.read()));
}

void pl_axi_dma_controller::thread_tmp_4_fu_353_p1() {
    tmp_4_fu_353_p1 = AXI_DMA_SLAVE_RDATA.read().range(12-1, 0);
}

void pl_axi_dma_controller::thread_tmp_5_fu_422_p3() {
    tmp_5_fu_422_p3 = esl_concat<31,1>(reg_298.read(), ap_const_lv1_1);
}

void pl_axi_dma_controller::thread_tmp_6_fu_435_p4() {
    tmp_6_fu_435_p4 = esl_concat<20,12>(esl_concat<19,1>(reg_302.read(), ap_const_lv1_1), tmp_10_reg_553.read());
}

void pl_axi_dma_controller::thread_tmp_8_fu_414_p3() {
    tmp_8_fu_414_p3 = AXI_DMA_SLAVE_RDATA.read().range(2, 2);
}

void pl_axi_dma_controller::thread_tmp_fu_344_p3() {
    tmp_fu_344_p3 = esl_concat<31,1>(reg_298.read(), ap_const_lv1_1);
}

void pl_axi_dma_controller::thread_write_assign_load_load_fu_334_p1() {
    write_assign_load_load_fu_334_p1 = write_assign_fu_110.read();
}

void pl_axi_dma_controller::thread_write_read_read_fu_132_p2() {
    write_read_read_fu_132_p2 =  (sc_lv<1>) (write_r.read());
}

void pl_axi_dma_controller::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint()) {
        case 0 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 1 : 
            if ((!esl_seteq<1,1,1>(localEnabled_load_fu_331_p1.read(), ap_const_lv1_0) && !(!esl_seteq<1,1,1>(localEnabled_load_fu_331_p1.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_lv1_0, write_assign_load_load_fu_334_p1.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY.read())) && !esl_seteq<1,1,1>(ap_const_lv1_0, write_assign_load_load_fu_334_p1.read()))) {
                ap_NS_fsm = ap_ST_st12_fsm_11;
            } else if ((!esl_seteq<1,1,1>(localEnabled_load_fu_331_p1.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_lv1_0, write_assign_load_load_fu_334_p1.read()) && !(!esl_seteq<1,1,1>(localEnabled_load_fu_331_p1.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_lv1_0, write_assign_load_load_fu_334_p1.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY.read())))) {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            } else if ((esl_seteq<1,1,1>(localEnabled_load_fu_331_p1.read(), ap_const_lv1_0) && !(!esl_seteq<1,1,1>(localEnabled_load_fu_331_p1.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_lv1_0, write_assign_load_load_fu_334_p1.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY.read())))) {
                ap_NS_fsm = ap_ST_st11_fsm_10;
            } else {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            }
            break;
        case 2 : 
            if (!esl_seteq<1,1,1>(AXI_DMA_SLAVE_RVALID.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st4_fsm_3;
            } else {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            }
            break;
        case 3 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_WREADY.read()))) {
                ap_NS_fsm = ap_ST_st5_fsm_4;
            } else {
                ap_NS_fsm = ap_ST_st4_fsm_3;
            }
            break;
        case 4 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY.read()) || esl_seteq<1,1,1>(AXI_DMA_SLAVE_BVALID.read(), ap_const_logic_0))) {
                ap_NS_fsm = ap_ST_st6_fsm_5;
            } else {
                ap_NS_fsm = ap_ST_st5_fsm_4;
            }
            break;
        case 5 : 
            if (!esl_seteq<1,1,1>(AXI_DMA_SLAVE_RVALID.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st7_fsm_6;
            } else {
                ap_NS_fsm = ap_ST_st6_fsm_5;
            }
            break;
        case 6 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_WREADY.read()))) {
                ap_NS_fsm = ap_ST_st8_fsm_7;
            } else {
                ap_NS_fsm = ap_ST_st7_fsm_6;
            }
            break;
        case 7 : 
            if (!(esl_seteq<1,1,1>(AXI_DMA_SLAVE_BVALID.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_WREADY.read()))) {
                ap_NS_fsm = ap_ST_st9_fsm_8;
            } else {
                ap_NS_fsm = ap_ST_st8_fsm_7;
            }
            break;
        case 8 : 
            if (!(esl_seteq<1,1,1>(AXI_DMA_SLAVE_BVALID.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_WREADY.read()))) {
                ap_NS_fsm = ap_ST_st10_fsm_9;
            } else {
                ap_NS_fsm = ap_ST_st9_fsm_8;
            }
            break;
        case 9 : 
            if (!esl_seteq<1,1,1>(AXI_DMA_SLAVE_BVALID.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st11_fsm_10;
            } else {
                ap_NS_fsm = ap_ST_st10_fsm_9;
            }
            break;
        case 10 : 
            if ((esl_seteq<1,1,1>(localEnabled_reg_481.read(), ap_const_lv1_0) || (esl_seteq<1,1,1>(ap_const_lv1_0, write_assign_load_reg_485.read()) && 
  !esl_seteq<1,1,1>(ap_const_lv1_0, p_Val2_2_phi_fu_231_p4.read())) || (!esl_seteq<1,1,1>(ap_const_lv1_0, write_assign_load_reg_485.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_reg_541.read())))) {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            } else {
                ap_NS_fsm = ap_ST_st11_fsm_10;
            }
            break;
        case 11 : 
            ap_NS_fsm = ap_ST_st13_fsm_12;
            break;
        case 12 : 
            if ((!esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_fu_402_p2.read()) && !((esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY.read()) && 
  !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_fu_402_p2.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_WREADY.read()) && 
  !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_fu_402_p2.read()))))) {
                ap_NS_fsm = ap_ST_st14_fsm_13;
            } else if ((esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_fu_402_p2.read()) && !((esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY.read()) && 
  !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_fu_402_p2.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_WREADY.read()) && 
  !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_fu_402_p2.read()))))) {
                ap_NS_fsm = ap_ST_st11_fsm_10;
            } else {
                ap_NS_fsm = ap_ST_st13_fsm_12;
            }
            break;
        case 13 : 
            if (!esl_seteq<1,1,1>(AXI_DMA_SLAVE_BVALID.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st15_fsm_14;
            } else {
                ap_NS_fsm = ap_ST_st14_fsm_13;
            }
            break;
        case 14 : 
            if (!esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY.read())) {
                ap_NS_fsm = ap_ST_st16_fsm_15;
            } else {
                ap_NS_fsm = ap_ST_st15_fsm_14;
            }
            break;
        case 15 : 
            if ((esl_seteq<1,1,1>(ap_const_lv1_0, tmp_8_fu_414_p3.read()) && !(esl_seteq<1,1,1>(AXI_DMA_SLAVE_RVALID.read(), ap_const_logic_0) || (esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, tmp_8_fu_414_p3.read()))))) {
                ap_NS_fsm = ap_ST_st19_fsm_18;
            } else if ((!(esl_seteq<1,1,1>(AXI_DMA_SLAVE_RVALID.read(), ap_const_logic_0) || (esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, tmp_8_fu_414_p3.read()))) && !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_8_fu_414_p3.read()))) {
                ap_NS_fsm = ap_ST_st17_fsm_16;
            } else {
                ap_NS_fsm = ap_ST_st16_fsm_15;
            }
            break;
        case 16 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_WREADY.read()))) {
                ap_NS_fsm = ap_ST_st18_fsm_17;
            } else {
                ap_NS_fsm = ap_ST_st17_fsm_16;
            }
            break;
        case 17 : 
            if (!esl_seteq<1,1,1>(AXI_DMA_SLAVE_BVALID.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st15_fsm_14;
            } else {
                ap_NS_fsm = ap_ST_st18_fsm_17;
            }
            break;
        case 18 : 
            if (!esl_seteq<1,1,1>(AXI_DMA_SLAVE_RVALID.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st20_fsm_19;
            } else {
                ap_NS_fsm = ap_ST_st19_fsm_18;
            }
            break;
        case 19 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_WREADY.read()))) {
                ap_NS_fsm = ap_ST_st21_fsm_20;
            } else {
                ap_NS_fsm = ap_ST_st20_fsm_19;
            }
            break;
        case 20 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY.read()) || esl_seteq<1,1,1>(AXI_DMA_SLAVE_BVALID.read(), ap_const_logic_0))) {
                ap_NS_fsm = ap_ST_st22_fsm_21;
            } else {
                ap_NS_fsm = ap_ST_st21_fsm_20;
            }
            break;
        case 21 : 
            if (!esl_seteq<1,1,1>(AXI_DMA_SLAVE_RVALID.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st23_fsm_22;
            } else {
                ap_NS_fsm = ap_ST_st22_fsm_21;
            }
            break;
        case 22 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_WREADY.read()))) {
                ap_NS_fsm = ap_ST_st24_fsm_23;
            } else {
                ap_NS_fsm = ap_ST_st23_fsm_22;
            }
            break;
        case 23 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY.read()) || esl_seteq<1,1,1>(AXI_DMA_SLAVE_BVALID.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_WREADY.read()))) {
                ap_NS_fsm = ap_ST_st25_fsm_24;
            } else {
                ap_NS_fsm = ap_ST_st24_fsm_23;
            }
            break;
        case 24 : 
            if (!esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY.read())) {
                ap_NS_fsm = ap_ST_st26_fsm_25;
            } else {
                ap_NS_fsm = ap_ST_st25_fsm_24;
            }
            break;
        case 25 : 
            ap_NS_fsm = ap_ST_st27_fsm_26;
            break;
        case 26 : 
            ap_NS_fsm = ap_ST_st28_fsm_27;
            break;
        case 27 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_WREADY.read()) || ap_sig_bdd_504.read())) {
                ap_NS_fsm = ap_ST_st29_fsm_28;
            } else {
                ap_NS_fsm = ap_ST_st28_fsm_27;
            }
            break;
        case 28 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY.read()) || ap_sig_bdd_504.read())) {
                ap_NS_fsm = ap_ST_st30_fsm_29;
            } else {
                ap_NS_fsm = ap_ST_st29_fsm_28;
            }
            break;
        case 29 : 
            if (!(esl_seteq<1,1,1>(AXI_DMA_SLAVE_RVALID.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY.read()))) {
                ap_NS_fsm = ap_ST_st31_fsm_30;
            } else {
                ap_NS_fsm = ap_ST_st30_fsm_29;
            }
            break;
        case 30 : 
            if (!esl_seteq<1,1,1>(AXI_DMA_SLAVE_RVALID.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st32_fsm_31;
            } else {
                ap_NS_fsm = ap_ST_st31_fsm_30;
            }
            break;
        case 31 : 
            if (!esl_seteq<1,1,1>(ap_const_lv1_0, p_Val2_s_phi_fu_263_p4.read())) {
                ap_NS_fsm = ap_ST_st13_fsm_12;
            } else {
                ap_NS_fsm = ap_ST_st32_fsm_31;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<5>) ("XXXXX");
            break;
    }
}
void pl_axi_dma_controller::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_AXI_DMA_SLAVE_AWVALID\" :  \"" << m_axi_AXI_DMA_SLAVE_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_AXI_DMA_SLAVE_AWREADY\" :  \"" << m_axi_AXI_DMA_SLAVE_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_AXI_DMA_SLAVE_AWADDR\" :  \"" << m_axi_AXI_DMA_SLAVE_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_AXI_DMA_SLAVE_AWID\" :  \"" << m_axi_AXI_DMA_SLAVE_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_AXI_DMA_SLAVE_AWLEN\" :  \"" << m_axi_AXI_DMA_SLAVE_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_AXI_DMA_SLAVE_AWSIZE\" :  \"" << m_axi_AXI_DMA_SLAVE_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_AXI_DMA_SLAVE_AWBURST\" :  \"" << m_axi_AXI_DMA_SLAVE_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_AXI_DMA_SLAVE_AWLOCK\" :  \"" << m_axi_AXI_DMA_SLAVE_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_AXI_DMA_SLAVE_AWCACHE\" :  \"" << m_axi_AXI_DMA_SLAVE_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_AXI_DMA_SLAVE_AWPROT\" :  \"" << m_axi_AXI_DMA_SLAVE_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_AXI_DMA_SLAVE_AWQOS\" :  \"" << m_axi_AXI_DMA_SLAVE_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_AXI_DMA_SLAVE_AWREGION\" :  \"" << m_axi_AXI_DMA_SLAVE_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_AXI_DMA_SLAVE_AWUSER\" :  \"" << m_axi_AXI_DMA_SLAVE_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_AXI_DMA_SLAVE_WVALID\" :  \"" << m_axi_AXI_DMA_SLAVE_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_AXI_DMA_SLAVE_WREADY\" :  \"" << m_axi_AXI_DMA_SLAVE_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_AXI_DMA_SLAVE_WDATA\" :  \"" << m_axi_AXI_DMA_SLAVE_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_AXI_DMA_SLAVE_WSTRB\" :  \"" << m_axi_AXI_DMA_SLAVE_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_AXI_DMA_SLAVE_WLAST\" :  \"" << m_axi_AXI_DMA_SLAVE_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_AXI_DMA_SLAVE_WID\" :  \"" << m_axi_AXI_DMA_SLAVE_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_AXI_DMA_SLAVE_WUSER\" :  \"" << m_axi_AXI_DMA_SLAVE_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_AXI_DMA_SLAVE_ARVALID\" :  \"" << m_axi_AXI_DMA_SLAVE_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_AXI_DMA_SLAVE_ARREADY\" :  \"" << m_axi_AXI_DMA_SLAVE_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_AXI_DMA_SLAVE_ARADDR\" :  \"" << m_axi_AXI_DMA_SLAVE_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_AXI_DMA_SLAVE_ARID\" :  \"" << m_axi_AXI_DMA_SLAVE_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_AXI_DMA_SLAVE_ARLEN\" :  \"" << m_axi_AXI_DMA_SLAVE_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_AXI_DMA_SLAVE_ARSIZE\" :  \"" << m_axi_AXI_DMA_SLAVE_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_AXI_DMA_SLAVE_ARBURST\" :  \"" << m_axi_AXI_DMA_SLAVE_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_AXI_DMA_SLAVE_ARLOCK\" :  \"" << m_axi_AXI_DMA_SLAVE_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_AXI_DMA_SLAVE_ARCACHE\" :  \"" << m_axi_AXI_DMA_SLAVE_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_AXI_DMA_SLAVE_ARPROT\" :  \"" << m_axi_AXI_DMA_SLAVE_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_AXI_DMA_SLAVE_ARQOS\" :  \"" << m_axi_AXI_DMA_SLAVE_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_AXI_DMA_SLAVE_ARREGION\" :  \"" << m_axi_AXI_DMA_SLAVE_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_AXI_DMA_SLAVE_ARUSER\" :  \"" << m_axi_AXI_DMA_SLAVE_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_AXI_DMA_SLAVE_RVALID\" :  \"" << m_axi_AXI_DMA_SLAVE_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_AXI_DMA_SLAVE_RREADY\" :  \"" << m_axi_AXI_DMA_SLAVE_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_AXI_DMA_SLAVE_RDATA\" :  \"" << m_axi_AXI_DMA_SLAVE_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_AXI_DMA_SLAVE_RLAST\" :  \"" << m_axi_AXI_DMA_SLAVE_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_AXI_DMA_SLAVE_RID\" :  \"" << m_axi_AXI_DMA_SLAVE_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_AXI_DMA_SLAVE_RUSER\" :  \"" << m_axi_AXI_DMA_SLAVE_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_AXI_DMA_SLAVE_RRESP\" :  \"" << m_axi_AXI_DMA_SLAVE_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_AXI_DMA_SLAVE_BVALID\" :  \"" << m_axi_AXI_DMA_SLAVE_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_AXI_DMA_SLAVE_BREADY\" :  \"" << m_axi_AXI_DMA_SLAVE_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_AXI_DMA_SLAVE_BRESP\" :  \"" << m_axi_AXI_DMA_SLAVE_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_AXI_DMA_SLAVE_BID\" :  \"" << m_axi_AXI_DMA_SLAVE_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_AXI_DMA_SLAVE_BUSER\" :  \"" << m_axi_AXI_DMA_SLAVE_BUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"startAddress\" :  \"" << startAddress.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"write_r\" :  \"" << write_r.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"length_r\" :  \"" << length_r.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"iterations\" :  \"" << iterations.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"enabled\" :  \"" << enabled.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"reset_scanner\" :  \"" << reset_scanner.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dma_control\" :  \"" << dma_control.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dma_status\" :  \"" << dma_status.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dma_address\" :  \"" << dma_address.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"fabric_interrupt_write_finished_V\" :  \"" << fabric_interrupt_write_finished_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"fabric_interrupt_read_finished_V\" :  \"" << fabric_interrupt_read_finished_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"controller_finished_V\" :  \"" << controller_finished_V.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

