// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.1
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ==============================================================


#include <systemc>
#include <iostream>
#include <cstdlib>
#include <cstddef>
#include <stdint.h>
#include "SysCFileHandler.h"
#define AP_INT_MAX_W 32678

#include "ap_int.h"


using namespace std;
using namespace sc_core;
using namespace sc_dt;




   #define AUTOTB_TVIN_AXI_DMA_SLAVE  "../tv/cdatafile/c.pl_axi_dma_controller.autotvin_AXI_DMA_SLAVE.dat"
   #define AUTOTB_TVOUT_AXI_DMA_SLAVE  "../tv/cdatafile/c.pl_axi_dma_controller.autotvout_AXI_DMA_SLAVE.dat"
   #define AUTOTB_TVIN_startAddress  "../tv/cdatafile/c.pl_axi_dma_controller.autotvin_startAddress.dat"
   #define AUTOTB_TVIN_write_r  "../tv/cdatafile/c.pl_axi_dma_controller.autotvin_write_r.dat"
   #define AUTOTB_TVIN_length_r  "../tv/cdatafile/c.pl_axi_dma_controller.autotvin_length_r.dat"
   #define AUTOTB_TVIN_iterations  "../tv/cdatafile/c.pl_axi_dma_controller.autotvin_iterations.dat"
   #define AUTOTB_TVIN_enabled  "../tv/cdatafile/c.pl_axi_dma_controller.autotvin_enabled.dat"
   #define AUTOTB_TVOUT_reset_scanner  "../tv/cdatafile/c.pl_axi_dma_controller.autotvout_reset_scanner.dat"
   #define AUTOTB_TVOUT_dma_control  "../tv/cdatafile/c.pl_axi_dma_controller.autotvout_dma_control.dat"
   #define AUTOTB_TVOUT_dma_status  "../tv/cdatafile/c.pl_axi_dma_controller.autotvout_dma_status.dat"
   #define AUTOTB_TVOUT_dma_address  "../tv/cdatafile/c.pl_axi_dma_controller.autotvout_dma_address.dat"
   #define AUTOTB_TVIN_fabric_interupt_finished_V  "../tv/cdatafile/c.pl_axi_dma_controller.autotvin_fabric_interupt_finished_V.dat"
   #define AUTOTB_TVOUT_controller_finished_V  "../tv/cdatafile/c.pl_axi_dma_controller.autotvout_controller_finished_V.dat"
   #define INTER_TCL  "../tv/cdatafile/ref.tcl"

   #define AUTOTB_TVOUT_PC_AXI_DMA_SLAVE  "../tv/rtldatafile/rtl.pl_axi_dma_controller.autotvout_AXI_DMA_SLAVE.dat"
   #define AUTOTB_TVOUT_PC_reset_scanner  "../tv/rtldatafile/rtl.pl_axi_dma_controller.autotvout_reset_scanner.dat"
   #define AUTOTB_TVOUT_PC_dma_control  "../tv/rtldatafile/rtl.pl_axi_dma_controller.autotvout_dma_control.dat"
   #define AUTOTB_TVOUT_PC_dma_status  "../tv/rtldatafile/rtl.pl_axi_dma_controller.autotvout_dma_status.dat"
   #define AUTOTB_TVOUT_PC_dma_address  "../tv/rtldatafile/rtl.pl_axi_dma_controller.autotvout_dma_address.dat"
   #define AUTOTB_TVOUT_PC_controller_finished_V  "../tv/rtldatafile/rtl.pl_axi_dma_controller.autotvout_controller_finished_V.dat"

class INTER_TCL_FILE {
    public:
//functions
        INTER_TCL_FILE(const char* name) {
            mName = name;
            AXI_DMA_SLAVE_depth = 0;
            startAddress_depth = 0;
            write_r_depth = 0;
            length_r_depth = 0;
            iterations_depth = 0;
            enabled_depth = 0;
            reset_scanner_depth = 0;
            dma_control_depth = 0;
            dma_status_depth = 0;
            dma_address_depth = 0;
            fabric_interupt_finished_V_depth = 0;
            controller_finished_V_depth = 0;
            trans_num =0;
        }
        ~INTER_TCL_FILE() {
            mFile.open(mName);
            if (!mFile.good() ) {
                cout<<"Failed to open file ref.tcl."<<endl;
                exit (1);
            }
            string total_list = get_depth_list();
            mFile<<"set depth_list {\n";
            mFile<<total_list; 
            mFile<<"}\n";
            mFile<<"set trans_num "<<trans_num<<endl;
            mFile.close();
        }
        string get_depth_list () {
            stringstream total_list;
            total_list<<"   {AXI_DMA_SLAVE "<< AXI_DMA_SLAVE_depth << "}\n";
            total_list<<"   {startAddress "<< startAddress_depth << "}\n";
            total_list<<"   {write_r "<< write_r_depth << "}\n";
            total_list<<"   {length_r "<< length_r_depth << "}\n";
            total_list<<"   {iterations "<< iterations_depth << "}\n";
            total_list<<"   {enabled "<< enabled_depth << "}\n";
            total_list<<"   {reset_scanner "<< reset_scanner_depth << "}\n";
            total_list<<"   {dma_control "<< dma_control_depth << "}\n";
            total_list<<"   {dma_status "<< dma_status_depth << "}\n";
            total_list<<"   {dma_address "<< dma_address_depth << "}\n";
            total_list<<"   {fabric_interupt_finished_V "<< fabric_interupt_finished_V_depth << "}\n";
            total_list<<"   {controller_finished_V "<< controller_finished_V_depth << "}\n";
            return total_list.str();
        }
        void set_num (int num , int* class_num) {
            (*class_num) = (*class_num) > num ? (*class_num) : num;
        }
    public:
//variables
        int AXI_DMA_SLAVE_depth;
        int startAddress_depth;
        int write_r_depth;
        int length_r_depth;
        int iterations_depth;
        int enabled_depth;
        int reset_scanner_depth;
        int dma_control_depth;
        int dma_status_depth;
        int dma_address_depth;
        int fabric_interupt_finished_V_depth;
        int controller_finished_V_depth;
        int trans_num;
    private:
        ofstream mFile;
        const char* mName;
};

#define pl_axi_dma_controller AESL_ORIG_DUT_pl_axi_dma_controller
extern void pl_axi_dma_controller (volatile int* AXI_DMA_SLAVE, volatile unsigned int startAddress, volatile bool write, volatile int length, volatile int iterations, volatile bool enabled, volatile bool* reset_scanner, volatile int* dma_control, volatile int* dma_status, volatile int* dma_address, volatile ap_uint<1>* fabric_interupt_finished, volatile ap_uint<1>* controller_finished);
#undef pl_axi_dma_controller
void pl_axi_dma_controller (volatile int* AXI_DMA_SLAVE, volatile unsigned int startAddress, volatile bool write, volatile int length, volatile int iterations, volatile bool enabled, volatile bool* reset_scanner, volatile int* dma_control, volatile int* dma_status, volatile int* dma_address, volatile ap_uint<1>* fabric_interupt_finished, volatile ap_uint<1>* controller_finished) {

    fstream wrapc_switch_file_token;

    wrapc_switch_file_token.open(".hls_cosim_wrapc_switch.log");

    int AESL_i;

    if (wrapc_switch_file_token.good()) {

        static unsigned AESL_transaction_pc;

        string AESL_token;

        string AESL_num;

        static AESL_FILE_HANDLER aesl_fh;

        aesl_fh.read(AUTOTB_TVOUT_PC_AXI_DMA_SLAVE, AESL_token); //[[transaction]]

        if ( AESL_token != "[[transaction]]") {

           exit(1);

        }

        aesl_fh.read(AUTOTB_TVOUT_PC_AXI_DMA_SLAVE, AESL_num); //transaction number

        if (atoi(AESL_num.c_str()) == AESL_transaction_pc ) {

            aesl_fh.read(AUTOTB_TVOUT_PC_AXI_DMA_SLAVE, AESL_token); //data

            sc_bv<32> *AXI_DMA_SLAVE_pc_buffer = new sc_bv<32>[14];

            int i = 0;

            while (AESL_token != "[[/transaction]]") {

                bool no_x = false;

                bool err = false;

                while (!no_x) {

                size_t x_found = AESL_token.find('X');

                if (x_found != string::npos) {

                    if (!err) {

                        cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'AXI_DMA_SLAVE', possible cause: There are uninitialized variables in the C design." << endl; 

                        err = true;

                    }

                    AESL_token.replace(x_found, 1, "0");

                } else {

                    no_x = true;

                }

                }

                no_x = false;

                while (!no_x) {

                size_t x_found = AESL_token.find('x', 2);

                if (x_found != string::npos) {

                    if (!err) {

                        cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'AXI_DMA_SLAVE', possible cause: There are uninitialized variables in the C design." << endl; 

                        err = true;

                    }

                    AESL_token.replace(x_found, 1, "0");

                } else {

                    no_x = true;

                }

                }

                if (AESL_token != "") {

                    AXI_DMA_SLAVE_pc_buffer[i] = AESL_token.c_str();

                    i++;

                }

                aesl_fh.read(AUTOTB_TVOUT_PC_AXI_DMA_SLAVE, AESL_token); //data or [[/transaction]]

                if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_AXI_DMA_SLAVE)) {

                   exit(1);

                }

            }

            if (i > 0) {

                AESL_i = 0; //subscript for rtl array

                for (int i_0 = 0; i_0 <= 13 ; i_0+= 1) {

                    AXI_DMA_SLAVE[i_0] = (sc_bv<32>(AXI_DMA_SLAVE_pc_buffer[0 + AESL_i].range(31, 0))).to_uint64();

                    AESL_i++;

                }

                }

            delete [] AXI_DMA_SLAVE_pc_buffer;

        }

        aesl_fh.read(AUTOTB_TVOUT_PC_reset_scanner, AESL_token); //[[transaction]]

        if ( AESL_token != "[[transaction]]") {

           exit(1);

        }

        aesl_fh.read(AUTOTB_TVOUT_PC_reset_scanner, AESL_num); //transaction number

        if (atoi(AESL_num.c_str()) == AESL_transaction_pc ) {

            aesl_fh.read(AUTOTB_TVOUT_PC_reset_scanner, AESL_token); //data

            sc_bv<1> *reset_scanner_pc_buffer = new sc_bv<1>[1];

            int i = 0;

            while (AESL_token != "[[/transaction]]") {

                bool no_x = false;

                bool err = false;

                while (!no_x) {

                size_t x_found = AESL_token.find('X');

                if (x_found != string::npos) {

                    if (!err) {

                        cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'reset_scanner', possible cause: There are uninitialized variables in the C design." << endl; 

                        err = true;

                    }

                    AESL_token.replace(x_found, 1, "0");

                } else {

                    no_x = true;

                }

                }

                no_x = false;

                while (!no_x) {

                size_t x_found = AESL_token.find('x', 2);

                if (x_found != string::npos) {

                    if (!err) {

                        cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'reset_scanner', possible cause: There are uninitialized variables in the C design." << endl; 

                        err = true;

                    }

                    AESL_token.replace(x_found, 1, "0");

                } else {

                    no_x = true;

                }

                }

                if (AESL_token != "") {

                    reset_scanner_pc_buffer[i] = AESL_token.c_str();

                    i++;

                }

                aesl_fh.read(AUTOTB_TVOUT_PC_reset_scanner, AESL_token); //data or [[/transaction]]

                if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_reset_scanner)) {

                   exit(1);

                }

            }

            if (i > 0) {

                AESL_i = 0; //subscript for rtl array

                for (int i_0 = 0; i_0 <= 0 ; i_0+= 1) {

                    *(reset_scanner) = (sc_bv<1>(reset_scanner_pc_buffer[0 + AESL_i].range(0, 0))).to_uint64();

                    AESL_i++;

                }

                }

            delete [] reset_scanner_pc_buffer;

        }

        aesl_fh.read(AUTOTB_TVOUT_PC_dma_control, AESL_token); //[[transaction]]

        if ( AESL_token != "[[transaction]]") {

           exit(1);

        }

        aesl_fh.read(AUTOTB_TVOUT_PC_dma_control, AESL_num); //transaction number

        if (atoi(AESL_num.c_str()) == AESL_transaction_pc ) {

            aesl_fh.read(AUTOTB_TVOUT_PC_dma_control, AESL_token); //data

            sc_bv<32> *dma_control_pc_buffer = new sc_bv<32>[1];

            int i = 0;

            while (AESL_token != "[[/transaction]]") {

                bool no_x = false;

                bool err = false;

                while (!no_x) {

                size_t x_found = AESL_token.find('X');

                if (x_found != string::npos) {

                    if (!err) {

                        cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'dma_control', possible cause: There are uninitialized variables in the C design." << endl; 

                        err = true;

                    }

                    AESL_token.replace(x_found, 1, "0");

                } else {

                    no_x = true;

                }

                }

                no_x = false;

                while (!no_x) {

                size_t x_found = AESL_token.find('x', 2);

                if (x_found != string::npos) {

                    if (!err) {

                        cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'dma_control', possible cause: There are uninitialized variables in the C design." << endl; 

                        err = true;

                    }

                    AESL_token.replace(x_found, 1, "0");

                } else {

                    no_x = true;

                }

                }

                if (AESL_token != "") {

                    dma_control_pc_buffer[i] = AESL_token.c_str();

                    i++;

                }

                aesl_fh.read(AUTOTB_TVOUT_PC_dma_control, AESL_token); //data or [[/transaction]]

                if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_dma_control)) {

                   exit(1);

                }

            }

            if (i > 0) {

                AESL_i = 0; //subscript for rtl array

                for (int i_0 = 0; i_0 <= 0 ; i_0+= 1) {

                    *(dma_control) = (sc_bv<32>(dma_control_pc_buffer[0 + AESL_i].range(31, 0))).to_uint64();

                    AESL_i++;

                }

                }

            delete [] dma_control_pc_buffer;

        }

        aesl_fh.read(AUTOTB_TVOUT_PC_dma_status, AESL_token); //[[transaction]]

        if ( AESL_token != "[[transaction]]") {

           exit(1);

        }

        aesl_fh.read(AUTOTB_TVOUT_PC_dma_status, AESL_num); //transaction number

        if (atoi(AESL_num.c_str()) == AESL_transaction_pc ) {

            aesl_fh.read(AUTOTB_TVOUT_PC_dma_status, AESL_token); //data

            sc_bv<32> *dma_status_pc_buffer = new sc_bv<32>[1];

            int i = 0;

            while (AESL_token != "[[/transaction]]") {

                bool no_x = false;

                bool err = false;

                while (!no_x) {

                size_t x_found = AESL_token.find('X');

                if (x_found != string::npos) {

                    if (!err) {

                        cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'dma_status', possible cause: There are uninitialized variables in the C design." << endl; 

                        err = true;

                    }

                    AESL_token.replace(x_found, 1, "0");

                } else {

                    no_x = true;

                }

                }

                no_x = false;

                while (!no_x) {

                size_t x_found = AESL_token.find('x', 2);

                if (x_found != string::npos) {

                    if (!err) {

                        cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'dma_status', possible cause: There are uninitialized variables in the C design." << endl; 

                        err = true;

                    }

                    AESL_token.replace(x_found, 1, "0");

                } else {

                    no_x = true;

                }

                }

                if (AESL_token != "") {

                    dma_status_pc_buffer[i] = AESL_token.c_str();

                    i++;

                }

                aesl_fh.read(AUTOTB_TVOUT_PC_dma_status, AESL_token); //data or [[/transaction]]

                if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_dma_status)) {

                   exit(1);

                }

            }

            if (i > 0) {

                AESL_i = 0; //subscript for rtl array

                for (int i_0 = 0; i_0 <= 0 ; i_0+= 1) {

                    *(dma_status) = (sc_bv<32>(dma_status_pc_buffer[0 + AESL_i].range(31, 0))).to_uint64();

                    AESL_i++;

                }

                }

            delete [] dma_status_pc_buffer;

        }

        aesl_fh.read(AUTOTB_TVOUT_PC_dma_address, AESL_token); //[[transaction]]

        if ( AESL_token != "[[transaction]]") {

           exit(1);

        }

        aesl_fh.read(AUTOTB_TVOUT_PC_dma_address, AESL_num); //transaction number

        if (atoi(AESL_num.c_str()) == AESL_transaction_pc ) {

            aesl_fh.read(AUTOTB_TVOUT_PC_dma_address, AESL_token); //data

            sc_bv<32> *dma_address_pc_buffer = new sc_bv<32>[1];

            int i = 0;

            while (AESL_token != "[[/transaction]]") {

                bool no_x = false;

                bool err = false;

                while (!no_x) {

                size_t x_found = AESL_token.find('X');

                if (x_found != string::npos) {

                    if (!err) {

                        cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'dma_address', possible cause: There are uninitialized variables in the C design." << endl; 

                        err = true;

                    }

                    AESL_token.replace(x_found, 1, "0");

                } else {

                    no_x = true;

                }

                }

                no_x = false;

                while (!no_x) {

                size_t x_found = AESL_token.find('x', 2);

                if (x_found != string::npos) {

                    if (!err) {

                        cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'dma_address', possible cause: There are uninitialized variables in the C design." << endl; 

                        err = true;

                    }

                    AESL_token.replace(x_found, 1, "0");

                } else {

                    no_x = true;

                }

                }

                if (AESL_token != "") {

                    dma_address_pc_buffer[i] = AESL_token.c_str();

                    i++;

                }

                aesl_fh.read(AUTOTB_TVOUT_PC_dma_address, AESL_token); //data or [[/transaction]]

                if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_dma_address)) {

                   exit(1);

                }

            }

            if (i > 0) {

                AESL_i = 0; //subscript for rtl array

                for (int i_0 = 0; i_0 <= 0 ; i_0+= 1) {

                    *(dma_address) = (sc_bv<32>(dma_address_pc_buffer[0 + AESL_i].range(31, 0))).to_uint64();

                    AESL_i++;

                }

                }

            delete [] dma_address_pc_buffer;

        }

        aesl_fh.read(AUTOTB_TVOUT_PC_controller_finished_V, AESL_token); //[[transaction]]

        if ( AESL_token != "[[transaction]]") {

           exit(1);

        }

        aesl_fh.read(AUTOTB_TVOUT_PC_controller_finished_V, AESL_num); //transaction number

        if (atoi(AESL_num.c_str()) == AESL_transaction_pc ) {

            aesl_fh.read(AUTOTB_TVOUT_PC_controller_finished_V, AESL_token); //data

            sc_bv<1> *controller_finished_V_pc_buffer = new sc_bv<1>[1];

            int i = 0;

            while (AESL_token != "[[/transaction]]") {

                bool no_x = false;

                bool err = false;

                while (!no_x) {

                size_t x_found = AESL_token.find('X');

                if (x_found != string::npos) {

                    if (!err) {

                        cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'controller_finished_V', possible cause: There are uninitialized variables in the C design." << endl; 

                        err = true;

                    }

                    AESL_token.replace(x_found, 1, "0");

                } else {

                    no_x = true;

                }

                }

                no_x = false;

                while (!no_x) {

                size_t x_found = AESL_token.find('x', 2);

                if (x_found != string::npos) {

                    if (!err) {

                        cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'controller_finished_V', possible cause: There are uninitialized variables in the C design." << endl; 

                        err = true;

                    }

                    AESL_token.replace(x_found, 1, "0");

                } else {

                    no_x = true;

                }

                }

                if (AESL_token != "") {

                    controller_finished_V_pc_buffer[i] = AESL_token.c_str();

                    i++;

                }

                aesl_fh.read(AUTOTB_TVOUT_PC_controller_finished_V, AESL_token); //data or [[/transaction]]

                if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_controller_finished_V)) {

                   exit(1);

                }

            }

            if (i > 0) {

                AESL_i = 0; //subscript for rtl array

                for (int i_0 = 0; i_0 <= 0 ; i_0+= 1) {

                    *(controller_finished) = (sc_bv<1>(controller_finished_V_pc_buffer[0 + AESL_i].range(0, 0))).to_string(SC_BIN).c_str();

                    AESL_i++;

                }

                }

            delete [] controller_finished_V_pc_buffer;

        }

        AESL_transaction_pc ++ ;

    } else {

        static unsigned AESL_transaction;

        static AESL_FILE_HANDLER aesl_fh;

        char* tvin_AXI_DMA_SLAVE = new char[50];

        char* tvout_AXI_DMA_SLAVE = new char[50];

        char* tvin_startAddress = new char[50];

        char* tvin_write_r = new char[50];

        char* tvin_length_r = new char[50];

        char* tvin_iterations = new char[50];

        char* tvin_enabled = new char[50];

        char* tvout_reset_scanner = new char[50];

        char* tvout_dma_control = new char[50];

        char* tvout_dma_status = new char[50];

        char* tvout_dma_address = new char[50];

        char* tvin_fabric_interupt_finished_V = new char[50];

        char* tvout_controller_finished_V = new char[50];

        static INTER_TCL_FILE tcl_file(INTER_TCL);


        int leading_zero;

        sprintf(tvin_AXI_DMA_SLAVE, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(AUTOTB_TVIN_AXI_DMA_SLAVE, tvin_AXI_DMA_SLAVE);

        sc_bv<32> *AXI_DMA_SLAVE_tvin_wrapc_buffer = new sc_bv<32>[14];

        AESL_i = 0; //subscript for rtl array

        for (int i_0 = 0; i_0 <= 13 ; i_0+= 1) {

            AXI_DMA_SLAVE_tvin_wrapc_buffer[0 + AESL_i].range(31, 0) = AXI_DMA_SLAVE[i_0];

            AESL_i++;

        }

        for (int i = 0; i < 14 ; i++) {

            sprintf(tvin_AXI_DMA_SLAVE, "%s\n", (AXI_DMA_SLAVE_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());

            aesl_fh.write(AUTOTB_TVIN_AXI_DMA_SLAVE, tvin_AXI_DMA_SLAVE);

        }

        tcl_file.set_num(14,&tcl_file.AXI_DMA_SLAVE_depth);

        sprintf(tvin_AXI_DMA_SLAVE, "[[/transaction]] \n");

        aesl_fh.write(AUTOTB_TVIN_AXI_DMA_SLAVE, tvin_AXI_DMA_SLAVE);

        delete [] AXI_DMA_SLAVE_tvin_wrapc_buffer;

        sprintf(tvin_startAddress, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(AUTOTB_TVIN_startAddress, tvin_startAddress);

        sc_bv<32> startAddress_tvin_wrapc_buffer;

        AESL_i = 0; //subscript for rtl array

        startAddress_tvin_wrapc_buffer.range(31, 0) = startAddress;

        AESL_i++;

        for (int i = 0; i < 1 ; i++) {

            sprintf(tvin_startAddress, "%s\n", (startAddress_tvin_wrapc_buffer).to_string(SC_HEX).c_str());

            aesl_fh.write(AUTOTB_TVIN_startAddress, tvin_startAddress);

        }

        tcl_file.set_num(1,&tcl_file.startAddress_depth);

        sprintf(tvin_startAddress, "[[/transaction]] \n");

        aesl_fh.write(AUTOTB_TVIN_startAddress, tvin_startAddress);

        sprintf(tvin_write_r, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(AUTOTB_TVIN_write_r, tvin_write_r);

        sc_bv<1> write_r_tvin_wrapc_buffer;

        AESL_i = 0; //subscript for rtl array

        write_r_tvin_wrapc_buffer.range(0, 0) = write;

        AESL_i++;

        for (int i = 0; i < 1 ; i++) {

            sprintf(tvin_write_r, "%s\n", (write_r_tvin_wrapc_buffer).to_string(SC_HEX).c_str());

            aesl_fh.write(AUTOTB_TVIN_write_r, tvin_write_r);

        }

        tcl_file.set_num(1,&tcl_file.write_r_depth);

        sprintf(tvin_write_r, "[[/transaction]] \n");

        aesl_fh.write(AUTOTB_TVIN_write_r, tvin_write_r);

        sprintf(tvin_length_r, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(AUTOTB_TVIN_length_r, tvin_length_r);

        sc_bv<32> length_r_tvin_wrapc_buffer;

        AESL_i = 0; //subscript for rtl array

        length_r_tvin_wrapc_buffer.range(31, 0) = length;

        AESL_i++;

        for (int i = 0; i < 1 ; i++) {

            sprintf(tvin_length_r, "%s\n", (length_r_tvin_wrapc_buffer).to_string(SC_HEX).c_str());

            aesl_fh.write(AUTOTB_TVIN_length_r, tvin_length_r);

        }

        tcl_file.set_num(1,&tcl_file.length_r_depth);

        sprintf(tvin_length_r, "[[/transaction]] \n");

        aesl_fh.write(AUTOTB_TVIN_length_r, tvin_length_r);

        sprintf(tvin_iterations, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(AUTOTB_TVIN_iterations, tvin_iterations);

        sc_bv<32> iterations_tvin_wrapc_buffer;

        AESL_i = 0; //subscript for rtl array

        iterations_tvin_wrapc_buffer.range(31, 0) = iterations;

        AESL_i++;

        for (int i = 0; i < 1 ; i++) {

            sprintf(tvin_iterations, "%s\n", (iterations_tvin_wrapc_buffer).to_string(SC_HEX).c_str());

            aesl_fh.write(AUTOTB_TVIN_iterations, tvin_iterations);

        }

        tcl_file.set_num(1,&tcl_file.iterations_depth);

        sprintf(tvin_iterations, "[[/transaction]] \n");

        aesl_fh.write(AUTOTB_TVIN_iterations, tvin_iterations);

        sprintf(tvin_enabled, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(AUTOTB_TVIN_enabled, tvin_enabled);

        sc_bv<1> enabled_tvin_wrapc_buffer;

        AESL_i = 0; //subscript for rtl array

        enabled_tvin_wrapc_buffer.range(0, 0) = enabled;

        AESL_i++;

        for (int i = 0; i < 1 ; i++) {

            sprintf(tvin_enabled, "%s\n", (enabled_tvin_wrapc_buffer).to_string(SC_HEX).c_str());

            aesl_fh.write(AUTOTB_TVIN_enabled, tvin_enabled);

        }

        tcl_file.set_num(1,&tcl_file.enabled_depth);

        sprintf(tvin_enabled, "[[/transaction]] \n");

        aesl_fh.write(AUTOTB_TVIN_enabled, tvin_enabled);

        sprintf(tvin_fabric_interupt_finished_V, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(AUTOTB_TVIN_fabric_interupt_finished_V, tvin_fabric_interupt_finished_V);

        sc_bv<1> *fabric_interupt_finished_V_tvin_wrapc_buffer = new sc_bv<1>[1];

        AESL_i = 0; //subscript for rtl array

        for (int i_0 = 0; i_0 <= 0 ; i_0+= 1) {

            fabric_interupt_finished_V_tvin_wrapc_buffer[0 + AESL_i].range(0, 0) = (*(fabric_interupt_finished)).to_string(2).c_str();

            AESL_i++;

        }

        for (int i = 0; i < 1 ; i++) {

            sprintf(tvin_fabric_interupt_finished_V, "%s\n", (fabric_interupt_finished_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());

            aesl_fh.write(AUTOTB_TVIN_fabric_interupt_finished_V, tvin_fabric_interupt_finished_V);

        }

        tcl_file.set_num(1,&tcl_file.fabric_interupt_finished_V_depth);

        sprintf(tvin_fabric_interupt_finished_V, "[[/transaction]] \n");

        aesl_fh.write(AUTOTB_TVIN_fabric_interupt_finished_V, tvin_fabric_interupt_finished_V);

        delete [] fabric_interupt_finished_V_tvin_wrapc_buffer;

        AESL_ORIG_DUT_pl_axi_dma_controller(AXI_DMA_SLAVE,startAddress,write,length,iterations,enabled,reset_scanner,dma_control,dma_status,dma_address,fabric_interupt_finished,controller_finished);

        sprintf(tvout_AXI_DMA_SLAVE, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(AUTOTB_TVOUT_AXI_DMA_SLAVE, tvout_AXI_DMA_SLAVE);

        sc_bv<32> *AXI_DMA_SLAVE_tvout_wrapc_buffer = new sc_bv<32>[14];

        AESL_i = 0; //subscript for rtl array

        for (int i_0 = 0; i_0 <= 13 ; i_0+= 1) {

            AXI_DMA_SLAVE_tvout_wrapc_buffer[0 + AESL_i].range(31, 0) = AXI_DMA_SLAVE[i_0];

            AESL_i++;

        }

        for (int i = 0; i < 14 ; i++) {

            sprintf(tvout_AXI_DMA_SLAVE, "%s\n", (AXI_DMA_SLAVE_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());

            aesl_fh.write(AUTOTB_TVOUT_AXI_DMA_SLAVE, tvout_AXI_DMA_SLAVE);

        }

        tcl_file.set_num(14,&tcl_file.AXI_DMA_SLAVE_depth);

        sprintf(tvout_AXI_DMA_SLAVE, "[[/transaction]] \n");

        aesl_fh.write(AUTOTB_TVOUT_AXI_DMA_SLAVE, tvout_AXI_DMA_SLAVE);

        delete [] AXI_DMA_SLAVE_tvout_wrapc_buffer;

        sprintf(tvout_reset_scanner, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(AUTOTB_TVOUT_reset_scanner, tvout_reset_scanner);

        sc_bv<1> *reset_scanner_tvout_wrapc_buffer = new sc_bv<1>[1];

        AESL_i = 0; //subscript for rtl array

        for (int i_0 = 0; i_0 <= 0 ; i_0+= 1) {

            reset_scanner_tvout_wrapc_buffer[0 + AESL_i].range(0, 0) = *(reset_scanner);

            AESL_i++;

        }

        for (int i = 0; i < 1 ; i++) {

            sprintf(tvout_reset_scanner, "%s\n", (reset_scanner_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());

            aesl_fh.write(AUTOTB_TVOUT_reset_scanner, tvout_reset_scanner);

        }

        tcl_file.set_num(1,&tcl_file.reset_scanner_depth);

        sprintf(tvout_reset_scanner, "[[/transaction]] \n");

        aesl_fh.write(AUTOTB_TVOUT_reset_scanner, tvout_reset_scanner);

        delete [] reset_scanner_tvout_wrapc_buffer;

        sprintf(tvout_dma_control, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(AUTOTB_TVOUT_dma_control, tvout_dma_control);

        sc_bv<32> *dma_control_tvout_wrapc_buffer = new sc_bv<32>[1];

        AESL_i = 0; //subscript for rtl array

        for (int i_0 = 0; i_0 <= 0 ; i_0+= 1) {

            dma_control_tvout_wrapc_buffer[0 + AESL_i].range(31, 0) = *(dma_control);

            AESL_i++;

        }

        for (int i = 0; i < 1 ; i++) {

            sprintf(tvout_dma_control, "%s\n", (dma_control_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());

            aesl_fh.write(AUTOTB_TVOUT_dma_control, tvout_dma_control);

        }

        tcl_file.set_num(1,&tcl_file.dma_control_depth);

        sprintf(tvout_dma_control, "[[/transaction]] \n");

        aesl_fh.write(AUTOTB_TVOUT_dma_control, tvout_dma_control);

        delete [] dma_control_tvout_wrapc_buffer;

        sprintf(tvout_dma_status, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(AUTOTB_TVOUT_dma_status, tvout_dma_status);

        sc_bv<32> *dma_status_tvout_wrapc_buffer = new sc_bv<32>[1];

        AESL_i = 0; //subscript for rtl array

        for (int i_0 = 0; i_0 <= 0 ; i_0+= 1) {

            dma_status_tvout_wrapc_buffer[0 + AESL_i].range(31, 0) = *(dma_status);

            AESL_i++;

        }

        for (int i = 0; i < 1 ; i++) {

            sprintf(tvout_dma_status, "%s\n", (dma_status_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());

            aesl_fh.write(AUTOTB_TVOUT_dma_status, tvout_dma_status);

        }

        tcl_file.set_num(1,&tcl_file.dma_status_depth);

        sprintf(tvout_dma_status, "[[/transaction]] \n");

        aesl_fh.write(AUTOTB_TVOUT_dma_status, tvout_dma_status);

        delete [] dma_status_tvout_wrapc_buffer;

        sprintf(tvout_dma_address, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(AUTOTB_TVOUT_dma_address, tvout_dma_address);

        sc_bv<32> *dma_address_tvout_wrapc_buffer = new sc_bv<32>[1];

        AESL_i = 0; //subscript for rtl array

        for (int i_0 = 0; i_0 <= 0 ; i_0+= 1) {

            dma_address_tvout_wrapc_buffer[0 + AESL_i].range(31, 0) = *(dma_address);

            AESL_i++;

        }

        for (int i = 0; i < 1 ; i++) {

            sprintf(tvout_dma_address, "%s\n", (dma_address_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());

            aesl_fh.write(AUTOTB_TVOUT_dma_address, tvout_dma_address);

        }

        tcl_file.set_num(1,&tcl_file.dma_address_depth);

        sprintf(tvout_dma_address, "[[/transaction]] \n");

        aesl_fh.write(AUTOTB_TVOUT_dma_address, tvout_dma_address);

        delete [] dma_address_tvout_wrapc_buffer;

        sprintf(tvout_controller_finished_V, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(AUTOTB_TVOUT_controller_finished_V, tvout_controller_finished_V);

        sc_bv<1> *controller_finished_V_tvout_wrapc_buffer = new sc_bv<1>[1];

        AESL_i = 0; //subscript for rtl array

        for (int i_0 = 0; i_0 <= 0 ; i_0+= 1) {

            controller_finished_V_tvout_wrapc_buffer[0 + AESL_i].range(0, 0) = (*(controller_finished)).to_string(2).c_str();

            AESL_i++;

        }

        for (int i = 0; i < 1 ; i++) {

            sprintf(tvout_controller_finished_V, "%s\n", (controller_finished_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());

            aesl_fh.write(AUTOTB_TVOUT_controller_finished_V, tvout_controller_finished_V);

        }

        tcl_file.set_num(1,&tcl_file.controller_finished_V_depth);

        sprintf(tvout_controller_finished_V, "[[/transaction]] \n");

        aesl_fh.write(AUTOTB_TVOUT_controller_finished_V, tvout_controller_finished_V);

        delete [] controller_finished_V_tvout_wrapc_buffer;

        delete [] tvin_AXI_DMA_SLAVE;

        delete [] tvout_AXI_DMA_SLAVE;

        delete [] tvin_startAddress;

        delete [] tvin_write_r;

        delete [] tvin_length_r;

        delete [] tvin_iterations;

        delete [] tvin_enabled;

        delete [] tvout_reset_scanner;

        delete [] tvout_dma_control;

        delete [] tvout_dma_status;

        delete [] tvout_dma_address;

        delete [] tvin_fabric_interupt_finished_V;

        delete [] tvout_controller_finished_V;

        AESL_transaction++;

        tcl_file.set_num(AESL_transaction , &tcl_file.trans_num);

    }
}


