#include "hls_design_meta.h"
const Port_Property HLS_Design_Meta::port_props[]={
	Port_Property("ap_clk", 1, hls_in, -1, "", "", 1),
	Port_Property("ap_rst_n", 1, hls_in, -1, "", "", 1),
	Port_Property("ap_start", 1, hls_in, -1, "", "", 1),
	Port_Property("ap_done", 1, hls_out, -1, "", "", 1),
	Port_Property("ap_idle", 1, hls_out, -1, "", "", 1),
	Port_Property("ap_ready", 1, hls_out, -1, "", "", 1),
	Port_Property("m_axi_AXI_DMA_SLAVE_AWVALID", 1, hls_out, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_AXI_DMA_SLAVE_AWREADY", 1, hls_in, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_AXI_DMA_SLAVE_AWADDR", 32, hls_out, 0, "m_axi", "ADDR", 1),
	Port_Property("m_axi_AXI_DMA_SLAVE_AWID", 1, hls_out, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_AXI_DMA_SLAVE_AWLEN", 8, hls_out, 0, "m_axi", "LEN", 1),
	Port_Property("m_axi_AXI_DMA_SLAVE_AWSIZE", 3, hls_out, 0, "m_axi", "SIZE", 1),
	Port_Property("m_axi_AXI_DMA_SLAVE_AWBURST", 2, hls_out, 0, "m_axi", "BURST", 1),
	Port_Property("m_axi_AXI_DMA_SLAVE_AWLOCK", 2, hls_out, 0, "m_axi", "LOCK", 1),
	Port_Property("m_axi_AXI_DMA_SLAVE_AWCACHE", 4, hls_out, 0, "m_axi", "CACHE", 1),
	Port_Property("m_axi_AXI_DMA_SLAVE_AWPROT", 3, hls_out, 0, "m_axi", "PROT", 1),
	Port_Property("m_axi_AXI_DMA_SLAVE_AWQOS", 4, hls_out, 0, "m_axi", "QOS", 1),
	Port_Property("m_axi_AXI_DMA_SLAVE_AWREGION", 4, hls_out, 0, "m_axi", "REGION", 1),
	Port_Property("m_axi_AXI_DMA_SLAVE_AWUSER", 1, hls_out, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_AXI_DMA_SLAVE_WVALID", 1, hls_out, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_AXI_DMA_SLAVE_WREADY", 1, hls_in, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_AXI_DMA_SLAVE_WDATA", 32, hls_out, 0, "m_axi", "DATA", 1),
	Port_Property("m_axi_AXI_DMA_SLAVE_WSTRB", 4, hls_out, 0, "m_axi", "STRB", 1),
	Port_Property("m_axi_AXI_DMA_SLAVE_WLAST", 1, hls_out, 0, "m_axi", "LAST", 1),
	Port_Property("m_axi_AXI_DMA_SLAVE_WID", 1, hls_out, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_AXI_DMA_SLAVE_WUSER", 1, hls_out, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_AXI_DMA_SLAVE_ARVALID", 1, hls_out, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_AXI_DMA_SLAVE_ARREADY", 1, hls_in, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_AXI_DMA_SLAVE_ARADDR", 32, hls_out, 0, "m_axi", "ADDR", 1),
	Port_Property("m_axi_AXI_DMA_SLAVE_ARID", 1, hls_out, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_AXI_DMA_SLAVE_ARLEN", 8, hls_out, 0, "m_axi", "LEN", 1),
	Port_Property("m_axi_AXI_DMA_SLAVE_ARSIZE", 3, hls_out, 0, "m_axi", "SIZE", 1),
	Port_Property("m_axi_AXI_DMA_SLAVE_ARBURST", 2, hls_out, 0, "m_axi", "BURST", 1),
	Port_Property("m_axi_AXI_DMA_SLAVE_ARLOCK", 2, hls_out, 0, "m_axi", "LOCK", 1),
	Port_Property("m_axi_AXI_DMA_SLAVE_ARCACHE", 4, hls_out, 0, "m_axi", "CACHE", 1),
	Port_Property("m_axi_AXI_DMA_SLAVE_ARPROT", 3, hls_out, 0, "m_axi", "PROT", 1),
	Port_Property("m_axi_AXI_DMA_SLAVE_ARQOS", 4, hls_out, 0, "m_axi", "QOS", 1),
	Port_Property("m_axi_AXI_DMA_SLAVE_ARREGION", 4, hls_out, 0, "m_axi", "REGION", 1),
	Port_Property("m_axi_AXI_DMA_SLAVE_ARUSER", 1, hls_out, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_AXI_DMA_SLAVE_RVALID", 1, hls_in, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_AXI_DMA_SLAVE_RREADY", 1, hls_out, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_AXI_DMA_SLAVE_RDATA", 32, hls_in, 0, "m_axi", "DATA", 1),
	Port_Property("m_axi_AXI_DMA_SLAVE_RLAST", 1, hls_in, 0, "m_axi", "LAST", 1),
	Port_Property("m_axi_AXI_DMA_SLAVE_RID", 1, hls_in, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_AXI_DMA_SLAVE_RUSER", 1, hls_in, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_AXI_DMA_SLAVE_RRESP", 2, hls_in, 0, "m_axi", "RESP", 1),
	Port_Property("m_axi_AXI_DMA_SLAVE_BVALID", 1, hls_in, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_AXI_DMA_SLAVE_BREADY", 1, hls_out, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_AXI_DMA_SLAVE_BRESP", 2, hls_in, 0, "m_axi", "RESP", 1),
	Port_Property("m_axi_AXI_DMA_SLAVE_BID", 1, hls_in, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_AXI_DMA_SLAVE_BUSER", 1, hls_in, 0, "m_axi", "USER", 1),
	Port_Property("startAddress", 32, hls_in, 1, "ap_none", "in_data", 1),
	Port_Property("write_r", 1, hls_in, 2, "ap_none", "in_data", 1),
	Port_Property("length_r", 32, hls_in, 3, "ap_none", "in_data", 1),
	Port_Property("iterations", 32, hls_in, 4, "ap_none", "in_data", 1),
	Port_Property("enabled", 1, hls_in, 5, "ap_none", "in_data", 1),
	Port_Property("reset_scanner", 1, hls_out, 6, "ap_none", "out_data", 1),
	Port_Property("dma_control", 32, hls_out, 7, "ap_none", "out_data", 1),
	Port_Property("dma_status", 32, hls_out, 8, "ap_none", "out_data", 1),
	Port_Property("dma_address", 32, hls_out, 9, "ap_none", "out_data", 1),
	Port_Property("fabric_interrupt_write_finished_V", 1, hls_in, 10, "ap_none", "in_data", 1),
	Port_Property("fabric_interrupt_read_finished_V", 1, hls_in, 11, "ap_none", "in_data", 1),
	Port_Property("controller_finished_V", 1, hls_out, 12, "ap_none", "out_data", 1),
};
const char* HLS_Design_Meta::dut_name = "pl_axi_dma_controller";
