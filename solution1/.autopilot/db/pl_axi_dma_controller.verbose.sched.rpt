

================================================================
== Vivado HLS Report for 'pl_axi_dma_controller'
================================================================
* Date:           Tue Mar 24 02:02:44 2015

* Version:        2014.1 (build date: Fri Apr 04 13:20:25 PM 2014)
* Project:        PL_AXI_DMA_Controller
* Solution:       solution1
* Product family: zynq zynq_fpv6 
* Target device:  xc7z020clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +---------+-------+----------+------------+
    |  Clock  | Target| Estimated| Uncertainty|
    +---------+-------+----------+------------+
    |default  |  10.00|      8.75|        1.25|
    +---------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |    ?|    ?|    ?|    ?|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-------------+-----+-----+----------+-----------+-----------+------+----------+
        |             |  Latency  | Iteration|  Initiation Interval  | Trip |          |
        |  Loop Name  | min | max |  Latency |  achieved |   target  | Count| Pipelined|
        +-------------+-----+-----+----------+-----------+-----------+------+----------+
        |- Loop 1     |    ?|    ?|         ?|          -|          -|     ?|    no    |
        | + Loop 1.1  |    ?|    ?|         4|          -|          -|     ?|    no    |
        | + Loop 1.2  |    ?|    ?|         1|          -|          -|     ?|    no    |
        |- Loop 2     |    ?|    ?|         1|          -|          -|     ?|    no    |
        +-------------+-----+-----+----------+-----------+-----------+------+----------+



================================================================
== Utilization Estimates
================================================================
* Summary: 
+-----------------+---------+-------+--------+-------+
|       Name      | BRAM_18K| DSP48E|   FF   |  LUT  |
+-----------------+---------+-------+--------+-------+
|Expression       |        -|      -|       -|      -|
|FIFO             |        -|      -|       -|      -|
|Instance         |        -|      -|       -|      -|
|Memory           |        -|      -|       -|      -|
|Multiplexer      |        -|      -|       -|      -|
|Register         |        -|      -|       -|      -|
+-----------------+---------+-------+--------+-------+
|Total            |        0|      0|       0|      0|
+-----------------+---------+-------+--------+-------+
|Available        |      280|    220|  106400|  53200|
+-----------------+---------+-------+--------+-------+
|Utilization (%)  |        0|      0|       0|      0|
+-----------------+---------+-------+--------+-------+

+ Detail: 
    * Instance: 
    N/A

    * Memory: 
    N/A

    * FIFO: 
    N/A

    * Expression: 
    N/A

    * Multiplexer: 
    N/A

    * Register: 
    N/A



================================================================
== Interface
================================================================
* Summary: 
N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 32
* Pipeline: 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	11  / (!localEnabled)
	3  / (localEnabled & !write_assign_load)
	12  / (localEnabled & write_assign_load)
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	11  / (localEnabled & !write_assign_load & !p_Val2_2)
12 --> 
	13  / true
13 --> 
	11  / (!tmp_2)
	14  / (tmp_2)
14 --> 
	15  / true
15 --> 
	16  / true
16 --> 
	17  / (tmp_8)
	19  / (!tmp_8)
17 --> 
	18  / true
18 --> 
	15  / true
19 --> 
	20  / true
20 --> 
	21  / true
21 --> 
	22  / true
22 --> 
	23  / true
23 --> 
	24  / true
24 --> 
	25  / true
25 --> 
	26  / true
26 --> 
	27  / true
27 --> 
	28  / true
28 --> 
	29  / true
29 --> 
	30  / true
30 --> 
	31  / true
31 --> 
	32  / true
32 --> 
	32  / (!p_Val2_s)
	13  / (p_Val2_s)
* FSM state operations: 

 <State 1>: 0.00ns
ST_1: enabled_read [1/1] 0.00ns
:14  %enabled_read = call i1 @_ssdm_op_Read.ap_none.i1(i1 %enabled)

ST_1: write_read [1/1] 0.00ns
:17  %write_read = call i1 @_ssdm_op_Read.ap_auto.i1(i1 %write_r)

ST_1: startAddress_assign [1/1] 0.00ns
:19  %startAddress_assign = alloca i32, align 4

ST_1: write_assign [1/1] 0.00ns
:20  %write_assign = alloca i1, align 1

ST_1: length_assign [1/1] 0.00ns
:21  %length_assign = alloca i32, align 4

ST_1: iterations_assign [1/1] 0.00ns
:22  %iterations_assign = alloca i32, align 4

ST_1: enabled_assign [1/1] 0.00ns
:23  %enabled_assign = alloca i1, align 1

ST_1: stg_40 [1/1] 0.00ns
:25  store volatile i1 %write_read, i1* %write_assign, align 1

ST_1: stg_41 [1/1] 0.00ns
:28  store volatile i1 %enabled_read, i1* %enabled_assign, align 1


 <State 2>: 8.75ns
ST_2: stg_42 [1/1] 0.00ns
:0  call void (...)* @_ssdm_op_SpecBitsMap(i32* %AXI_DMA_SLAVE), !map !7

ST_2: stg_43 [1/1] 0.00ns
:1  call void (...)* @_ssdm_op_SpecBitsMap(i32 %startAddress), !map !13

ST_2: stg_44 [1/1] 0.00ns
:2  call void (...)* @_ssdm_op_SpecBitsMap(i1 %write_r), !map !19

ST_2: stg_45 [1/1] 0.00ns
:3  call void (...)* @_ssdm_op_SpecBitsMap(i32 %length_r), !map !23

ST_2: stg_46 [1/1] 0.00ns
:4  call void (...)* @_ssdm_op_SpecBitsMap(i32 %iterations), !map !27

ST_2: stg_47 [1/1] 0.00ns
:5  call void (...)* @_ssdm_op_SpecBitsMap(i1 %enabled), !map !31

ST_2: stg_48 [1/1] 0.00ns
:6  call void (...)* @_ssdm_op_SpecBitsMap(i1* %reset_scanner), !map !35

ST_2: stg_49 [1/1] 0.00ns
:7  call void (...)* @_ssdm_op_SpecBitsMap(i32* %dma_control), !map !39

ST_2: stg_50 [1/1] 0.00ns
:8  call void (...)* @_ssdm_op_SpecBitsMap(i32* %dma_status), !map !43

ST_2: stg_51 [1/1] 0.00ns
:9  call void (...)* @_ssdm_op_SpecBitsMap(i32* %dma_address), !map !47

ST_2: stg_52 [1/1] 0.00ns
:10  call void (...)* @_ssdm_op_SpecBitsMap(i1* %fabric_interrupt_write_finished_V), !map !51

ST_2: stg_53 [1/1] 0.00ns
:11  call void (...)* @_ssdm_op_SpecBitsMap(i1* %fabric_interrupt_read_finished_V), !map !55

ST_2: stg_54 [1/1] 0.00ns
:12  call void (...)* @_ssdm_op_SpecBitsMap(i1* %controller_finished_V), !map !59

ST_2: stg_55 [1/1] 0.00ns
:13  call void (...)* @_ssdm_op_SpecTopModule([22 x i8]* @str) nounwind

ST_2: iterations_read [1/1] 0.00ns
:15  %iterations_read = call i32 @_ssdm_op_Read.ap_none.i32(i32 %iterations)

ST_2: length_read [1/1] 0.00ns
:16  %length_read = call i32 @_ssdm_op_Read.ap_none.i32(i32 %length_r)

ST_2: startAddress_read [1/1] 0.00ns
:18  %startAddress_read = call i32 @_ssdm_op_Read.ap_none.i32(i32 %startAddress)

ST_2: stg_59 [1/1] 0.00ns
:24  store volatile i32 %startAddress_read, i32* %startAddress_assign, align 4

ST_2: stg_60 [1/1] 0.00ns
:26  store volatile i32 %length_read, i32* %length_assign, align 4

ST_2: stg_61 [1/1] 0.00ns
:27  store volatile i32 %iterations_read, i32* %iterations_assign, align 4

ST_2: stg_62 [1/1] 0.00ns
:29  call void (...)* @_ssdm_op_SpecWire(i1* %controller_finished_V, [8 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_2: stg_63 [1/1] 0.00ns
:30  call void (...)* @_ssdm_op_SpecWire(i1* %fabric_interrupt_write_finished_V, [8 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_2: stg_64 [1/1] 0.00ns
:31  call void (...)* @_ssdm_op_SpecWire(i1* %fabric_interrupt_read_finished_V, [8 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_2: stg_65 [1/1] 0.00ns
:32  call void (...)* @_ssdm_op_SpecWire(i1* %reset_scanner, [8 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_2: stg_66 [1/1] 0.00ns
:33  call void (...)* @_ssdm_op_SpecWire(i32* %dma_address, [8 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_2: stg_67 [1/1] 0.00ns
:34  call void (...)* @_ssdm_op_SpecWire(i32* %dma_status, [8 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_2: stg_68 [1/1] 0.00ns
:35  call void (...)* @_ssdm_op_SpecWire(i32* %dma_control, [8 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_2: stg_69 [1/1] 0.00ns
:36  call void (...)* @_ssdm_op_SpecWire(i1 %enabled, [8 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_2: stg_70 [1/1] 0.00ns
:37  call void (...)* @_ssdm_op_SpecWire(i32 %iterations, [8 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_2: stg_71 [1/1] 0.00ns
:38  call void (...)* @_ssdm_op_SpecWire(i32 %length_r, [8 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_2: stg_72 [1/1] 0.00ns
:39  call void (...)* @_ssdm_op_SpecWire(i32 %startAddress, [8 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_2: stg_73 [1/1] 0.00ns
:40  call void (...)* @_ssdm_op_SpecWire(i32 0, [8 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_2: stg_74 [1/1] 0.00ns
:41  call void (...)* @_ssdm_op_SpecWire(i32* %AXI_DMA_SLAVE, [6 x i8]* @p_str2, i32 0, i32 0, i32 0, i32 14, [10 x i8]* @p_str3, [4 x i8]* @p_str4, [1 x i8]* @p_str1) nounwind

ST_2: localEnabled [1/1] 0.00ns
:42  %localEnabled = load volatile i1* %enabled_assign, align 1

ST_2: stg_76 [1/1] 0.00ns
:43  br i1 %localEnabled, label %1, label %._crit_edge

ST_2: write_assign_load [1/1] 0.00ns
:0  %write_assign_load = load volatile i1* %write_assign, align 1

ST_2: stg_78 [1/1] 0.00ns
:1  br i1 %write_assign_load, label %2, label %11

ST_2: AXI_DMA_SLAVE_addr_3 [1/1] 0.00ns
:0  %AXI_DMA_SLAVE_addr_3 = getelementptr inbounds i32* %AXI_DMA_SLAVE, i64 12

ST_2: AXI_DMA_SLAVE_load_req [2/2] 8.75ns
:1  %AXI_DMA_SLAVE_load_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %AXI_DMA_SLAVE_addr_3, i32 1)

ST_2: stg_81 [1/1] 0.00ns
:1  call void @_ssdm_op_Write.ap_none.volatile.i1P(i1* %reset_scanner, i1 true)


 <State 3>: 8.75ns
ST_3: AXI_DMA_SLAVE_load_req [1/2] 8.75ns
:1  %AXI_DMA_SLAVE_load_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %AXI_DMA_SLAVE_addr_3, i32 1)

ST_3: AXI_DMA_SLAVE_addr_3_read [1/1] 8.75ns
:2  %AXI_DMA_SLAVE_addr_3_read = call i32 @_ssdm_op_Read.m_axi.volatile.i32P(i32* %AXI_DMA_SLAVE_addr_3)

ST_3: tmp_3 [1/1] 0.00ns
:3  %tmp_3 = call i31 @_ssdm_op_PartSelect.i31.i32.i32.i32(i32 %AXI_DMA_SLAVE_addr_3_read, i32 1, i32 31)


 <State 4>: 8.75ns
ST_4: tmp [1/1] 0.00ns
:4  %tmp = call i32 @_ssdm_op_BitConcatenate.i32.i31.i1(i31 %tmp_3, i1 true)

ST_4: AXI_DMA_SLAVE_addr_3_req6 [1/1] 8.75ns
:5  %AXI_DMA_SLAVE_addr_3_req6 = call i1 @_ssdm_op_WriteReq.m_axi.i32P(i32* %AXI_DMA_SLAVE_addr_3, i32 1)

ST_4: stg_87 [1/1] 8.75ns
:6  call void @_ssdm_op_Write.m_axi.volatile.i32P(i32* %AXI_DMA_SLAVE_addr_3, i32 %tmp)

ST_4: AXI_DMA_SLAVE_addr_3_resp7 [2/2] 8.75ns
:7  %AXI_DMA_SLAVE_addr_3_resp7 = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %AXI_DMA_SLAVE_addr_3)


 <State 5>: 8.75ns
ST_5: AXI_DMA_SLAVE_addr_3_resp7 [1/2] 8.75ns
:7  %AXI_DMA_SLAVE_addr_3_resp7 = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %AXI_DMA_SLAVE_addr_3)

ST_5: AXI_DMA_SLAVE_load_1_req [2/2] 8.75ns
:8  %AXI_DMA_SLAVE_load_1_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %AXI_DMA_SLAVE_addr_3, i32 1)


 <State 6>: 8.75ns
ST_6: AXI_DMA_SLAVE_load_1_req [1/2] 8.75ns
:8  %AXI_DMA_SLAVE_load_1_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %AXI_DMA_SLAVE_addr_3, i32 1)

ST_6: AXI_DMA_SLAVE_addr_3_read_1 [1/1] 8.75ns
:9  %AXI_DMA_SLAVE_addr_3_read_1 = call i32 @_ssdm_op_Read.m_axi.volatile.i32P(i32* %AXI_DMA_SLAVE_addr_3)

ST_6: tmp_7 [1/1] 0.00ns
:10  %tmp_7 = call i19 @_ssdm_op_PartSelect.i19.i32.i32.i32(i32 %AXI_DMA_SLAVE_addr_3_read_1, i32 13, i32 31)

ST_6: tmp_4 [1/1] 0.00ns
:11  %tmp_4 = trunc i32 %AXI_DMA_SLAVE_addr_3_read_1 to i12


 <State 7>: 8.75ns
ST_7: tmp_1 [1/1] 0.00ns
:12  %tmp_1 = call i32 @_ssdm_op_BitConcatenate.i32.i19.i1.i12(i19 %tmp_7, i1 true, i12 %tmp_4)

ST_7: AXI_DMA_SLAVE_addr_3_req [1/1] 8.75ns
:13  %AXI_DMA_SLAVE_addr_3_req = call i1 @_ssdm_op_WriteReq.m_axi.i32P(i32* %AXI_DMA_SLAVE_addr_3, i32 1)

ST_7: stg_97 [1/1] 8.75ns
:14  call void @_ssdm_op_Write.m_axi.volatile.i32P(i32* %AXI_DMA_SLAVE_addr_3, i32 %tmp_1)

ST_7: AXI_DMA_SLAVE_addr_3_resp [2/2] 8.75ns
:15  %AXI_DMA_SLAVE_addr_3_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %AXI_DMA_SLAVE_addr_3)


 <State 8>: 8.75ns
ST_8: AXI_DMA_SLAVE_addr_3_resp [1/2] 8.75ns
:15  %AXI_DMA_SLAVE_addr_3_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %AXI_DMA_SLAVE_addr_3)

ST_8: startAddress_assign_load [1/1] 0.00ns
:16  %startAddress_assign_load = load volatile i32* %startAddress_assign, align 4

ST_8: AXI_DMA_SLAVE_addr_4 [1/1] 0.00ns
:17  %AXI_DMA_SLAVE_addr_4 = getelementptr inbounds i32* %AXI_DMA_SLAVE, i64 18

ST_8: AXI_DMA_SLAVE_addr_4_req [1/1] 8.75ns
:18  %AXI_DMA_SLAVE_addr_4_req = call i1 @_ssdm_op_WriteReq.m_axi.i32P(i32* %AXI_DMA_SLAVE_addr_4, i32 1)

ST_8: stg_103 [1/1] 8.75ns
:19  call void @_ssdm_op_Write.m_axi.volatile.i32P(i32* %AXI_DMA_SLAVE_addr_4, i32 %startAddress_assign_load)

ST_8: AXI_DMA_SLAVE_addr_4_resp [2/2] 8.75ns
:20  %AXI_DMA_SLAVE_addr_4_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %AXI_DMA_SLAVE_addr_4)


 <State 9>: 8.75ns
ST_9: AXI_DMA_SLAVE_addr_4_resp [1/2] 8.75ns
:20  %AXI_DMA_SLAVE_addr_4_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %AXI_DMA_SLAVE_addr_4)

ST_9: length_assign_load [1/1] 0.00ns
:21  %length_assign_load = load volatile i32* %length_assign, align 4

ST_9: AXI_DMA_SLAVE_addr_5 [1/1] 0.00ns
:22  %AXI_DMA_SLAVE_addr_5 = getelementptr inbounds i32* %AXI_DMA_SLAVE, i64 22

ST_9: AXI_DMA_SLAVE_addr_5_req [1/1] 8.75ns
:23  %AXI_DMA_SLAVE_addr_5_req = call i1 @_ssdm_op_WriteReq.m_axi.i32P(i32* %AXI_DMA_SLAVE_addr_5, i32 1)

ST_9: stg_109 [1/1] 8.75ns
:24  call void @_ssdm_op_Write.m_axi.volatile.i32P(i32* %AXI_DMA_SLAVE_addr_5, i32 %length_assign_load)

ST_9: AXI_DMA_SLAVE_addr_5_resp [2/2] 8.75ns
:25  %AXI_DMA_SLAVE_addr_5_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %AXI_DMA_SLAVE_addr_5)


 <State 10>: 8.75ns
ST_10: AXI_DMA_SLAVE_addr_5_resp [1/2] 8.75ns
:25  %AXI_DMA_SLAVE_addr_5_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %AXI_DMA_SLAVE_addr_5)

ST_10: local_V [1/1] 0.00ns
:26  %local_V = call i1 @_ssdm_op_Read.ap_none.volatile.i1P(i1* %fabric_interrupt_write_finished_V)

ST_10: stg_113 [1/1] 1.30ns
:27  br label %12


 <State 11>: 0.00ns
ST_11: p_Val2_2 [1/1] 0.00ns
:0  %p_Val2_2 = phi i1 [ %local_V, %11 ], [ %local_V_1, %13 ]

ST_11: stg_115 [1/1] 0.00ns
:1  br i1 %p_Val2_2, label %14, label %13

ST_11: local_V_1 [1/1] 0.00ns
:0  %local_V_1 = call i1 @_ssdm_op_Read.ap_none.volatile.i1P(i1* %fabric_interrupt_write_finished_V)

ST_11: stg_117 [1/1] 0.00ns
:1  br label %12

ST_11: stg_118 [1/1] 0.00ns
:0  call void @_ssdm_op_Write.ap_none.volatile.i1P(i1* %controller_finished_V, i1 true)

ST_11: stg_119 [1/1] 0.00ns
:1  br label %.loopexit

ST_11: stg_120 [1/1] 0.00ns
.loopexit:0  br label %._crit_edge

ST_11: stg_121 [1/1] 0.00ns
._crit_edge:0  ret void


 <State 12>: 1.57ns
ST_12: localAddress [1/1] 0.00ns
:0  %localAddress = load volatile i32* %startAddress_assign, align 4

ST_12: stg_123 [1/1] 0.00ns
:2  call void @_ssdm_op_Write.ap_none.volatile.i1P(i1* %reset_scanner, i1 false)

ST_12: AXI_DMA_SLAVE_addr [1/1] 0.00ns
:3  %AXI_DMA_SLAVE_addr = getelementptr inbounds i32* %AXI_DMA_SLAVE, i64 1

ST_12: AXI_DMA_SLAVE_addr_1 [1/1] 0.00ns
:4  %AXI_DMA_SLAVE_addr_1 = getelementptr inbounds i32* %AXI_DMA_SLAVE, i64 6

ST_12: AXI_DMA_SLAVE_addr_2 [1/1] 0.00ns
:5  %AXI_DMA_SLAVE_addr_2 = getelementptr inbounds i32* %AXI_DMA_SLAVE, i64 10

ST_12: stg_127 [1/1] 1.57ns
:6  br label %3


 <State 13>: 8.75ns
ST_13: i [1/1] 0.00ns
:0  %i = phi i32 [ 0, %2 ], [ %i_1, %10 ]

ST_13: localAddress1 [1/1] 0.00ns
:1  %localAddress1 = phi i32 [ %localAddress, %2 ], [ %localAddress_1, %10 ]

ST_13: iterations_assign_load [1/1] 0.00ns
:2  %iterations_assign_load = load volatile i32* %iterations_assign, align 4

ST_13: tmp_2 [1/1] 2.52ns
:3  %tmp_2 = icmp slt i32 %i, %iterations_assign_load

ST_13: i_1 [1/1] 2.44ns
:4  %i_1 = add nsw i32 %i, 1

ST_13: stg_133 [1/1] 0.00ns
:5  br i1 %tmp_2, label %4, label %.loopexit

ST_13: AXI_DMA_SLAVE_req12 [1/1] 8.75ns
:1  %AXI_DMA_SLAVE_req12 = call i1 @_ssdm_op_WriteReq.m_axi.i32P(i32* %AXI_DMA_SLAVE, i32 1)

ST_13: stg_135 [1/1] 8.75ns
:2  call void @_ssdm_op_Write.m_axi.volatile.i32P(i32* %AXI_DMA_SLAVE, i32 4)

ST_13: AXI_DMA_SLAVE_resp13 [2/2] 8.75ns
:3  %AXI_DMA_SLAVE_resp13 = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %AXI_DMA_SLAVE)


 <State 14>: 8.75ns
ST_14: stg_137 [1/1] 0.00ns
:0  call void @_ssdm_op_Write.ap_none.volatile.i1P(i1* %controller_finished_V, i1 false)

ST_14: AXI_DMA_SLAVE_resp13 [1/2] 8.75ns
:3  %AXI_DMA_SLAVE_resp13 = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %AXI_DMA_SLAVE)

ST_14: stg_139 [1/1] 0.00ns
:4  br label %5


 <State 15>: 8.75ns
ST_15: AXI_DMA_SLAVE_load_2_req [2/2] 8.75ns
:0  %AXI_DMA_SLAVE_load_2_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %AXI_DMA_SLAVE, i32 1)


 <State 16>: 8.75ns
ST_16: AXI_DMA_SLAVE_load_2_req [1/2] 8.75ns
:0  %AXI_DMA_SLAVE_load_2_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %AXI_DMA_SLAVE, i32 1)

ST_16: AXI_DMA_SLAVE_read [1/1] 8.75ns
:1  %AXI_DMA_SLAVE_read = call i32 @_ssdm_op_Read.m_axi.volatile.i32P(i32* %AXI_DMA_SLAVE)

ST_16: tmp_8 [1/1] 0.00ns
:2  %tmp_8 = call i1 @_ssdm_op_BitSelect.i1.i32.i32(i32 %AXI_DMA_SLAVE_read, i32 2)

ST_16: stg_144 [1/1] 0.00ns
:3  br i1 %tmp_8, label %6, label %7

ST_16: AXI_DMA_SLAVE_load_3_req [2/2] 8.75ns
:0  %AXI_DMA_SLAVE_load_3_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %AXI_DMA_SLAVE, i32 1)


 <State 17>: 8.75ns
ST_17: AXI_DMA_SLAVE_req10 [1/1] 8.75ns
:0  %AXI_DMA_SLAVE_req10 = call i1 @_ssdm_op_WriteReq.m_axi.i32P(i32* %AXI_DMA_SLAVE, i32 1)

ST_17: stg_147 [1/1] 8.75ns
:1  call void @_ssdm_op_Write.m_axi.volatile.i32P(i32* %AXI_DMA_SLAVE, i32 0)

ST_17: AXI_DMA_SLAVE_resp11 [2/2] 8.75ns
:2  %AXI_DMA_SLAVE_resp11 = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %AXI_DMA_SLAVE)


 <State 18>: 8.75ns
ST_18: AXI_DMA_SLAVE_resp11 [1/2] 8.75ns
:2  %AXI_DMA_SLAVE_resp11 = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %AXI_DMA_SLAVE)

ST_18: stg_150 [1/1] 0.00ns
:3  br label %5


 <State 19>: 8.75ns
ST_19: AXI_DMA_SLAVE_load_3_req [1/2] 8.75ns
:0  %AXI_DMA_SLAVE_load_3_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %AXI_DMA_SLAVE, i32 1)

ST_19: AXI_DMA_SLAVE_read_1 [1/1] 8.75ns
:1  %AXI_DMA_SLAVE_read_1 = call i32 @_ssdm_op_Read.m_axi.volatile.i32P(i32* %AXI_DMA_SLAVE)

ST_19: tmp_9 [1/1] 0.00ns
:2  %tmp_9 = call i31 @_ssdm_op_PartSelect.i31.i32.i32.i32(i32 %AXI_DMA_SLAVE_read_1, i32 1, i32 31)


 <State 20>: 8.75ns
ST_20: tmp_5 [1/1] 0.00ns
:3  %tmp_5 = call i32 @_ssdm_op_BitConcatenate.i32.i31.i1(i31 %tmp_9, i1 true)

ST_20: AXI_DMA_SLAVE_req8 [1/1] 8.75ns
:4  %AXI_DMA_SLAVE_req8 = call i1 @_ssdm_op_WriteReq.m_axi.i32P(i32* %AXI_DMA_SLAVE, i32 1)

ST_20: stg_156 [1/1] 8.75ns
:5  call void @_ssdm_op_Write.m_axi.volatile.i32P(i32* %AXI_DMA_SLAVE, i32 %tmp_5)

ST_20: AXI_DMA_SLAVE_resp9 [2/2] 8.75ns
:6  %AXI_DMA_SLAVE_resp9 = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %AXI_DMA_SLAVE)


 <State 21>: 8.75ns
ST_21: AXI_DMA_SLAVE_resp9 [1/2] 8.75ns
:6  %AXI_DMA_SLAVE_resp9 = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %AXI_DMA_SLAVE)

ST_21: AXI_DMA_SLAVE_load_4_req [2/2] 8.75ns
:7  %AXI_DMA_SLAVE_load_4_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %AXI_DMA_SLAVE, i32 1)


 <State 22>: 8.75ns
ST_22: AXI_DMA_SLAVE_load_4_req [1/2] 8.75ns
:7  %AXI_DMA_SLAVE_load_4_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %AXI_DMA_SLAVE, i32 1)

ST_22: AXI_DMA_SLAVE_read_2 [1/1] 8.75ns
:8  %AXI_DMA_SLAVE_read_2 = call i32 @_ssdm_op_Read.m_axi.volatile.i32P(i32* %AXI_DMA_SLAVE)

ST_22: tmp_s [1/1] 0.00ns
:9  %tmp_s = call i19 @_ssdm_op_PartSelect.i19.i32.i32.i32(i32 %AXI_DMA_SLAVE_read_2, i32 13, i32 31)

ST_22: tmp_10 [1/1] 0.00ns
:10  %tmp_10 = trunc i32 %AXI_DMA_SLAVE_read_2 to i12


 <State 23>: 8.75ns
ST_23: tmp_6 [1/1] 0.00ns
:11  %tmp_6 = call i32 @_ssdm_op_BitConcatenate.i32.i19.i1.i12(i19 %tmp_s, i1 true, i12 %tmp_10)

ST_23: AXI_DMA_SLAVE_req [1/1] 8.75ns
:12  %AXI_DMA_SLAVE_req = call i1 @_ssdm_op_WriteReq.m_axi.i32P(i32* %AXI_DMA_SLAVE, i32 1)

ST_23: stg_166 [1/1] 8.75ns
:13  call void @_ssdm_op_Write.m_axi.volatile.i32P(i32* %AXI_DMA_SLAVE, i32 %tmp_6)

ST_23: AXI_DMA_SLAVE_resp [2/2] 8.75ns
:14  %AXI_DMA_SLAVE_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %AXI_DMA_SLAVE)


 <State 24>: 8.75ns
ST_24: AXI_DMA_SLAVE_resp [1/2] 8.75ns
:14  %AXI_DMA_SLAVE_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %AXI_DMA_SLAVE)

ST_24: AXI_DMA_SLAVE_load_5_req [2/2] 8.75ns
:15  %AXI_DMA_SLAVE_load_5_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %AXI_DMA_SLAVE, i32 1)

ST_24: AXI_DMA_SLAVE_addr_1_req [1/1] 8.75ns
:21  %AXI_DMA_SLAVE_addr_1_req = call i1 @_ssdm_op_WriteReq.m_axi.i32P(i32* %AXI_DMA_SLAVE_addr_1, i32 1)

ST_24: stg_171 [1/1] 8.75ns
:22  call void @_ssdm_op_Write.m_axi.volatile.i32P(i32* %AXI_DMA_SLAVE_addr_1, i32 %localAddress1)

ST_24: stg_172 [1/1] 0.00ns
:24  call void @_ssdm_op_Write.ap_none.volatile.i32P(i32* %dma_address, i32 %localAddress1)

ST_24: localAddress_1 [1/1] 2.44ns
:35  %localAddress_1 = add i32 %localAddress1, 4


 <State 25>: 8.75ns
ST_25: AXI_DMA_SLAVE_load_5_req [1/2] 8.75ns
:15  %AXI_DMA_SLAVE_load_5_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %AXI_DMA_SLAVE, i32 1)

ST_25: AXI_DMA_SLAVE_load_6_req [2/2] 8.75ns
:18  %AXI_DMA_SLAVE_load_6_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %AXI_DMA_SLAVE_addr, i32 1)


 <State 26>: 8.75ns
ST_26: AXI_DMA_SLAVE_load_6_req [1/2] 8.75ns
:18  %AXI_DMA_SLAVE_load_6_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %AXI_DMA_SLAVE_addr, i32 1)


 <State 27>: 8.75ns
ST_27: AXI_DMA_SLAVE_addr_1_resp [2/2] 8.75ns
:23  %AXI_DMA_SLAVE_addr_1_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %AXI_DMA_SLAVE_addr_1)


 <State 28>: 8.75ns
ST_28: AXI_DMA_SLAVE_read_3 [1/1] 8.75ns
:16  %AXI_DMA_SLAVE_read_3 = call i32 @_ssdm_op_Read.m_axi.volatile.i32P(i32* %AXI_DMA_SLAVE)

ST_28: stg_179 [1/1] 0.00ns
:17  call void @_ssdm_op_Write.ap_none.volatile.i32P(i32* %dma_control, i32 %AXI_DMA_SLAVE_read_3)

ST_28: AXI_DMA_SLAVE_addr_1_resp [1/2] 8.75ns
:23  %AXI_DMA_SLAVE_addr_1_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %AXI_DMA_SLAVE_addr_1)

ST_28: length_assign_load_1 [1/1] 0.00ns
:25  %length_assign_load_1 = load volatile i32* %length_assign, align 4

ST_28: AXI_DMA_SLAVE_addr_2_req [1/1] 8.75ns
:26  %AXI_DMA_SLAVE_addr_2_req = call i1 @_ssdm_op_WriteReq.m_axi.i32P(i32* %AXI_DMA_SLAVE_addr_2, i32 1)

ST_28: stg_183 [1/1] 8.75ns
:27  call void @_ssdm_op_Write.m_axi.volatile.i32P(i32* %AXI_DMA_SLAVE_addr_2, i32 %length_assign_load_1)

ST_28: AXI_DMA_SLAVE_addr_2_resp [2/2] 8.75ns
:28  %AXI_DMA_SLAVE_addr_2_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %AXI_DMA_SLAVE_addr_2)


 <State 29>: 8.75ns
ST_29: AXI_DMA_SLAVE_addr_read [1/1] 8.75ns
:19  %AXI_DMA_SLAVE_addr_read = call i32 @_ssdm_op_Read.m_axi.volatile.i32P(i32* %AXI_DMA_SLAVE_addr)

ST_29: stg_186 [1/1] 0.00ns
:20  call void @_ssdm_op_Write.ap_none.volatile.i32P(i32* %dma_status, i32 %AXI_DMA_SLAVE_addr_read)

ST_29: AXI_DMA_SLAVE_addr_2_resp [1/2] 8.75ns
:28  %AXI_DMA_SLAVE_addr_2_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %AXI_DMA_SLAVE_addr_2)

ST_29: AXI_DMA_SLAVE_load_7_req [2/2] 8.75ns
:29  %AXI_DMA_SLAVE_load_7_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %AXI_DMA_SLAVE, i32 1)


 <State 30>: 8.75ns
ST_30: AXI_DMA_SLAVE_load_7_req [1/2] 8.75ns
:29  %AXI_DMA_SLAVE_load_7_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %AXI_DMA_SLAVE, i32 1)

ST_30: AXI_DMA_SLAVE_read_4 [1/1] 8.75ns
:30  %AXI_DMA_SLAVE_read_4 = call i32 @_ssdm_op_Read.m_axi.volatile.i32P(i32* %AXI_DMA_SLAVE)

ST_30: stg_191 [1/1] 0.00ns
:31  call void @_ssdm_op_Write.ap_none.volatile.i32P(i32* %dma_control, i32 %AXI_DMA_SLAVE_read_4)

ST_30: AXI_DMA_SLAVE_load_8_req [2/2] 8.75ns
:32  %AXI_DMA_SLAVE_load_8_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %AXI_DMA_SLAVE_addr, i32 1)


 <State 31>: 8.75ns
ST_31: AXI_DMA_SLAVE_load_8_req [1/2] 8.75ns
:32  %AXI_DMA_SLAVE_load_8_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %AXI_DMA_SLAVE_addr, i32 1)

ST_31: AXI_DMA_SLAVE_addr_read_1 [1/1] 8.75ns
:33  %AXI_DMA_SLAVE_addr_read_1 = call i32 @_ssdm_op_Read.m_axi.volatile.i32P(i32* %AXI_DMA_SLAVE_addr)

ST_31: stg_195 [1/1] 0.00ns
:34  call void @_ssdm_op_Write.ap_none.volatile.i32P(i32* %dma_status, i32 %AXI_DMA_SLAVE_addr_read_1)

ST_31: local_V_2 [1/1] 0.00ns
:36  %local_V_2 = call i1 @_ssdm_op_Read.ap_none.volatile.i1P(i1* %fabric_interrupt_read_finished_V)

ST_31: stg_197 [1/1] 1.30ns
:37  br label %8


 <State 32>: 0.00ns
ST_32: p_Val2_s [1/1] 0.00ns
:0  %p_Val2_s = phi i1 [ %local_V_2, %7 ], [ %local_V_3, %9 ]

ST_32: stg_199 [1/1] 0.00ns
:1  br i1 %p_Val2_s, label %10, label %9

ST_32: local_V_3 [1/1] 0.00ns
:0  %local_V_3 = call i1 @_ssdm_op_Read.ap_none.volatile.i1P(i1* %fabric_interrupt_read_finished_V)

ST_32: stg_201 [1/1] 0.00ns
:1  br label %8

ST_32: stg_202 [1/1] 0.00ns
:0  call void @_ssdm_op_Write.ap_none.volatile.i1P(i1* %controller_finished_V, i1 true)

ST_32: stg_203 [1/1] 0.00ns
:1  br label %3



============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20
	State 21
	State 22
	State 23
	State 24
	State 25
	State 26
	State 27
	State 28
	State 29
	State 30
	State 31
	State 32


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
