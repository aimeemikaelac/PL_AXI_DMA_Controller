-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.1
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pl_axi_dma_controller is
generic (
    C_M_AXI_AXI_DMA_SLAVE_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_AXI_DMA_SLAVE_ID_WIDTH : INTEGER := 1;
    C_M_AXI_AXI_DMA_SLAVE_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AXI_DMA_SLAVE_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_AXI_DMA_SLAVE_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AXI_DMA_SLAVE_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AXI_DMA_SLAVE_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AXI_DMA_SLAVE_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AXI_DMA_SLAVE_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_AXI_DMA_SLAVE_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_AXI_DMA_SLAVE_PROT_VALUE : INTEGER := 0;
    C_M_AXI_AXI_DMA_SLAVE_USER_VALUE : INTEGER := 0 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_AXI_DMA_SLAVE_AWVALID : OUT STD_LOGIC;
    m_axi_AXI_DMA_SLAVE_AWREADY : IN STD_LOGIC;
    m_axi_AXI_DMA_SLAVE_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_DMA_SLAVE_ADDR_WIDTH-1 downto 0);
    m_axi_AXI_DMA_SLAVE_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_DMA_SLAVE_ID_WIDTH-1 downto 0);
    m_axi_AXI_DMA_SLAVE_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_AXI_DMA_SLAVE_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_AXI_DMA_SLAVE_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_AXI_DMA_SLAVE_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_AXI_DMA_SLAVE_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_AXI_DMA_SLAVE_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_AXI_DMA_SLAVE_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_AXI_DMA_SLAVE_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_AXI_DMA_SLAVE_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_DMA_SLAVE_AWUSER_WIDTH-1 downto 0);
    m_axi_AXI_DMA_SLAVE_WVALID : OUT STD_LOGIC;
    m_axi_AXI_DMA_SLAVE_WREADY : IN STD_LOGIC;
    m_axi_AXI_DMA_SLAVE_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_DMA_SLAVE_DATA_WIDTH-1 downto 0);
    m_axi_AXI_DMA_SLAVE_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_DMA_SLAVE_DATA_WIDTH/8-1 downto 0);
    m_axi_AXI_DMA_SLAVE_WLAST : OUT STD_LOGIC;
    m_axi_AXI_DMA_SLAVE_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_DMA_SLAVE_ID_WIDTH-1 downto 0);
    m_axi_AXI_DMA_SLAVE_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_DMA_SLAVE_WUSER_WIDTH-1 downto 0);
    m_axi_AXI_DMA_SLAVE_ARVALID : OUT STD_LOGIC;
    m_axi_AXI_DMA_SLAVE_ARREADY : IN STD_LOGIC;
    m_axi_AXI_DMA_SLAVE_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_DMA_SLAVE_ADDR_WIDTH-1 downto 0);
    m_axi_AXI_DMA_SLAVE_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_DMA_SLAVE_ID_WIDTH-1 downto 0);
    m_axi_AXI_DMA_SLAVE_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_AXI_DMA_SLAVE_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_AXI_DMA_SLAVE_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_AXI_DMA_SLAVE_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_AXI_DMA_SLAVE_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_AXI_DMA_SLAVE_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_AXI_DMA_SLAVE_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_AXI_DMA_SLAVE_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_AXI_DMA_SLAVE_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_DMA_SLAVE_ARUSER_WIDTH-1 downto 0);
    m_axi_AXI_DMA_SLAVE_RVALID : IN STD_LOGIC;
    m_axi_AXI_DMA_SLAVE_RREADY : OUT STD_LOGIC;
    m_axi_AXI_DMA_SLAVE_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_AXI_DMA_SLAVE_DATA_WIDTH-1 downto 0);
    m_axi_AXI_DMA_SLAVE_RLAST : IN STD_LOGIC;
    m_axi_AXI_DMA_SLAVE_RID : IN STD_LOGIC_VECTOR (C_M_AXI_AXI_DMA_SLAVE_ID_WIDTH-1 downto 0);
    m_axi_AXI_DMA_SLAVE_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_AXI_DMA_SLAVE_RUSER_WIDTH-1 downto 0);
    m_axi_AXI_DMA_SLAVE_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_AXI_DMA_SLAVE_BVALID : IN STD_LOGIC;
    m_axi_AXI_DMA_SLAVE_BREADY : OUT STD_LOGIC;
    m_axi_AXI_DMA_SLAVE_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_AXI_DMA_SLAVE_BID : IN STD_LOGIC_VECTOR (C_M_AXI_AXI_DMA_SLAVE_ID_WIDTH-1 downto 0);
    m_axi_AXI_DMA_SLAVE_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_AXI_DMA_SLAVE_BUSER_WIDTH-1 downto 0);
    startAddress : IN STD_LOGIC_VECTOR (31 downto 0);
    write_r : IN STD_LOGIC;
    length_r : IN STD_LOGIC_VECTOR (31 downto 0);
    iterations : IN STD_LOGIC_VECTOR (31 downto 0);
    enabled : IN STD_LOGIC;
    reset_scanner : OUT STD_LOGIC;
    dma_control : OUT STD_LOGIC_VECTOR (31 downto 0);
    dma_status : OUT STD_LOGIC_VECTOR (31 downto 0);
    dma_address : OUT STD_LOGIC_VECTOR (31 downto 0);
    fabric_interrupt_write_finished_V : IN STD_LOGIC_VECTOR (0 downto 0);
    fabric_interrupt_read_finished_V : IN STD_LOGIC_VECTOR (0 downto 0);
    controller_finished_V : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of pl_axi_dma_controller is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "pl_axi_dma_controller,hls_ip_2014_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (4 downto 0) := "10011";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (4 downto 0) := "10101";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (4 downto 0) := "10110";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (4 downto 0) := "10111";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (4 downto 0) := "11010";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (4 downto 0) := "11011";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (4 downto 0) := "11101";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant C_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_12 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010010";
    constant ap_const_lv64_16 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010110";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal AXI_DMA_SLAVE_AWVALID : STD_LOGIC;
    signal AXI_DMA_SLAVE_AWREADY : STD_LOGIC;
    signal AXI_DMA_SLAVE_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal AXI_DMA_SLAVE_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_DMA_SLAVE_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal AXI_DMA_SLAVE_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal AXI_DMA_SLAVE_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal AXI_DMA_SLAVE_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal AXI_DMA_SLAVE_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal AXI_DMA_SLAVE_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal AXI_DMA_SLAVE_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal AXI_DMA_SLAVE_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal AXI_DMA_SLAVE_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_DMA_SLAVE_WVALID : STD_LOGIC;
    signal AXI_DMA_SLAVE_WREADY : STD_LOGIC;
    signal AXI_DMA_SLAVE_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal AXI_DMA_SLAVE_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal AXI_DMA_SLAVE_WLAST : STD_LOGIC;
    signal AXI_DMA_SLAVE_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_DMA_SLAVE_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_DMA_SLAVE_ARVALID : STD_LOGIC;
    signal AXI_DMA_SLAVE_ARREADY : STD_LOGIC;
    signal AXI_DMA_SLAVE_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal AXI_DMA_SLAVE_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_DMA_SLAVE_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal AXI_DMA_SLAVE_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal AXI_DMA_SLAVE_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal AXI_DMA_SLAVE_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal AXI_DMA_SLAVE_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal AXI_DMA_SLAVE_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal AXI_DMA_SLAVE_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal AXI_DMA_SLAVE_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal AXI_DMA_SLAVE_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_DMA_SLAVE_RVALID : STD_LOGIC;
    signal AXI_DMA_SLAVE_RREADY : STD_LOGIC;
    signal AXI_DMA_SLAVE_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal AXI_DMA_SLAVE_RLAST : STD_LOGIC;
    signal AXI_DMA_SLAVE_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_DMA_SLAVE_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_DMA_SLAVE_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal AXI_DMA_SLAVE_BVALID : STD_LOGIC;
    signal AXI_DMA_SLAVE_BREADY : STD_LOGIC;
    signal AXI_DMA_SLAVE_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal AXI_DMA_SLAVE_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_DMA_SLAVE_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_298 : STD_LOGIC_VECTOR (30 downto 0);
    signal reg_302 : STD_LOGIC_VECTOR (18 downto 0);
    signal localEnabled_load_fu_331_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal localEnabled_reg_481 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_assign_load_load_fu_334_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY : STD_LOGIC;
    signal write_assign_load_reg_485 : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_DMA_SLAVE_addr_3_fu_337_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal AXI_DMA_SLAVE_addr_3_reg_489 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_353_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_4_reg_495 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY : STD_LOGIC;
    signal ap_sig_ioackin_AXI_DMA_SLAVE_WREADY : STD_LOGIC;
    signal p_Val2_2_phi_fu_231_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_DMA_SLAVE_addr_fu_381_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal AXI_DMA_SLAVE_addr_reg_525 : STD_LOGIC_VECTOR (31 downto 0);
    signal AXI_DMA_SLAVE_addr_1_fu_387_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal AXI_DMA_SLAVE_addr_1_reg_531 : STD_LOGIC_VECTOR (31 downto 0);
    signal AXI_DMA_SLAVE_addr_2_fu_393_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal AXI_DMA_SLAVE_addr_2_reg_536 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_541 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_408_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_reg_545 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_431_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_10_reg_553 : STD_LOGIC_VECTOR (11 downto 0);
    signal localAddress_1_fu_445_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal localAddress_1_reg_558 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_phi_fu_263_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_2_reg_228 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_237 : STD_LOGIC_VECTOR (31 downto 0);
    signal localAddress1_reg_248 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_reg_260 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_AXI_DMA_SLAVE_WREADY : STD_LOGIC := '0';
    signal tmp_fu_344_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_357_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_414_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_422_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_435_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_bdd_504 : BOOLEAN;
    signal startAddress_assign_fu_106 : STD_LOGIC_VECTOR (31 downto 0);
    signal write_assign_fu_110 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_read_read_fu_132_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal length_assign_fu_114 : STD_LOGIC_VECTOR (31 downto 0);
    signal iterations_assign_fu_118 : STD_LOGIC_VECTOR (31 downto 0);
    signal enabled_assign_fu_122 : STD_LOGIC_VECTOR (0 downto 0);
    signal enabled_read_read_fu_126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal reset_scanner_preg : STD_LOGIC := '0';
    signal controller_finished_V_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal dma_address_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal dma_control_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal dma_status_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);

    component pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        C_ID_WIDTH : INTEGER;
        C_ADDR_WIDTH : INTEGER;
        C_DATA_WIDTH : INTEGER;
        C_AWUSER_WIDTH : INTEGER;
        C_ARUSER_WIDTH : INTEGER;
        C_WUSER_WIDTH : INTEGER;
        C_RUSER_WIDTH : INTEGER;
        C_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESETN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U : component pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 2,
        C_ID_WIDTH => C_M_AXI_AXI_DMA_SLAVE_ID_WIDTH,
        C_ADDR_WIDTH => C_M_AXI_AXI_DMA_SLAVE_ADDR_WIDTH,
        C_DATA_WIDTH => C_M_AXI_AXI_DMA_SLAVE_DATA_WIDTH,
        C_AWUSER_WIDTH => C_M_AXI_AXI_DMA_SLAVE_AWUSER_WIDTH,
        C_ARUSER_WIDTH => C_M_AXI_AXI_DMA_SLAVE_ARUSER_WIDTH,
        C_WUSER_WIDTH => C_M_AXI_AXI_DMA_SLAVE_WUSER_WIDTH,
        C_RUSER_WIDTH => C_M_AXI_AXI_DMA_SLAVE_RUSER_WIDTH,
        C_BUSER_WIDTH => C_M_AXI_AXI_DMA_SLAVE_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_AXI_DMA_SLAVE_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_AXI_DMA_SLAVE_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_AXI_DMA_SLAVE_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_AXI_DMA_SLAVE_CACHE_VALUE)
    port map (
        AWVALID => m_axi_AXI_DMA_SLAVE_AWVALID,
        AWREADY => m_axi_AXI_DMA_SLAVE_AWREADY,
        AWADDR => m_axi_AXI_DMA_SLAVE_AWADDR,
        AWID => m_axi_AXI_DMA_SLAVE_AWID,
        AWLEN => m_axi_AXI_DMA_SLAVE_AWLEN,
        AWSIZE => m_axi_AXI_DMA_SLAVE_AWSIZE,
        AWBURST => m_axi_AXI_DMA_SLAVE_AWBURST,
        AWLOCK => m_axi_AXI_DMA_SLAVE_AWLOCK,
        AWCACHE => m_axi_AXI_DMA_SLAVE_AWCACHE,
        AWPROT => m_axi_AXI_DMA_SLAVE_AWPROT,
        AWQOS => m_axi_AXI_DMA_SLAVE_AWQOS,
        AWREGION => m_axi_AXI_DMA_SLAVE_AWREGION,
        AWUSER => m_axi_AXI_DMA_SLAVE_AWUSER,
        WVALID => m_axi_AXI_DMA_SLAVE_WVALID,
        WREADY => m_axi_AXI_DMA_SLAVE_WREADY,
        WDATA => m_axi_AXI_DMA_SLAVE_WDATA,
        WSTRB => m_axi_AXI_DMA_SLAVE_WSTRB,
        WLAST => m_axi_AXI_DMA_SLAVE_WLAST,
        WID => m_axi_AXI_DMA_SLAVE_WID,
        WUSER => m_axi_AXI_DMA_SLAVE_WUSER,
        ARVALID => m_axi_AXI_DMA_SLAVE_ARVALID,
        ARREADY => m_axi_AXI_DMA_SLAVE_ARREADY,
        ARADDR => m_axi_AXI_DMA_SLAVE_ARADDR,
        ARID => m_axi_AXI_DMA_SLAVE_ARID,
        ARLEN => m_axi_AXI_DMA_SLAVE_ARLEN,
        ARSIZE => m_axi_AXI_DMA_SLAVE_ARSIZE,
        ARBURST => m_axi_AXI_DMA_SLAVE_ARBURST,
        ARLOCK => m_axi_AXI_DMA_SLAVE_ARLOCK,
        ARCACHE => m_axi_AXI_DMA_SLAVE_ARCACHE,
        ARPROT => m_axi_AXI_DMA_SLAVE_ARPROT,
        ARQOS => m_axi_AXI_DMA_SLAVE_ARQOS,
        ARREGION => m_axi_AXI_DMA_SLAVE_ARREGION,
        ARUSER => m_axi_AXI_DMA_SLAVE_ARUSER,
        RVALID => m_axi_AXI_DMA_SLAVE_RVALID,
        RREADY => m_axi_AXI_DMA_SLAVE_RREADY,
        RDATA => m_axi_AXI_DMA_SLAVE_RDATA,
        RLAST => m_axi_AXI_DMA_SLAVE_RLAST,
        RID => m_axi_AXI_DMA_SLAVE_RID,
        RUSER => m_axi_AXI_DMA_SLAVE_RUSER,
        RRESP => m_axi_AXI_DMA_SLAVE_RRESP,
        BVALID => m_axi_AXI_DMA_SLAVE_BVALID,
        BREADY => m_axi_AXI_DMA_SLAVE_BREADY,
        BRESP => m_axi_AXI_DMA_SLAVE_BRESP,
        BID => m_axi_AXI_DMA_SLAVE_BID,
        BUSER => m_axi_AXI_DMA_SLAVE_BUSER,
        ACLK => ap_clk,
        ARESETN => ap_rst_n,
        I_ARVALID => AXI_DMA_SLAVE_ARVALID,
        I_ARREADY => AXI_DMA_SLAVE_ARREADY,
        I_ARADDR => AXI_DMA_SLAVE_ARADDR,
        I_ARID => AXI_DMA_SLAVE_ARID,
        I_ARLEN => AXI_DMA_SLAVE_ARLEN,
        I_ARSIZE => AXI_DMA_SLAVE_ARSIZE,
        I_ARLOCK => AXI_DMA_SLAVE_ARLOCK,
        I_ARCACHE => AXI_DMA_SLAVE_ARCACHE,
        I_ARQOS => AXI_DMA_SLAVE_ARQOS,
        I_ARPROT => AXI_DMA_SLAVE_ARPROT,
        I_ARUSER => AXI_DMA_SLAVE_ARUSER,
        I_ARBURST => AXI_DMA_SLAVE_ARBURST,
        I_ARREGION => AXI_DMA_SLAVE_ARREGION,
        I_RVALID => AXI_DMA_SLAVE_RVALID,
        I_RREADY => AXI_DMA_SLAVE_RREADY,
        I_RDATA => AXI_DMA_SLAVE_RDATA,
        I_RID => AXI_DMA_SLAVE_RID,
        I_RUSER => AXI_DMA_SLAVE_RUSER,
        I_RRESP => AXI_DMA_SLAVE_RRESP,
        I_RLAST => AXI_DMA_SLAVE_RLAST,
        I_AWVALID => AXI_DMA_SLAVE_AWVALID,
        I_AWREADY => AXI_DMA_SLAVE_AWREADY,
        I_AWADDR => AXI_DMA_SLAVE_AWADDR,
        I_AWID => AXI_DMA_SLAVE_AWID,
        I_AWLEN => AXI_DMA_SLAVE_AWLEN,
        I_AWSIZE => AXI_DMA_SLAVE_AWSIZE,
        I_AWLOCK => AXI_DMA_SLAVE_AWLOCK,
        I_AWCACHE => AXI_DMA_SLAVE_AWCACHE,
        I_AWQOS => AXI_DMA_SLAVE_AWQOS,
        I_AWPROT => AXI_DMA_SLAVE_AWPROT,
        I_AWUSER => AXI_DMA_SLAVE_AWUSER,
        I_AWBURST => AXI_DMA_SLAVE_AWBURST,
        I_AWREGION => AXI_DMA_SLAVE_AWREGION,
        I_WVALID => AXI_DMA_SLAVE_WVALID,
        I_WREADY => AXI_DMA_SLAVE_WREADY,
        I_WDATA => AXI_DMA_SLAVE_WDATA,
        I_WID => AXI_DMA_SLAVE_WID,
        I_WUSER => AXI_DMA_SLAVE_WUSER,
        I_WLAST => AXI_DMA_SLAVE_WLAST,
        I_WSTRB => AXI_DMA_SLAVE_WSTRB,
        I_BVALID => AXI_DMA_SLAVE_BVALID,
        I_BREADY => AXI_DMA_SLAVE_BREADY,
        I_BRESP => AXI_DMA_SLAVE_BRESP,
        I_BID => AXI_DMA_SLAVE_BID,
        I_BUSER => AXI_DMA_SLAVE_BUSER);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY assign process. --
    ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((localEnabled_load_fu_331_p1 = ap_const_lv1_0)) and (ap_const_lv1_0 = write_assign_load_load_fu_334_p1) and not((not((localEnabled_load_fu_331_p1 = ap_const_lv1_0)) and (ap_const_lv1_0 = write_assign_load_load_fu_334_p1) and (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY)))) or ((ap_ST_st24_fsm_23 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY) or (AXI_DMA_SLAVE_BVALID = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_WREADY)))) or ((ap_ST_st5_fsm_4 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY) or (AXI_DMA_SLAVE_BVALID = ap_const_logic_0)))) or ((ap_ST_st15_fsm_14 = ap_CS_fsm) and not((ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY))) or ((ap_ST_st16_fsm_15 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_8_fu_414_p3) and not(((AXI_DMA_SLAVE_RVALID = ap_const_logic_0) or ((ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY) and (ap_const_lv1_0 = tmp_8_fu_414_p3))))) or (not(((ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY) or (AXI_DMA_SLAVE_BVALID = ap_const_logic_0))) and (ap_ST_st21_fsm_20 = ap_CS_fsm)) or (not((ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY)) and (ap_ST_st25_fsm_24 = ap_CS_fsm)) or ((ap_ST_st29_fsm_28 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY) or ap_sig_bdd_504))) or ((ap_ST_st30_fsm_29 = ap_CS_fsm) and not(((AXI_DMA_SLAVE_RVALID = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY)))))) then 
                    ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY <= ap_const_logic_0;
                elsif ((((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((localEnabled_load_fu_331_p1 = ap_const_lv1_0)) and (ap_const_lv1_0 = write_assign_load_load_fu_334_p1) and (ap_const_logic_1 = AXI_DMA_SLAVE_ARREADY)) or (not((AXI_DMA_SLAVE_BVALID = ap_const_logic_0)) and (ap_const_logic_1 = AXI_DMA_SLAVE_ARREADY) and (ap_ST_st5_fsm_4 = ap_CS_fsm)) or ((ap_const_logic_1 = AXI_DMA_SLAVE_ARREADY) and (ap_ST_st15_fsm_14 = ap_CS_fsm)) or (not((AXI_DMA_SLAVE_RVALID = ap_const_logic_0)) and (ap_const_logic_1 = AXI_DMA_SLAVE_ARREADY) and (ap_ST_st16_fsm_15 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_8_fu_414_p3)) or (not((AXI_DMA_SLAVE_BVALID = ap_const_logic_0)) and (ap_const_logic_1 = AXI_DMA_SLAVE_ARREADY) and (ap_ST_st21_fsm_20 = ap_CS_fsm)) or (not((AXI_DMA_SLAVE_BVALID = ap_const_logic_0)) and (ap_ST_st24_fsm_23 = ap_CS_fsm) and (ap_const_logic_1 = AXI_DMA_SLAVE_ARREADY)) or ((ap_const_logic_1 = AXI_DMA_SLAVE_ARREADY) and (ap_ST_st25_fsm_24 = ap_CS_fsm)) or ((ap_const_logic_1 = AXI_DMA_SLAVE_ARREADY) and not(ap_sig_bdd_504) and (ap_ST_st29_fsm_28 = ap_CS_fsm)) or (not((AXI_DMA_SLAVE_RVALID = ap_const_logic_0)) and (ap_const_logic_1 = AXI_DMA_SLAVE_ARREADY) and (ap_ST_st30_fsm_29 = ap_CS_fsm)))) then 
                    ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY assign process. --
    ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY <= ap_const_logic_0;
            else
                if ((((ap_ST_st8_fsm_7 = ap_CS_fsm) and not(((AXI_DMA_SLAVE_BVALID = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_WREADY)))) or (not(((AXI_DMA_SLAVE_BVALID = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_WREADY))) and (ap_ST_st9_fsm_8 = ap_CS_fsm)) or ((ap_ST_st24_fsm_23 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY) or (AXI_DMA_SLAVE_BVALID = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_WREADY)))) or ((ap_ST_st4_fsm_3 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_WREADY)))) or (not(((ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_WREADY))) and (ap_ST_st7_fsm_6 = ap_CS_fsm)) or ((ap_ST_st13_fsm_12 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_2_fu_402_p2)) and not((((ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) and not((ap_const_lv1_0 = tmp_2_fu_402_p2))) or ((ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_WREADY) and not((ap_const_lv1_0 = tmp_2_fu_402_p2)))))) or (not(((ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_WREADY))) and (ap_ST_st17_fsm_16 = ap_CS_fsm)) or (not(((ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_WREADY))) and (ap_ST_st20_fsm_19 = ap_CS_fsm)) or (not(((ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_WREADY))) and (ap_ST_st23_fsm_22 = ap_CS_fsm)) or ((ap_ST_st28_fsm_27 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_WREADY) or ap_sig_bdd_504))))) then 
                    ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = AXI_DMA_SLAVE_AWREADY) and (ap_ST_st4_fsm_3 = ap_CS_fsm)) or ((ap_const_logic_1 = AXI_DMA_SLAVE_AWREADY) and (ap_ST_st7_fsm_6 = ap_CS_fsm)) or ((ap_ST_st8_fsm_7 = ap_CS_fsm) and not((AXI_DMA_SLAVE_BVALID = ap_const_logic_0)) and (ap_const_logic_1 = AXI_DMA_SLAVE_AWREADY)) or ((ap_ST_st9_fsm_8 = ap_CS_fsm) and not((AXI_DMA_SLAVE_BVALID = ap_const_logic_0)) and (ap_const_logic_1 = AXI_DMA_SLAVE_AWREADY)) or ((ap_ST_st13_fsm_12 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_2_fu_402_p2)) and (ap_const_logic_1 = AXI_DMA_SLAVE_AWREADY)) or ((ap_const_logic_1 = AXI_DMA_SLAVE_AWREADY) and (ap_ST_st17_fsm_16 = ap_CS_fsm)) or ((ap_const_logic_1 = AXI_DMA_SLAVE_AWREADY) and (ap_ST_st20_fsm_19 = ap_CS_fsm)) or ((ap_const_logic_1 = AXI_DMA_SLAVE_AWREADY) and (ap_ST_st23_fsm_22 = ap_CS_fsm)) or (not((AXI_DMA_SLAVE_BVALID = ap_const_logic_0)) and (ap_ST_st24_fsm_23 = ap_CS_fsm) and (ap_const_logic_1 = AXI_DMA_SLAVE_AWREADY)) or ((ap_const_logic_1 = AXI_DMA_SLAVE_AWREADY) and (ap_ST_st28_fsm_27 = ap_CS_fsm) and not(ap_sig_bdd_504)))) then 
                    ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_AXI_DMA_SLAVE_WREADY assign process. --
    ap_reg_ioackin_AXI_DMA_SLAVE_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ioackin_AXI_DMA_SLAVE_WREADY <= ap_const_logic_0;
            else
                if ((((ap_ST_st8_fsm_7 = ap_CS_fsm) and not(((AXI_DMA_SLAVE_BVALID = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_WREADY)))) or (not(((AXI_DMA_SLAVE_BVALID = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_WREADY))) and (ap_ST_st9_fsm_8 = ap_CS_fsm)) or ((ap_ST_st24_fsm_23 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY) or (AXI_DMA_SLAVE_BVALID = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_WREADY)))) or ((ap_ST_st4_fsm_3 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_WREADY)))) or (not(((ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_WREADY))) and (ap_ST_st7_fsm_6 = ap_CS_fsm)) or ((ap_ST_st13_fsm_12 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_2_fu_402_p2)) and not((((ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) and not((ap_const_lv1_0 = tmp_2_fu_402_p2))) or ((ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_WREADY) and not((ap_const_lv1_0 = tmp_2_fu_402_p2)))))) or (not(((ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_WREADY))) and (ap_ST_st17_fsm_16 = ap_CS_fsm)) or (not(((ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_WREADY))) and (ap_ST_st20_fsm_19 = ap_CS_fsm)) or (not(((ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_WREADY))) and (ap_ST_st23_fsm_22 = ap_CS_fsm)) or ((ap_ST_st28_fsm_27 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_WREADY) or ap_sig_bdd_504))))) then 
                    ap_reg_ioackin_AXI_DMA_SLAVE_WREADY <= ap_const_logic_0;
                elsif ((((ap_ST_st4_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = AXI_DMA_SLAVE_WREADY)) or ((ap_const_logic_1 = AXI_DMA_SLAVE_WREADY) and (ap_ST_st7_fsm_6 = ap_CS_fsm)) or ((ap_ST_st8_fsm_7 = ap_CS_fsm) and not((AXI_DMA_SLAVE_BVALID = ap_const_logic_0)) and (ap_const_logic_1 = AXI_DMA_SLAVE_WREADY)) or ((ap_ST_st9_fsm_8 = ap_CS_fsm) and not((AXI_DMA_SLAVE_BVALID = ap_const_logic_0)) and (ap_const_logic_1 = AXI_DMA_SLAVE_WREADY)) or ((ap_ST_st13_fsm_12 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_2_fu_402_p2)) and (ap_const_logic_1 = AXI_DMA_SLAVE_WREADY)) or ((ap_const_logic_1 = AXI_DMA_SLAVE_WREADY) and (ap_ST_st17_fsm_16 = ap_CS_fsm)) or ((ap_const_logic_1 = AXI_DMA_SLAVE_WREADY) and (ap_ST_st20_fsm_19 = ap_CS_fsm)) or ((ap_const_logic_1 = AXI_DMA_SLAVE_WREADY) and (ap_ST_st23_fsm_22 = ap_CS_fsm)) or (not((AXI_DMA_SLAVE_BVALID = ap_const_logic_0)) and (ap_ST_st24_fsm_23 = ap_CS_fsm) and (ap_const_logic_1 = AXI_DMA_SLAVE_WREADY)) or ((ap_const_logic_1 = AXI_DMA_SLAVE_WREADY) and (ap_ST_st28_fsm_27 = ap_CS_fsm) and not(ap_sig_bdd_504)))) then 
                    ap_reg_ioackin_AXI_DMA_SLAVE_WREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- controller_finished_V_preg assign process. --
    controller_finished_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                controller_finished_V_preg <= ap_const_lv1_0;
            else
                if ((not((AXI_DMA_SLAVE_BVALID = ap_const_logic_0)) and (ap_ST_st14_fsm_13 = ap_CS_fsm))) then 
                    controller_finished_V_preg <= ap_const_lv1_0;
                elsif ((((ap_ST_st32_fsm_31 = ap_CS_fsm) and not((ap_const_lv1_0 = p_Val2_s_phi_fu_263_p4))) or ((ap_ST_st11_fsm_10 = ap_CS_fsm) and not((localEnabled_reg_481 = ap_const_lv1_0)) and (ap_const_lv1_0 = write_assign_load_reg_485) and not((ap_const_lv1_0 = p_Val2_2_phi_fu_231_p4))))) then 
                    controller_finished_V_preg <= ap_const_lv1_1;
                end if; 
            end if;
        end if;
    end process;


    -- dma_address_preg assign process. --
    dma_address_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                dma_address_preg <= ap_const_lv32_0;
            else
                if (((ap_ST_st24_fsm_23 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY) or (AXI_DMA_SLAVE_BVALID = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_WREADY))))) then 
                    dma_address_preg <= localAddress1_reg_248;
                end if; 
            end if;
        end if;
    end process;


    -- dma_control_preg assign process. --
    dma_control_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                dma_control_preg <= ap_const_lv32_0;
            else
                if ((((ap_ST_st28_fsm_27 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_WREADY) or ap_sig_bdd_504))) or ((ap_ST_st30_fsm_29 = ap_CS_fsm) and not(((AXI_DMA_SLAVE_RVALID = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY)))))) then 
                    dma_control_preg <= AXI_DMA_SLAVE_RDATA;
                end if; 
            end if;
        end if;
    end process;


    -- dma_status_preg assign process. --
    dma_status_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                dma_status_preg <= ap_const_lv32_0;
            else
                if (((not((AXI_DMA_SLAVE_RVALID = ap_const_logic_0)) and (ap_ST_st31_fsm_30 = ap_CS_fsm)) or ((ap_ST_st29_fsm_28 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY) or ap_sig_bdd_504))))) then 
                    dma_status_preg <= AXI_DMA_SLAVE_RDATA;
                end if; 
            end if;
        end if;
    end process;


    -- reset_scanner_preg assign process. --
    reset_scanner_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                reset_scanner_preg <= ap_const_logic_0;
            else
                if ((ap_ST_st12_fsm_11 = ap_CS_fsm)) then 
                    reset_scanner_preg <= ap_const_logic_0;
                elsif (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((localEnabled_load_fu_331_p1 = ap_const_lv1_0)) and not((not((localEnabled_load_fu_331_p1 = ap_const_lv1_0)) and (ap_const_lv1_0 = write_assign_load_load_fu_334_p1) and (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY))) and not((ap_const_lv1_0 = write_assign_load_load_fu_334_p1)))) then 
                    reset_scanner_preg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- i_reg_237 assign process. --
    i_reg_237_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st32_fsm_31 = ap_CS_fsm) and not((ap_const_lv1_0 = p_Val2_s_phi_fu_263_p4)))) then 
                i_reg_237 <= i_1_reg_545;
            elsif ((ap_ST_st12_fsm_11 = ap_CS_fsm)) then 
                i_reg_237 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- localAddress1_reg_248 assign process. --
    localAddress1_reg_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st32_fsm_31 = ap_CS_fsm) and not((ap_const_lv1_0 = p_Val2_s_phi_fu_263_p4)))) then 
                localAddress1_reg_248 <= localAddress_1_reg_558;
            elsif ((ap_ST_st12_fsm_11 = ap_CS_fsm)) then 
                localAddress1_reg_248 <= startAddress_assign_fu_106;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then
                enabled_assign_fu_122 <= enabled_read_read_fu_126_p2;
                write_assign_fu_110 <= write_read_read_fu_132_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st13_fsm_12 = ap_CS_fsm) and not((((ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) and not((ap_const_lv1_0 = tmp_2_fu_402_p2))) or ((ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_WREADY) and not((ap_const_lv1_0 = tmp_2_fu_402_p2))))))) then
                i_1_reg_545 <= i_1_fu_408_p2;
                tmp_2_reg_541 <= tmp_2_fu_402_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((not((localEnabled_load_fu_331_p1 = ap_const_lv1_0)) and (ap_const_lv1_0 = write_assign_load_load_fu_334_p1) and (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY))))) then
                iterations_assign_fu_118 <= iterations;
                length_assign_fu_114 <= length_r;
                localEnabled_reg_481 <= enabled_assign_fu_122;
                startAddress_assign_fu_106 <= startAddress;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st24_fsm_23 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY) or (AXI_DMA_SLAVE_BVALID = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_WREADY))))) then
                localAddress_1_reg_558 <= localAddress_1_fu_445_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_ST_st10_fsm_9 = ap_CS_fsm) and not((AXI_DMA_SLAVE_BVALID = ap_const_logic_0))) or ((ap_ST_st11_fsm_10 = ap_CS_fsm) and not((localEnabled_reg_481 = ap_const_lv1_0)) and (ap_const_lv1_0 = write_assign_load_reg_485) and (ap_const_lv1_0 = p_Val2_2_phi_fu_231_p4)))) then
                p_Val2_2_reg_228 <= fabric_interrupt_write_finished_V;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not((AXI_DMA_SLAVE_RVALID = ap_const_logic_0)) and (ap_ST_st31_fsm_30 = ap_CS_fsm)) or ((ap_ST_st32_fsm_31 = ap_CS_fsm) and (ap_const_lv1_0 = p_Val2_s_phi_fu_263_p4)))) then
                p_Val2_s_reg_260 <= fabric_interrupt_read_finished_V;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((AXI_DMA_SLAVE_RVALID = ap_const_logic_0))) or (not((AXI_DMA_SLAVE_RVALID = ap_const_logic_0)) and (ap_ST_st19_fsm_18 = ap_CS_fsm)))) then
                reg_298 <= AXI_DMA_SLAVE_RDATA(31 downto 1);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not((AXI_DMA_SLAVE_RVALID = ap_const_logic_0)) and (ap_ST_st6_fsm_5 = ap_CS_fsm)) or (not((AXI_DMA_SLAVE_RVALID = ap_const_logic_0)) and (ap_ST_st22_fsm_21 = ap_CS_fsm)))) then
                reg_302 <= AXI_DMA_SLAVE_RDATA(31 downto 13);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((AXI_DMA_SLAVE_RVALID = ap_const_logic_0)) and (ap_ST_st22_fsm_21 = ap_CS_fsm))) then
                tmp_10_reg_553 <= tmp_10_fu_431_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((AXI_DMA_SLAVE_RVALID = ap_const_logic_0)) and (ap_ST_st6_fsm_5 = ap_CS_fsm))) then
                tmp_4_reg_495 <= tmp_4_fu_353_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((localEnabled_load_fu_331_p1 = ap_const_lv1_0)) and not((not((localEnabled_load_fu_331_p1 = ap_const_lv1_0)) and (ap_const_lv1_0 = write_assign_load_load_fu_334_p1) and (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY))))) then
                write_assign_load_reg_485 <= write_assign_fu_110;
            end if;
        end if;
    end process;
    AXI_DMA_SLAVE_addr_3_reg_489(31 downto 0) <= "00000000000000000000000000001100";
    AXI_DMA_SLAVE_addr_reg_525(31 downto 0) <= "00000000000000000000000000000001";
    AXI_DMA_SLAVE_addr_1_reg_531(31 downto 0) <= "00000000000000000000000000000110";
    AXI_DMA_SLAVE_addr_2_reg_536(31 downto 0) <= "00000000000000000000000000001010";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start , ap_CS_fsm , AXI_DMA_SLAVE_RVALID , AXI_DMA_SLAVE_BVALID , localEnabled_load_fu_331_p1 , localEnabled_reg_481 , write_assign_load_load_fu_334_p1 , ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY , write_assign_load_reg_485 , ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY , ap_sig_ioackin_AXI_DMA_SLAVE_WREADY , p_Val2_2_phi_fu_231_p4 , tmp_2_fu_402_p2 , tmp_2_reg_541 , p_Val2_s_phi_fu_263_p4 , tmp_8_fu_414_p3 , ap_sig_bdd_504)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((not((localEnabled_load_fu_331_p1 = ap_const_lv1_0)) and not((not((localEnabled_load_fu_331_p1 = ap_const_lv1_0)) and (ap_const_lv1_0 = write_assign_load_load_fu_334_p1) and (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY))) and not((ap_const_lv1_0 = write_assign_load_load_fu_334_p1)))) then
                    ap_NS_fsm <= ap_ST_st12_fsm_11;
                elsif ((not((localEnabled_load_fu_331_p1 = ap_const_lv1_0)) and (ap_const_lv1_0 = write_assign_load_load_fu_334_p1) and not((not((localEnabled_load_fu_331_p1 = ap_const_lv1_0)) and (ap_const_lv1_0 = write_assign_load_load_fu_334_p1) and (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY))))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                elsif (((localEnabled_load_fu_331_p1 = ap_const_lv1_0) and not((not((localEnabled_load_fu_331_p1 = ap_const_lv1_0)) and (ap_const_lv1_0 = write_assign_load_load_fu_334_p1) and (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY))))) then
                    ap_NS_fsm <= ap_ST_st11_fsm_10;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((AXI_DMA_SLAVE_RVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st4_fsm_3 => 
                if (not(((ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_WREADY)))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st5_fsm_4 => 
                if (not(((ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY) or (AXI_DMA_SLAVE_BVALID = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st6_fsm_5 => 
                if (not((AXI_DMA_SLAVE_RVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st7_fsm_6 => 
                if (not(((ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_WREADY)))) then
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                end if;
            when ap_ST_st8_fsm_7 => 
                if (not(((AXI_DMA_SLAVE_BVALID = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_WREADY)))) then
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                else
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                end if;
            when ap_ST_st9_fsm_8 => 
                if (not(((AXI_DMA_SLAVE_BVALID = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_WREADY)))) then
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                else
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                end if;
            when ap_ST_st10_fsm_9 => 
                if (not((AXI_DMA_SLAVE_BVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st11_fsm_10;
                else
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                end if;
            when ap_ST_st11_fsm_10 => 
                if (((localEnabled_reg_481 = ap_const_lv1_0) or ((ap_const_lv1_0 = write_assign_load_reg_485) and not((ap_const_lv1_0 = p_Val2_2_phi_fu_231_p4))) or (not((ap_const_lv1_0 = write_assign_load_reg_485)) and (ap_const_lv1_0 = tmp_2_reg_541)))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st11_fsm_10;
                end if;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                if ((not((ap_const_lv1_0 = tmp_2_fu_402_p2)) and not((((ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) and not((ap_const_lv1_0 = tmp_2_fu_402_p2))) or ((ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_WREADY) and not((ap_const_lv1_0 = tmp_2_fu_402_p2))))))) then
                    ap_NS_fsm <= ap_ST_st14_fsm_13;
                elsif (((ap_const_lv1_0 = tmp_2_fu_402_p2) and not((((ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) and not((ap_const_lv1_0 = tmp_2_fu_402_p2))) or ((ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_WREADY) and not((ap_const_lv1_0 = tmp_2_fu_402_p2))))))) then
                    ap_NS_fsm <= ap_ST_st11_fsm_10;
                else
                    ap_NS_fsm <= ap_ST_st13_fsm_12;
                end if;
            when ap_ST_st14_fsm_13 => 
                if (not((AXI_DMA_SLAVE_BVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st15_fsm_14;
                else
                    ap_NS_fsm <= ap_ST_st14_fsm_13;
                end if;
            when ap_ST_st15_fsm_14 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY))) then
                    ap_NS_fsm <= ap_ST_st16_fsm_15;
                else
                    ap_NS_fsm <= ap_ST_st15_fsm_14;
                end if;
            when ap_ST_st16_fsm_15 => 
                if (((ap_const_lv1_0 = tmp_8_fu_414_p3) and not(((AXI_DMA_SLAVE_RVALID = ap_const_logic_0) or ((ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY) and (ap_const_lv1_0 = tmp_8_fu_414_p3)))))) then
                    ap_NS_fsm <= ap_ST_st19_fsm_18;
                elsif ((not(((AXI_DMA_SLAVE_RVALID = ap_const_logic_0) or ((ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY) and (ap_const_lv1_0 = tmp_8_fu_414_p3)))) and not((ap_const_lv1_0 = tmp_8_fu_414_p3)))) then
                    ap_NS_fsm <= ap_ST_st17_fsm_16;
                else
                    ap_NS_fsm <= ap_ST_st16_fsm_15;
                end if;
            when ap_ST_st17_fsm_16 => 
                if (not(((ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_WREADY)))) then
                    ap_NS_fsm <= ap_ST_st18_fsm_17;
                else
                    ap_NS_fsm <= ap_ST_st17_fsm_16;
                end if;
            when ap_ST_st18_fsm_17 => 
                if (not((AXI_DMA_SLAVE_BVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st15_fsm_14;
                else
                    ap_NS_fsm <= ap_ST_st18_fsm_17;
                end if;
            when ap_ST_st19_fsm_18 => 
                if (not((AXI_DMA_SLAVE_RVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st20_fsm_19;
                else
                    ap_NS_fsm <= ap_ST_st19_fsm_18;
                end if;
            when ap_ST_st20_fsm_19 => 
                if (not(((ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_WREADY)))) then
                    ap_NS_fsm <= ap_ST_st21_fsm_20;
                else
                    ap_NS_fsm <= ap_ST_st20_fsm_19;
                end if;
            when ap_ST_st21_fsm_20 => 
                if (not(((ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY) or (AXI_DMA_SLAVE_BVALID = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_st22_fsm_21;
                else
                    ap_NS_fsm <= ap_ST_st21_fsm_20;
                end if;
            when ap_ST_st22_fsm_21 => 
                if (not((AXI_DMA_SLAVE_RVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st23_fsm_22;
                else
                    ap_NS_fsm <= ap_ST_st22_fsm_21;
                end if;
            when ap_ST_st23_fsm_22 => 
                if (not(((ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_WREADY)))) then
                    ap_NS_fsm <= ap_ST_st24_fsm_23;
                else
                    ap_NS_fsm <= ap_ST_st23_fsm_22;
                end if;
            when ap_ST_st24_fsm_23 => 
                if (not(((ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY) or (AXI_DMA_SLAVE_BVALID = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_WREADY)))) then
                    ap_NS_fsm <= ap_ST_st25_fsm_24;
                else
                    ap_NS_fsm <= ap_ST_st24_fsm_23;
                end if;
            when ap_ST_st25_fsm_24 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY))) then
                    ap_NS_fsm <= ap_ST_st26_fsm_25;
                else
                    ap_NS_fsm <= ap_ST_st25_fsm_24;
                end if;
            when ap_ST_st26_fsm_25 => 
                ap_NS_fsm <= ap_ST_st27_fsm_26;
            when ap_ST_st27_fsm_26 => 
                ap_NS_fsm <= ap_ST_st28_fsm_27;
            when ap_ST_st28_fsm_27 => 
                if (not(((ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_WREADY) or ap_sig_bdd_504))) then
                    ap_NS_fsm <= ap_ST_st29_fsm_28;
                else
                    ap_NS_fsm <= ap_ST_st28_fsm_27;
                end if;
            when ap_ST_st29_fsm_28 => 
                if (not(((ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY) or ap_sig_bdd_504))) then
                    ap_NS_fsm <= ap_ST_st30_fsm_29;
                else
                    ap_NS_fsm <= ap_ST_st29_fsm_28;
                end if;
            when ap_ST_st30_fsm_29 => 
                if (not(((AXI_DMA_SLAVE_RVALID = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY)))) then
                    ap_NS_fsm <= ap_ST_st31_fsm_30;
                else
                    ap_NS_fsm <= ap_ST_st30_fsm_29;
                end if;
            when ap_ST_st31_fsm_30 => 
                if (not((AXI_DMA_SLAVE_RVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st32_fsm_31;
                else
                    ap_NS_fsm <= ap_ST_st31_fsm_30;
                end if;
            when ap_ST_st32_fsm_31 => 
                if (not((ap_const_lv1_0 = p_Val2_s_phi_fu_263_p4))) then
                    ap_NS_fsm <= ap_ST_st13_fsm_12;
                else
                    ap_NS_fsm <= ap_ST_st32_fsm_31;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;

    -- AXI_DMA_SLAVE_ARADDR assign process. --
    AXI_DMA_SLAVE_ARADDR_assign_proc : process(ap_CS_fsm, AXI_DMA_SLAVE_RVALID, AXI_DMA_SLAVE_BVALID, localEnabled_load_fu_331_p1, write_assign_load_load_fu_334_p1, AXI_DMA_SLAVE_addr_3_reg_489, AXI_DMA_SLAVE_addr_reg_525, ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY, tmp_8_fu_414_p3, ap_sig_bdd_504)
    begin
        if ((((ap_const_logic_0 = ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY) and (ap_ST_st25_fsm_24 = ap_CS_fsm)) or (not((AXI_DMA_SLAVE_RVALID = ap_const_logic_0)) and (ap_const_logic_0 = ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY) and (ap_ST_st30_fsm_29 = ap_CS_fsm)))) then 
            AXI_DMA_SLAVE_ARADDR <= AXI_DMA_SLAVE_addr_reg_525;
        elsif ((((ap_const_logic_0 = ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY) and (ap_ST_st15_fsm_14 = ap_CS_fsm)) or (not((AXI_DMA_SLAVE_RVALID = ap_const_logic_0)) and (ap_const_logic_0 = ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY) and (ap_ST_st16_fsm_15 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_8_fu_414_p3)) or (not((AXI_DMA_SLAVE_BVALID = ap_const_logic_0)) and (ap_const_logic_0 = ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY) and (ap_ST_st21_fsm_20 = ap_CS_fsm)) or (not((AXI_DMA_SLAVE_BVALID = ap_const_logic_0)) and (ap_ST_st24_fsm_23 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY)) or ((ap_const_logic_0 = ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY) and not(ap_sig_bdd_504) and (ap_ST_st29_fsm_28 = ap_CS_fsm)))) then 
            AXI_DMA_SLAVE_ARADDR <= ap_const_lv32_0;
        elsif ((not((AXI_DMA_SLAVE_BVALID = ap_const_logic_0)) and (ap_const_logic_0 = ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY) and (ap_ST_st5_fsm_4 = ap_CS_fsm))) then 
            AXI_DMA_SLAVE_ARADDR <= AXI_DMA_SLAVE_addr_3_reg_489;
        elsif (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((localEnabled_load_fu_331_p1 = ap_const_lv1_0)) and (ap_const_lv1_0 = write_assign_load_load_fu_334_p1) and (ap_const_logic_0 = ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY))) then 
            AXI_DMA_SLAVE_ARADDR <= ap_const_lv64_C(32 - 1 downto 0);
        else 
            AXI_DMA_SLAVE_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    AXI_DMA_SLAVE_ARBURST <= ap_const_lv2_0;
    AXI_DMA_SLAVE_ARCACHE <= ap_const_lv4_0;
    AXI_DMA_SLAVE_ARID <= ap_const_lv1_0;
    AXI_DMA_SLAVE_ARLEN <= ap_const_lv32_1;
    AXI_DMA_SLAVE_ARLOCK <= ap_const_lv2_0;
    AXI_DMA_SLAVE_ARPROT <= ap_const_lv3_0;
    AXI_DMA_SLAVE_ARQOS <= ap_const_lv4_0;
    AXI_DMA_SLAVE_ARREGION <= ap_const_lv4_0;
    AXI_DMA_SLAVE_ARSIZE <= ap_const_lv3_0;
    AXI_DMA_SLAVE_ARUSER <= ap_const_lv1_0;

    -- AXI_DMA_SLAVE_ARVALID assign process. --
    AXI_DMA_SLAVE_ARVALID_assign_proc : process(ap_CS_fsm, AXI_DMA_SLAVE_RVALID, AXI_DMA_SLAVE_BVALID, localEnabled_load_fu_331_p1, write_assign_load_load_fu_334_p1, ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY, tmp_8_fu_414_p3, ap_sig_bdd_504)
    begin
        if ((((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((localEnabled_load_fu_331_p1 = ap_const_lv1_0)) and (ap_const_lv1_0 = write_assign_load_load_fu_334_p1) and (ap_const_logic_0 = ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY)) or (not((AXI_DMA_SLAVE_BVALID = ap_const_logic_0)) and (ap_const_logic_0 = ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY) and (ap_ST_st5_fsm_4 = ap_CS_fsm)) or ((ap_const_logic_0 = ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY) and (ap_ST_st15_fsm_14 = ap_CS_fsm)) or (not((AXI_DMA_SLAVE_RVALID = ap_const_logic_0)) and (ap_const_logic_0 = ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY) and (ap_ST_st16_fsm_15 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_8_fu_414_p3)) or (not((AXI_DMA_SLAVE_BVALID = ap_const_logic_0)) and (ap_const_logic_0 = ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY) and (ap_ST_st21_fsm_20 = ap_CS_fsm)) or (not((AXI_DMA_SLAVE_BVALID = ap_const_logic_0)) and (ap_ST_st24_fsm_23 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY)) or ((ap_const_logic_0 = ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY) and (ap_ST_st25_fsm_24 = ap_CS_fsm)) or ((ap_const_logic_0 = ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY) and not(ap_sig_bdd_504) and (ap_ST_st29_fsm_28 = ap_CS_fsm)) or (not((AXI_DMA_SLAVE_RVALID = ap_const_logic_0)) and (ap_const_logic_0 = ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY) and (ap_ST_st30_fsm_29 = ap_CS_fsm)))) then 
            AXI_DMA_SLAVE_ARVALID <= ap_const_logic_1;
        else 
            AXI_DMA_SLAVE_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    -- AXI_DMA_SLAVE_AWADDR assign process. --
    AXI_DMA_SLAVE_AWADDR_assign_proc : process(ap_CS_fsm, AXI_DMA_SLAVE_BVALID, AXI_DMA_SLAVE_addr_3_reg_489, AXI_DMA_SLAVE_addr_1_reg_531, AXI_DMA_SLAVE_addr_2_reg_536, tmp_2_fu_402_p2, ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY, ap_sig_bdd_504)
    begin
        if (((ap_const_logic_0 = ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY) and (ap_ST_st28_fsm_27 = ap_CS_fsm) and not(ap_sig_bdd_504))) then 
            AXI_DMA_SLAVE_AWADDR <= AXI_DMA_SLAVE_addr_2_reg_536;
        elsif ((not((AXI_DMA_SLAVE_BVALID = ap_const_logic_0)) and (ap_ST_st24_fsm_23 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY))) then 
            AXI_DMA_SLAVE_AWADDR <= AXI_DMA_SLAVE_addr_1_reg_531;
        elsif ((((ap_ST_st13_fsm_12 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_2_fu_402_p2)) and (ap_const_logic_0 = ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY)) or ((ap_const_logic_0 = ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY) and (ap_ST_st17_fsm_16 = ap_CS_fsm)) or ((ap_const_logic_0 = ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY) and (ap_ST_st20_fsm_19 = ap_CS_fsm)) or ((ap_const_logic_0 = ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY) and (ap_ST_st23_fsm_22 = ap_CS_fsm)))) then 
            AXI_DMA_SLAVE_AWADDR <= ap_const_lv32_0;
        elsif (((ap_ST_st9_fsm_8 = ap_CS_fsm) and not((AXI_DMA_SLAVE_BVALID = ap_const_logic_0)) and (ap_const_logic_0 = ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY))) then 
            AXI_DMA_SLAVE_AWADDR <= ap_const_lv64_16(32 - 1 downto 0);
        elsif (((ap_ST_st8_fsm_7 = ap_CS_fsm) and not((AXI_DMA_SLAVE_BVALID = ap_const_logic_0)) and (ap_const_logic_0 = ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY))) then 
            AXI_DMA_SLAVE_AWADDR <= ap_const_lv64_12(32 - 1 downto 0);
        elsif ((((ap_ST_st4_fsm_3 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY)) or ((ap_const_logic_0 = ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY) and (ap_ST_st7_fsm_6 = ap_CS_fsm)))) then 
            AXI_DMA_SLAVE_AWADDR <= AXI_DMA_SLAVE_addr_3_reg_489;
        else 
            AXI_DMA_SLAVE_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    AXI_DMA_SLAVE_AWBURST <= ap_const_lv2_0;
    AXI_DMA_SLAVE_AWCACHE <= ap_const_lv4_0;
    AXI_DMA_SLAVE_AWID <= ap_const_lv1_0;
    AXI_DMA_SLAVE_AWLEN <= ap_const_lv32_1;
    AXI_DMA_SLAVE_AWLOCK <= ap_const_lv2_0;
    AXI_DMA_SLAVE_AWPROT <= ap_const_lv3_0;
    AXI_DMA_SLAVE_AWQOS <= ap_const_lv4_0;
    AXI_DMA_SLAVE_AWREGION <= ap_const_lv4_0;
    AXI_DMA_SLAVE_AWSIZE <= ap_const_lv3_0;
    AXI_DMA_SLAVE_AWUSER <= ap_const_lv1_0;

    -- AXI_DMA_SLAVE_AWVALID assign process. --
    AXI_DMA_SLAVE_AWVALID_assign_proc : process(ap_CS_fsm, AXI_DMA_SLAVE_BVALID, tmp_2_fu_402_p2, ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY, ap_sig_bdd_504)
    begin
        if ((((ap_ST_st4_fsm_3 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY)) or ((ap_const_logic_0 = ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY) and (ap_ST_st7_fsm_6 = ap_CS_fsm)) or ((ap_ST_st8_fsm_7 = ap_CS_fsm) and not((AXI_DMA_SLAVE_BVALID = ap_const_logic_0)) and (ap_const_logic_0 = ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY)) or ((ap_ST_st9_fsm_8 = ap_CS_fsm) and not((AXI_DMA_SLAVE_BVALID = ap_const_logic_0)) and (ap_const_logic_0 = ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY)) or ((ap_ST_st13_fsm_12 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_2_fu_402_p2)) and (ap_const_logic_0 = ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY)) or ((ap_const_logic_0 = ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY) and (ap_ST_st17_fsm_16 = ap_CS_fsm)) or ((ap_const_logic_0 = ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY) and (ap_ST_st20_fsm_19 = ap_CS_fsm)) or ((ap_const_logic_0 = ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY) and (ap_ST_st23_fsm_22 = ap_CS_fsm)) or (not((AXI_DMA_SLAVE_BVALID = ap_const_logic_0)) and (ap_ST_st24_fsm_23 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY)) or ((ap_const_logic_0 = ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY) and (ap_ST_st28_fsm_27 = ap_CS_fsm) and not(ap_sig_bdd_504)))) then 
            AXI_DMA_SLAVE_AWVALID <= ap_const_logic_1;
        else 
            AXI_DMA_SLAVE_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    -- AXI_DMA_SLAVE_BREADY assign process. --
    AXI_DMA_SLAVE_BREADY_assign_proc : process(ap_CS_fsm, AXI_DMA_SLAVE_BVALID, ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY, ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY, ap_sig_ioackin_AXI_DMA_SLAVE_WREADY, ap_sig_bdd_504)
    begin
        if ((((ap_ST_st8_fsm_7 = ap_CS_fsm) and not(((AXI_DMA_SLAVE_BVALID = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_WREADY)))) or (not(((AXI_DMA_SLAVE_BVALID = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_WREADY))) and (ap_ST_st9_fsm_8 = ap_CS_fsm)) or ((ap_ST_st10_fsm_9 = ap_CS_fsm) and not((AXI_DMA_SLAVE_BVALID = ap_const_logic_0))) or ((ap_ST_st24_fsm_23 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY) or (AXI_DMA_SLAVE_BVALID = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_WREADY)))) or ((ap_ST_st5_fsm_4 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY) or (AXI_DMA_SLAVE_BVALID = ap_const_logic_0)))) or (not((AXI_DMA_SLAVE_BVALID = ap_const_logic_0)) and (ap_ST_st14_fsm_13 = ap_CS_fsm)) or (not((AXI_DMA_SLAVE_BVALID = ap_const_logic_0)) and (ap_ST_st18_fsm_17 = ap_CS_fsm)) or (not(((ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY) or (AXI_DMA_SLAVE_BVALID = ap_const_logic_0))) and (ap_ST_st21_fsm_20 = ap_CS_fsm)) or ((ap_ST_st28_fsm_27 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_WREADY) or ap_sig_bdd_504))) or ((ap_ST_st29_fsm_28 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY) or ap_sig_bdd_504))))) then 
            AXI_DMA_SLAVE_BREADY <= ap_const_logic_1;
        else 
            AXI_DMA_SLAVE_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    -- AXI_DMA_SLAVE_RREADY assign process. --
    AXI_DMA_SLAVE_RREADY_assign_proc : process(ap_CS_fsm, AXI_DMA_SLAVE_RVALID, ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY, ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY, ap_sig_ioackin_AXI_DMA_SLAVE_WREADY, tmp_8_fu_414_p3, ap_sig_bdd_504)
    begin
        if ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((AXI_DMA_SLAVE_RVALID = ap_const_logic_0))) or (not((AXI_DMA_SLAVE_RVALID = ap_const_logic_0)) and (ap_ST_st19_fsm_18 = ap_CS_fsm)) or (not((AXI_DMA_SLAVE_RVALID = ap_const_logic_0)) and (ap_ST_st6_fsm_5 = ap_CS_fsm)) or (not((AXI_DMA_SLAVE_RVALID = ap_const_logic_0)) and (ap_ST_st22_fsm_21 = ap_CS_fsm)) or (not((AXI_DMA_SLAVE_RVALID = ap_const_logic_0)) and (ap_ST_st31_fsm_30 = ap_CS_fsm)) or ((ap_ST_st16_fsm_15 = ap_CS_fsm) and not(((AXI_DMA_SLAVE_RVALID = ap_const_logic_0) or ((ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY) and (ap_const_lv1_0 = tmp_8_fu_414_p3))))) or ((ap_ST_st28_fsm_27 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_WREADY) or ap_sig_bdd_504))) or ((ap_ST_st29_fsm_28 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY) or ap_sig_bdd_504))) or ((ap_ST_st30_fsm_29 = ap_CS_fsm) and not(((AXI_DMA_SLAVE_RVALID = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY)))))) then 
            AXI_DMA_SLAVE_RREADY <= ap_const_logic_1;
        else 
            AXI_DMA_SLAVE_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    -- AXI_DMA_SLAVE_WDATA assign process. --
    AXI_DMA_SLAVE_WDATA_assign_proc : process(ap_CS_fsm, AXI_DMA_SLAVE_BVALID, tmp_2_fu_402_p2, localAddress1_reg_248, ap_reg_ioackin_AXI_DMA_SLAVE_WREADY, tmp_fu_344_p3, tmp_1_fu_357_p4, tmp_5_fu_422_p3, tmp_6_fu_435_p4, ap_sig_bdd_504, startAddress_assign_fu_106, length_assign_fu_114)
    begin
        if ((not((AXI_DMA_SLAVE_BVALID = ap_const_logic_0)) and (ap_ST_st24_fsm_23 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_AXI_DMA_SLAVE_WREADY))) then 
            AXI_DMA_SLAVE_WDATA <= localAddress1_reg_248;
        elsif (((ap_const_logic_0 = ap_reg_ioackin_AXI_DMA_SLAVE_WREADY) and (ap_ST_st23_fsm_22 = ap_CS_fsm))) then 
            AXI_DMA_SLAVE_WDATA <= tmp_6_fu_435_p4;
        elsif (((ap_const_logic_0 = ap_reg_ioackin_AXI_DMA_SLAVE_WREADY) and (ap_ST_st20_fsm_19 = ap_CS_fsm))) then 
            AXI_DMA_SLAVE_WDATA <= tmp_5_fu_422_p3;
        elsif (((ap_const_logic_0 = ap_reg_ioackin_AXI_DMA_SLAVE_WREADY) and (ap_ST_st17_fsm_16 = ap_CS_fsm))) then 
            AXI_DMA_SLAVE_WDATA <= ap_const_lv32_0;
        elsif (((ap_ST_st13_fsm_12 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_2_fu_402_p2)) and (ap_const_logic_0 = ap_reg_ioackin_AXI_DMA_SLAVE_WREADY))) then 
            AXI_DMA_SLAVE_WDATA <= ap_const_lv32_4;
        elsif ((((ap_ST_st9_fsm_8 = ap_CS_fsm) and not((AXI_DMA_SLAVE_BVALID = ap_const_logic_0)) and (ap_const_logic_0 = ap_reg_ioackin_AXI_DMA_SLAVE_WREADY)) or ((ap_const_logic_0 = ap_reg_ioackin_AXI_DMA_SLAVE_WREADY) and (ap_ST_st28_fsm_27 = ap_CS_fsm) and not(ap_sig_bdd_504)))) then 
            AXI_DMA_SLAVE_WDATA <= length_assign_fu_114;
        elsif (((ap_ST_st8_fsm_7 = ap_CS_fsm) and not((AXI_DMA_SLAVE_BVALID = ap_const_logic_0)) and (ap_const_logic_0 = ap_reg_ioackin_AXI_DMA_SLAVE_WREADY))) then 
            AXI_DMA_SLAVE_WDATA <= startAddress_assign_fu_106;
        elsif (((ap_const_logic_0 = ap_reg_ioackin_AXI_DMA_SLAVE_WREADY) and (ap_ST_st7_fsm_6 = ap_CS_fsm))) then 
            AXI_DMA_SLAVE_WDATA <= tmp_1_fu_357_p4;
        elsif (((ap_ST_st4_fsm_3 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_AXI_DMA_SLAVE_WREADY))) then 
            AXI_DMA_SLAVE_WDATA <= tmp_fu_344_p3;
        else 
            AXI_DMA_SLAVE_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    AXI_DMA_SLAVE_WID <= ap_const_lv1_0;
    AXI_DMA_SLAVE_WLAST <= ap_const_logic_0;
    AXI_DMA_SLAVE_WSTRB <= ap_const_lv4_F;
    AXI_DMA_SLAVE_WUSER <= ap_const_lv1_0;

    -- AXI_DMA_SLAVE_WVALID assign process. --
    AXI_DMA_SLAVE_WVALID_assign_proc : process(ap_CS_fsm, AXI_DMA_SLAVE_BVALID, tmp_2_fu_402_p2, ap_reg_ioackin_AXI_DMA_SLAVE_WREADY, ap_sig_bdd_504)
    begin
        if ((((ap_ST_st4_fsm_3 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_AXI_DMA_SLAVE_WREADY)) or ((ap_const_logic_0 = ap_reg_ioackin_AXI_DMA_SLAVE_WREADY) and (ap_ST_st7_fsm_6 = ap_CS_fsm)) or ((ap_ST_st8_fsm_7 = ap_CS_fsm) and not((AXI_DMA_SLAVE_BVALID = ap_const_logic_0)) and (ap_const_logic_0 = ap_reg_ioackin_AXI_DMA_SLAVE_WREADY)) or ((ap_ST_st9_fsm_8 = ap_CS_fsm) and not((AXI_DMA_SLAVE_BVALID = ap_const_logic_0)) and (ap_const_logic_0 = ap_reg_ioackin_AXI_DMA_SLAVE_WREADY)) or ((ap_ST_st13_fsm_12 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_2_fu_402_p2)) and (ap_const_logic_0 = ap_reg_ioackin_AXI_DMA_SLAVE_WREADY)) or ((ap_const_logic_0 = ap_reg_ioackin_AXI_DMA_SLAVE_WREADY) and (ap_ST_st17_fsm_16 = ap_CS_fsm)) or ((ap_const_logic_0 = ap_reg_ioackin_AXI_DMA_SLAVE_WREADY) and (ap_ST_st20_fsm_19 = ap_CS_fsm)) or ((ap_const_logic_0 = ap_reg_ioackin_AXI_DMA_SLAVE_WREADY) and (ap_ST_st23_fsm_22 = ap_CS_fsm)) or (not((AXI_DMA_SLAVE_BVALID = ap_const_logic_0)) and (ap_ST_st24_fsm_23 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_AXI_DMA_SLAVE_WREADY)) or ((ap_const_logic_0 = ap_reg_ioackin_AXI_DMA_SLAVE_WREADY) and (ap_ST_st28_fsm_27 = ap_CS_fsm) and not(ap_sig_bdd_504)))) then 
            AXI_DMA_SLAVE_WVALID <= ap_const_logic_1;
        else 
            AXI_DMA_SLAVE_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    AXI_DMA_SLAVE_addr_1_fu_387_p2 <= ap_const_lv64_6(32 - 1 downto 0);
    AXI_DMA_SLAVE_addr_2_fu_393_p2 <= ap_const_lv64_A(32 - 1 downto 0);
    AXI_DMA_SLAVE_addr_3_fu_337_p2 <= ap_const_lv64_C(32 - 1 downto 0);
    AXI_DMA_SLAVE_addr_fu_381_p2 <= ap_const_lv64_1(32 - 1 downto 0);

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_CS_fsm, localEnabled_reg_481, write_assign_load_reg_485, p_Val2_2_phi_fu_231_p4, tmp_2_reg_541)
    begin
        if (((ap_ST_st11_fsm_10 = ap_CS_fsm) and ((localEnabled_reg_481 = ap_const_lv1_0) or ((ap_const_lv1_0 = write_assign_load_reg_485) and not((ap_const_lv1_0 = p_Val2_2_phi_fu_231_p4))) or (not((ap_const_lv1_0 = write_assign_load_reg_485)) and (ap_const_lv1_0 = tmp_2_reg_541))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm, localEnabled_reg_481, write_assign_load_reg_485, p_Val2_2_phi_fu_231_p4, tmp_2_reg_541)
    begin
        if (((ap_ST_st11_fsm_10 = ap_CS_fsm) and ((localEnabled_reg_481 = ap_const_lv1_0) or ((ap_const_lv1_0 = write_assign_load_reg_485) and not((ap_const_lv1_0 = p_Val2_2_phi_fu_231_p4))) or (not((ap_const_lv1_0 = write_assign_load_reg_485)) and (ap_const_lv1_0 = tmp_2_reg_541))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_504 assign process. --
    ap_sig_bdd_504_assign_proc : process(AXI_DMA_SLAVE_RVALID, AXI_DMA_SLAVE_BVALID)
    begin
                ap_sig_bdd_504 <= ((AXI_DMA_SLAVE_RVALID = ap_const_logic_0) or (AXI_DMA_SLAVE_BVALID = ap_const_logic_0));
    end process;


    -- ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY assign process. --
    ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY_assign_proc : process(AXI_DMA_SLAVE_ARREADY, ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY)) then 
            ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY <= AXI_DMA_SLAVE_ARREADY;
        else 
            ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY assign process. --
    ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY_assign_proc : process(AXI_DMA_SLAVE_AWREADY, ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY)) then 
            ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY <= AXI_DMA_SLAVE_AWREADY;
        else 
            ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_AXI_DMA_SLAVE_WREADY assign process. --
    ap_sig_ioackin_AXI_DMA_SLAVE_WREADY_assign_proc : process(AXI_DMA_SLAVE_WREADY, ap_reg_ioackin_AXI_DMA_SLAVE_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_AXI_DMA_SLAVE_WREADY)) then 
            ap_sig_ioackin_AXI_DMA_SLAVE_WREADY <= AXI_DMA_SLAVE_WREADY;
        else 
            ap_sig_ioackin_AXI_DMA_SLAVE_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- controller_finished_V assign process. --
    controller_finished_V_assign_proc : process(ap_CS_fsm, AXI_DMA_SLAVE_BVALID, localEnabled_reg_481, write_assign_load_reg_485, p_Val2_2_phi_fu_231_p4, p_Val2_s_phi_fu_263_p4, controller_finished_V_preg)
    begin
        if ((not((AXI_DMA_SLAVE_BVALID = ap_const_logic_0)) and (ap_ST_st14_fsm_13 = ap_CS_fsm))) then 
            controller_finished_V <= ap_const_lv1_0;
        elsif ((((ap_ST_st32_fsm_31 = ap_CS_fsm) and not((ap_const_lv1_0 = p_Val2_s_phi_fu_263_p4))) or ((ap_ST_st11_fsm_10 = ap_CS_fsm) and not((localEnabled_reg_481 = ap_const_lv1_0)) and (ap_const_lv1_0 = write_assign_load_reg_485) and not((ap_const_lv1_0 = p_Val2_2_phi_fu_231_p4))))) then 
            controller_finished_V <= ap_const_lv1_1;
        else 
            controller_finished_V <= controller_finished_V_preg;
        end if; 
    end process;


    -- dma_address assign process. --
    dma_address_assign_proc : process(ap_CS_fsm, AXI_DMA_SLAVE_BVALID, ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY, ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY, ap_sig_ioackin_AXI_DMA_SLAVE_WREADY, localAddress1_reg_248, dma_address_preg)
    begin
        if (((ap_ST_st24_fsm_23 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY) or (AXI_DMA_SLAVE_BVALID = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_WREADY))))) then 
            dma_address <= localAddress1_reg_248;
        else 
            dma_address <= dma_address_preg;
        end if; 
    end process;


    -- dma_control assign process. --
    dma_control_assign_proc : process(ap_CS_fsm, AXI_DMA_SLAVE_RVALID, AXI_DMA_SLAVE_RDATA, ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY, ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY, ap_sig_ioackin_AXI_DMA_SLAVE_WREADY, ap_sig_bdd_504, dma_control_preg)
    begin
        if ((((ap_ST_st28_fsm_27 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_WREADY) or ap_sig_bdd_504))) or ((ap_ST_st30_fsm_29 = ap_CS_fsm) and not(((AXI_DMA_SLAVE_RVALID = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY)))))) then 
            dma_control <= AXI_DMA_SLAVE_RDATA;
        else 
            dma_control <= dma_control_preg;
        end if; 
    end process;


    -- dma_status assign process. --
    dma_status_assign_proc : process(ap_CS_fsm, AXI_DMA_SLAVE_RVALID, AXI_DMA_SLAVE_RDATA, ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY, ap_sig_bdd_504, dma_status_preg)
    begin
        if (((not((AXI_DMA_SLAVE_RVALID = ap_const_logic_0)) and (ap_ST_st31_fsm_30 = ap_CS_fsm)) or ((ap_ST_st29_fsm_28 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY) or ap_sig_bdd_504))))) then 
            dma_status <= AXI_DMA_SLAVE_RDATA;
        else 
            dma_status <= dma_status_preg;
        end if; 
    end process;

    enabled_read_read_fu_126_p2 <= (0=>enabled, others=>'-');
    i_1_fu_408_p2 <= std_logic_vector(unsigned(i_reg_237) + unsigned(ap_const_lv32_1));
    localAddress_1_fu_445_p2 <= std_logic_vector(unsigned(localAddress1_reg_248) + unsigned(ap_const_lv32_4));
    localEnabled_load_fu_331_p1 <= enabled_assign_fu_122;
    p_Val2_2_phi_fu_231_p4 <= p_Val2_2_reg_228;
    p_Val2_s_phi_fu_263_p4 <= p_Val2_s_reg_260;

    -- reset_scanner assign process. --
    reset_scanner_assign_proc : process(ap_CS_fsm, localEnabled_load_fu_331_p1, write_assign_load_load_fu_334_p1, ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY, reset_scanner_preg)
    begin
        if ((ap_ST_st12_fsm_11 = ap_CS_fsm)) then 
            reset_scanner <= ap_const_logic_0;
        elsif (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((localEnabled_load_fu_331_p1 = ap_const_lv1_0)) and not((not((localEnabled_load_fu_331_p1 = ap_const_lv1_0)) and (ap_const_lv1_0 = write_assign_load_load_fu_334_p1) and (ap_const_logic_0 = ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY))) and not((ap_const_lv1_0 = write_assign_load_load_fu_334_p1)))) then 
            reset_scanner <= ap_const_logic_1;
        else 
            reset_scanner <= reset_scanner_preg;
        end if; 
    end process;

    tmp_10_fu_431_p1 <= AXI_DMA_SLAVE_RDATA(12 - 1 downto 0);
    tmp_1_fu_357_p4 <= ((reg_302 & ap_const_lv1_1) & tmp_4_reg_495);
    tmp_2_fu_402_p2 <= "1" when (signed(i_reg_237) < signed(iterations_assign_fu_118)) else "0";
    tmp_4_fu_353_p1 <= AXI_DMA_SLAVE_RDATA(12 - 1 downto 0);
    tmp_5_fu_422_p3 <= (reg_298 & ap_const_lv1_1);
    tmp_6_fu_435_p4 <= ((reg_302 & ap_const_lv1_1) & tmp_10_reg_553);
    tmp_8_fu_414_p3 <= AXI_DMA_SLAVE_RDATA(2 downto 2);
    tmp_fu_344_p3 <= (reg_298 & ap_const_lv1_1);
    write_assign_load_load_fu_334_p1 <= write_assign_fu_110;
    write_read_read_fu_132_p2 <= (0=>write_r, others=>'-');
end behav;
