// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.1
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="pl_axi_dma_controller,hls_ip_2014_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}" *)

module pl_axi_dma_controller (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_AXI_DMA_SLAVE_AWVALID,
        m_axi_AXI_DMA_SLAVE_AWREADY,
        m_axi_AXI_DMA_SLAVE_AWADDR,
        m_axi_AXI_DMA_SLAVE_AWID,
        m_axi_AXI_DMA_SLAVE_AWLEN,
        m_axi_AXI_DMA_SLAVE_AWSIZE,
        m_axi_AXI_DMA_SLAVE_AWBURST,
        m_axi_AXI_DMA_SLAVE_AWLOCK,
        m_axi_AXI_DMA_SLAVE_AWCACHE,
        m_axi_AXI_DMA_SLAVE_AWPROT,
        m_axi_AXI_DMA_SLAVE_AWQOS,
        m_axi_AXI_DMA_SLAVE_AWREGION,
        m_axi_AXI_DMA_SLAVE_AWUSER,
        m_axi_AXI_DMA_SLAVE_WVALID,
        m_axi_AXI_DMA_SLAVE_WREADY,
        m_axi_AXI_DMA_SLAVE_WDATA,
        m_axi_AXI_DMA_SLAVE_WSTRB,
        m_axi_AXI_DMA_SLAVE_WLAST,
        m_axi_AXI_DMA_SLAVE_WID,
        m_axi_AXI_DMA_SLAVE_WUSER,
        m_axi_AXI_DMA_SLAVE_ARVALID,
        m_axi_AXI_DMA_SLAVE_ARREADY,
        m_axi_AXI_DMA_SLAVE_ARADDR,
        m_axi_AXI_DMA_SLAVE_ARID,
        m_axi_AXI_DMA_SLAVE_ARLEN,
        m_axi_AXI_DMA_SLAVE_ARSIZE,
        m_axi_AXI_DMA_SLAVE_ARBURST,
        m_axi_AXI_DMA_SLAVE_ARLOCK,
        m_axi_AXI_DMA_SLAVE_ARCACHE,
        m_axi_AXI_DMA_SLAVE_ARPROT,
        m_axi_AXI_DMA_SLAVE_ARQOS,
        m_axi_AXI_DMA_SLAVE_ARREGION,
        m_axi_AXI_DMA_SLAVE_ARUSER,
        m_axi_AXI_DMA_SLAVE_RVALID,
        m_axi_AXI_DMA_SLAVE_RREADY,
        m_axi_AXI_DMA_SLAVE_RDATA,
        m_axi_AXI_DMA_SLAVE_RLAST,
        m_axi_AXI_DMA_SLAVE_RID,
        m_axi_AXI_DMA_SLAVE_RUSER,
        m_axi_AXI_DMA_SLAVE_RRESP,
        m_axi_AXI_DMA_SLAVE_BVALID,
        m_axi_AXI_DMA_SLAVE_BREADY,
        m_axi_AXI_DMA_SLAVE_BRESP,
        m_axi_AXI_DMA_SLAVE_BID,
        m_axi_AXI_DMA_SLAVE_BUSER,
        startAddress,
        write_r,
        length_r,
        iterations,
        enabled,
        reset_scanner,
        dma_control,
        dma_status,
        dma_address,
        fabric_interrupt_write_finished_V,
        fabric_interrupt_read_finished_V,
        controller_finished_V
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 5'b00000;
parameter    ap_ST_st2_fsm_1 = 5'b1;
parameter    ap_ST_st3_fsm_2 = 5'b10;
parameter    ap_ST_st4_fsm_3 = 5'b11;
parameter    ap_ST_st5_fsm_4 = 5'b100;
parameter    ap_ST_st6_fsm_5 = 5'b101;
parameter    ap_ST_st7_fsm_6 = 5'b110;
parameter    ap_ST_st8_fsm_7 = 5'b111;
parameter    ap_ST_st9_fsm_8 = 5'b1000;
parameter    ap_ST_st10_fsm_9 = 5'b1001;
parameter    ap_ST_st11_fsm_10 = 5'b1010;
parameter    ap_ST_st12_fsm_11 = 5'b1011;
parameter    ap_ST_st13_fsm_12 = 5'b1100;
parameter    ap_ST_st14_fsm_13 = 5'b1101;
parameter    ap_ST_st15_fsm_14 = 5'b1110;
parameter    ap_ST_st16_fsm_15 = 5'b1111;
parameter    ap_ST_st17_fsm_16 = 5'b10000;
parameter    ap_ST_st18_fsm_17 = 5'b10001;
parameter    ap_ST_st19_fsm_18 = 5'b10010;
parameter    ap_ST_st20_fsm_19 = 5'b10011;
parameter    ap_ST_st21_fsm_20 = 5'b10100;
parameter    ap_ST_st22_fsm_21 = 5'b10101;
parameter    ap_ST_st23_fsm_22 = 5'b10110;
parameter    ap_ST_st24_fsm_23 = 5'b10111;
parameter    ap_ST_st25_fsm_24 = 5'b11000;
parameter    ap_ST_st26_fsm_25 = 5'b11001;
parameter    ap_ST_st27_fsm_26 = 5'b11010;
parameter    ap_ST_st28_fsm_27 = 5'b11011;
parameter    ap_ST_st29_fsm_28 = 5'b11100;
parameter    ap_ST_st30_fsm_29 = 5'b11101;
parameter    ap_ST_st31_fsm_30 = 5'b11110;
parameter    ap_ST_st32_fsm_31 = 5'b11111;
parameter    C_M_AXI_AXI_DMA_SLAVE_ID_WIDTH = 1;
parameter    C_M_AXI_AXI_DMA_SLAVE_ADDR_WIDTH = 32;
parameter    C_M_AXI_AXI_DMA_SLAVE_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_M_AXI_AXI_DMA_SLAVE_AWUSER_WIDTH = 1;
parameter    C_M_AXI_AXI_DMA_SLAVE_ARUSER_WIDTH = 1;
parameter    C_M_AXI_AXI_DMA_SLAVE_WUSER_WIDTH = 1;
parameter    C_M_AXI_AXI_DMA_SLAVE_RUSER_WIDTH = 1;
parameter    C_M_AXI_AXI_DMA_SLAVE_BUSER_WIDTH = 1;
parameter    C_DATA_WIDTH = 32;
parameter    C_M_AXI_AXI_DMA_SLAVE_TARGET_ADDR = 0;
parameter    C_M_AXI_AXI_DMA_SLAVE_USER_VALUE = 0;
parameter    C_M_AXI_AXI_DMA_SLAVE_PROT_VALUE = 0;
parameter    C_M_AXI_AXI_DMA_SLAVE_CACHE_VALUE = 3;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv64_C = 64'b1100;
parameter    ap_const_lv64_12 = 64'b10010;
parameter    ap_const_lv64_16 = 64'b10110;
parameter    ap_const_lv64_1 = 64'b1;
parameter    ap_const_lv64_6 = 64'b110;
parameter    ap_const_lv64_A = 64'b1010;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv4_F = 4'b1111;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_true = 1'b1;
parameter    C_M_AXI_AXI_DMA_SLAVE_WSTRB_WIDTH = (C_M_AXI_AXI_DMA_SLAVE_DATA_WIDTH / ap_const_int64_8);
parameter    C_WSTRB_WIDTH = (C_DATA_WIDTH / ap_const_int64_8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_AXI_DMA_SLAVE_AWVALID;
input   m_axi_AXI_DMA_SLAVE_AWREADY;
output  [C_M_AXI_AXI_DMA_SLAVE_ADDR_WIDTH - 1 : 0] m_axi_AXI_DMA_SLAVE_AWADDR;
output  [C_M_AXI_AXI_DMA_SLAVE_ID_WIDTH - 1 : 0] m_axi_AXI_DMA_SLAVE_AWID;
output  [7:0] m_axi_AXI_DMA_SLAVE_AWLEN;
output  [2:0] m_axi_AXI_DMA_SLAVE_AWSIZE;
output  [1:0] m_axi_AXI_DMA_SLAVE_AWBURST;
output  [1:0] m_axi_AXI_DMA_SLAVE_AWLOCK;
output  [3:0] m_axi_AXI_DMA_SLAVE_AWCACHE;
output  [2:0] m_axi_AXI_DMA_SLAVE_AWPROT;
output  [3:0] m_axi_AXI_DMA_SLAVE_AWQOS;
output  [3:0] m_axi_AXI_DMA_SLAVE_AWREGION;
output  [C_M_AXI_AXI_DMA_SLAVE_AWUSER_WIDTH - 1 : 0] m_axi_AXI_DMA_SLAVE_AWUSER;
output   m_axi_AXI_DMA_SLAVE_WVALID;
input   m_axi_AXI_DMA_SLAVE_WREADY;
output  [C_M_AXI_AXI_DMA_SLAVE_DATA_WIDTH - 1 : 0] m_axi_AXI_DMA_SLAVE_WDATA;
output  [C_M_AXI_AXI_DMA_SLAVE_WSTRB_WIDTH - 1 : 0] m_axi_AXI_DMA_SLAVE_WSTRB;
output   m_axi_AXI_DMA_SLAVE_WLAST;
output  [C_M_AXI_AXI_DMA_SLAVE_ID_WIDTH - 1 : 0] m_axi_AXI_DMA_SLAVE_WID;
output  [C_M_AXI_AXI_DMA_SLAVE_WUSER_WIDTH - 1 : 0] m_axi_AXI_DMA_SLAVE_WUSER;
output   m_axi_AXI_DMA_SLAVE_ARVALID;
input   m_axi_AXI_DMA_SLAVE_ARREADY;
output  [C_M_AXI_AXI_DMA_SLAVE_ADDR_WIDTH - 1 : 0] m_axi_AXI_DMA_SLAVE_ARADDR;
output  [C_M_AXI_AXI_DMA_SLAVE_ID_WIDTH - 1 : 0] m_axi_AXI_DMA_SLAVE_ARID;
output  [7:0] m_axi_AXI_DMA_SLAVE_ARLEN;
output  [2:0] m_axi_AXI_DMA_SLAVE_ARSIZE;
output  [1:0] m_axi_AXI_DMA_SLAVE_ARBURST;
output  [1:0] m_axi_AXI_DMA_SLAVE_ARLOCK;
output  [3:0] m_axi_AXI_DMA_SLAVE_ARCACHE;
output  [2:0] m_axi_AXI_DMA_SLAVE_ARPROT;
output  [3:0] m_axi_AXI_DMA_SLAVE_ARQOS;
output  [3:0] m_axi_AXI_DMA_SLAVE_ARREGION;
output  [C_M_AXI_AXI_DMA_SLAVE_ARUSER_WIDTH - 1 : 0] m_axi_AXI_DMA_SLAVE_ARUSER;
input   m_axi_AXI_DMA_SLAVE_RVALID;
output   m_axi_AXI_DMA_SLAVE_RREADY;
input  [C_M_AXI_AXI_DMA_SLAVE_DATA_WIDTH - 1 : 0] m_axi_AXI_DMA_SLAVE_RDATA;
input   m_axi_AXI_DMA_SLAVE_RLAST;
input  [C_M_AXI_AXI_DMA_SLAVE_ID_WIDTH - 1 : 0] m_axi_AXI_DMA_SLAVE_RID;
input  [C_M_AXI_AXI_DMA_SLAVE_RUSER_WIDTH - 1 : 0] m_axi_AXI_DMA_SLAVE_RUSER;
input  [1:0] m_axi_AXI_DMA_SLAVE_RRESP;
input   m_axi_AXI_DMA_SLAVE_BVALID;
output   m_axi_AXI_DMA_SLAVE_BREADY;
input  [1:0] m_axi_AXI_DMA_SLAVE_BRESP;
input  [C_M_AXI_AXI_DMA_SLAVE_ID_WIDTH - 1 : 0] m_axi_AXI_DMA_SLAVE_BID;
input  [C_M_AXI_AXI_DMA_SLAVE_BUSER_WIDTH - 1 : 0] m_axi_AXI_DMA_SLAVE_BUSER;
input  [31:0] startAddress;
input   write_r;
input  [31:0] length_r;
input  [31:0] iterations;
input   enabled;
output   reset_scanner;
output  [31:0] dma_control;
output  [31:0] dma_status;
output  [31:0] dma_address;
input  [0:0] fabric_interrupt_write_finished_V;
input  [0:0] fabric_interrupt_read_finished_V;
output  [0:0] controller_finished_V;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg reset_scanner;
reg[31:0] dma_control;
reg[31:0] dma_status;
reg[31:0] dma_address;
reg[0:0] controller_finished_V;
reg   [4:0] ap_CS_fsm = 5'b00000;
reg    AXI_DMA_SLAVE_AWVALID;
wire    AXI_DMA_SLAVE_AWREADY;
reg   [31:0] AXI_DMA_SLAVE_AWADDR;
wire   [0:0] AXI_DMA_SLAVE_AWID;
wire   [31:0] AXI_DMA_SLAVE_AWLEN;
wire   [2:0] AXI_DMA_SLAVE_AWSIZE;
wire   [1:0] AXI_DMA_SLAVE_AWBURST;
wire   [1:0] AXI_DMA_SLAVE_AWLOCK;
wire   [3:0] AXI_DMA_SLAVE_AWCACHE;
wire   [2:0] AXI_DMA_SLAVE_AWPROT;
wire   [3:0] AXI_DMA_SLAVE_AWQOS;
wire   [3:0] AXI_DMA_SLAVE_AWREGION;
wire   [0:0] AXI_DMA_SLAVE_AWUSER;
reg    AXI_DMA_SLAVE_WVALID;
wire    AXI_DMA_SLAVE_WREADY;
reg   [31:0] AXI_DMA_SLAVE_WDATA;
wire   [3:0] AXI_DMA_SLAVE_WSTRB;
wire    AXI_DMA_SLAVE_WLAST;
wire   [0:0] AXI_DMA_SLAVE_WID;
wire   [0:0] AXI_DMA_SLAVE_WUSER;
reg    AXI_DMA_SLAVE_ARVALID;
wire    AXI_DMA_SLAVE_ARREADY;
reg   [31:0] AXI_DMA_SLAVE_ARADDR;
wire   [0:0] AXI_DMA_SLAVE_ARID;
wire   [31:0] AXI_DMA_SLAVE_ARLEN;
wire   [2:0] AXI_DMA_SLAVE_ARSIZE;
wire   [1:0] AXI_DMA_SLAVE_ARBURST;
wire   [1:0] AXI_DMA_SLAVE_ARLOCK;
wire   [3:0] AXI_DMA_SLAVE_ARCACHE;
wire   [2:0] AXI_DMA_SLAVE_ARPROT;
wire   [3:0] AXI_DMA_SLAVE_ARQOS;
wire   [3:0] AXI_DMA_SLAVE_ARREGION;
wire   [0:0] AXI_DMA_SLAVE_ARUSER;
wire    AXI_DMA_SLAVE_RVALID;
reg    AXI_DMA_SLAVE_RREADY;
wire   [31:0] AXI_DMA_SLAVE_RDATA;
wire    AXI_DMA_SLAVE_RLAST;
wire   [0:0] AXI_DMA_SLAVE_RID;
wire   [0:0] AXI_DMA_SLAVE_RUSER;
wire   [1:0] AXI_DMA_SLAVE_RRESP;
wire    AXI_DMA_SLAVE_BVALID;
reg    AXI_DMA_SLAVE_BREADY;
wire   [1:0] AXI_DMA_SLAVE_BRESP;
wire   [0:0] AXI_DMA_SLAVE_BID;
wire   [0:0] AXI_DMA_SLAVE_BUSER;
reg   [30:0] reg_298;
reg   [18:0] reg_302;
wire   [0:0] localEnabled_load_fu_331_p1;
reg   [0:0] localEnabled_reg_481;
wire   [0:0] write_assign_load_load_fu_334_p1;
reg    ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY;
reg   [0:0] write_assign_load_reg_485;
wire   [31:0] AXI_DMA_SLAVE_addr_3_fu_337_p2;
reg   [31:0] AXI_DMA_SLAVE_addr_3_reg_489;
wire   [11:0] tmp_4_fu_353_p1;
reg   [11:0] tmp_4_reg_495;
reg    ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY;
reg    ap_sig_ioackin_AXI_DMA_SLAVE_WREADY;
wire   [0:0] p_Val2_2_phi_fu_231_p4;
wire   [31:0] AXI_DMA_SLAVE_addr_fu_381_p2;
reg   [31:0] AXI_DMA_SLAVE_addr_reg_525;
wire   [31:0] AXI_DMA_SLAVE_addr_1_fu_387_p2;
reg   [31:0] AXI_DMA_SLAVE_addr_1_reg_531;
wire   [31:0] AXI_DMA_SLAVE_addr_2_fu_393_p2;
reg   [31:0] AXI_DMA_SLAVE_addr_2_reg_536;
wire   [0:0] tmp_2_fu_402_p2;
reg   [0:0] tmp_2_reg_541;
wire   [31:0] i_1_fu_408_p2;
reg   [31:0] i_1_reg_545;
wire   [11:0] tmp_10_fu_431_p1;
reg   [11:0] tmp_10_reg_553;
wire   [31:0] localAddress_1_fu_445_p2;
reg   [31:0] localAddress_1_reg_558;
wire   [0:0] p_Val2_s_phi_fu_263_p4;
reg   [0:0] p_Val2_2_reg_228;
reg   [31:0] i_reg_237;
reg   [31:0] localAddress1_reg_248;
reg   [0:0] p_Val2_s_reg_260;
reg    ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY = 1'b0;
reg    ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY = 1'b0;
reg    ap_reg_ioackin_AXI_DMA_SLAVE_WREADY = 1'b0;
wire   [31:0] tmp_fu_344_p3;
wire   [31:0] tmp_1_fu_357_p4;
wire   [0:0] tmp_8_fu_414_p3;
wire   [31:0] tmp_5_fu_422_p3;
wire   [31:0] tmp_6_fu_435_p4;
reg    ap_sig_bdd_504;
reg   [31:0] startAddress_assign_fu_106;
reg   [0:0] write_assign_fu_110;
wire   [0:0] write_read_read_fu_132_p2;
reg   [31:0] length_assign_fu_114;
reg   [31:0] iterations_assign_fu_118;
reg   [0:0] enabled_assign_fu_122;
wire   [0:0] enabled_read_read_fu_126_p2;
reg    reset_scanner_preg = 1'b0;
reg   [0:0] controller_finished_V_preg = 1'b0;
reg   [31:0] dma_address_preg = 32'b00000000000000000000000000000000;
reg   [31:0] dma_control_preg = 32'b00000000000000000000000000000000;
reg   [31:0] dma_status_preg = 32'b00000000000000000000000000000000;
reg   [4:0] ap_NS_fsm;


pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 2 ),
    .C_ID_WIDTH( C_M_AXI_AXI_DMA_SLAVE_ID_WIDTH ),
    .C_ADDR_WIDTH( C_M_AXI_AXI_DMA_SLAVE_ADDR_WIDTH ),
    .C_DATA_WIDTH( C_M_AXI_AXI_DMA_SLAVE_DATA_WIDTH ),
    .C_AWUSER_WIDTH( C_M_AXI_AXI_DMA_SLAVE_AWUSER_WIDTH ),
    .C_ARUSER_WIDTH( C_M_AXI_AXI_DMA_SLAVE_ARUSER_WIDTH ),
    .C_WUSER_WIDTH( C_M_AXI_AXI_DMA_SLAVE_WUSER_WIDTH ),
    .C_RUSER_WIDTH( C_M_AXI_AXI_DMA_SLAVE_RUSER_WIDTH ),
    .C_BUSER_WIDTH( C_M_AXI_AXI_DMA_SLAVE_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_AXI_DMA_SLAVE_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_AXI_DMA_SLAVE_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_AXI_DMA_SLAVE_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_AXI_DMA_SLAVE_CACHE_VALUE ))
pl_axi_dma_controller_AXI_DMA_SLAVE_m_axi_U(
    .AWVALID( m_axi_AXI_DMA_SLAVE_AWVALID ),
    .AWREADY( m_axi_AXI_DMA_SLAVE_AWREADY ),
    .AWADDR( m_axi_AXI_DMA_SLAVE_AWADDR ),
    .AWID( m_axi_AXI_DMA_SLAVE_AWID ),
    .AWLEN( m_axi_AXI_DMA_SLAVE_AWLEN ),
    .AWSIZE( m_axi_AXI_DMA_SLAVE_AWSIZE ),
    .AWBURST( m_axi_AXI_DMA_SLAVE_AWBURST ),
    .AWLOCK( m_axi_AXI_DMA_SLAVE_AWLOCK ),
    .AWCACHE( m_axi_AXI_DMA_SLAVE_AWCACHE ),
    .AWPROT( m_axi_AXI_DMA_SLAVE_AWPROT ),
    .AWQOS( m_axi_AXI_DMA_SLAVE_AWQOS ),
    .AWREGION( m_axi_AXI_DMA_SLAVE_AWREGION ),
    .AWUSER( m_axi_AXI_DMA_SLAVE_AWUSER ),
    .WVALID( m_axi_AXI_DMA_SLAVE_WVALID ),
    .WREADY( m_axi_AXI_DMA_SLAVE_WREADY ),
    .WDATA( m_axi_AXI_DMA_SLAVE_WDATA ),
    .WSTRB( m_axi_AXI_DMA_SLAVE_WSTRB ),
    .WLAST( m_axi_AXI_DMA_SLAVE_WLAST ),
    .WID( m_axi_AXI_DMA_SLAVE_WID ),
    .WUSER( m_axi_AXI_DMA_SLAVE_WUSER ),
    .ARVALID( m_axi_AXI_DMA_SLAVE_ARVALID ),
    .ARREADY( m_axi_AXI_DMA_SLAVE_ARREADY ),
    .ARADDR( m_axi_AXI_DMA_SLAVE_ARADDR ),
    .ARID( m_axi_AXI_DMA_SLAVE_ARID ),
    .ARLEN( m_axi_AXI_DMA_SLAVE_ARLEN ),
    .ARSIZE( m_axi_AXI_DMA_SLAVE_ARSIZE ),
    .ARBURST( m_axi_AXI_DMA_SLAVE_ARBURST ),
    .ARLOCK( m_axi_AXI_DMA_SLAVE_ARLOCK ),
    .ARCACHE( m_axi_AXI_DMA_SLAVE_ARCACHE ),
    .ARPROT( m_axi_AXI_DMA_SLAVE_ARPROT ),
    .ARQOS( m_axi_AXI_DMA_SLAVE_ARQOS ),
    .ARREGION( m_axi_AXI_DMA_SLAVE_ARREGION ),
    .ARUSER( m_axi_AXI_DMA_SLAVE_ARUSER ),
    .RVALID( m_axi_AXI_DMA_SLAVE_RVALID ),
    .RREADY( m_axi_AXI_DMA_SLAVE_RREADY ),
    .RDATA( m_axi_AXI_DMA_SLAVE_RDATA ),
    .RLAST( m_axi_AXI_DMA_SLAVE_RLAST ),
    .RID( m_axi_AXI_DMA_SLAVE_RID ),
    .RUSER( m_axi_AXI_DMA_SLAVE_RUSER ),
    .RRESP( m_axi_AXI_DMA_SLAVE_RRESP ),
    .BVALID( m_axi_AXI_DMA_SLAVE_BVALID ),
    .BREADY( m_axi_AXI_DMA_SLAVE_BREADY ),
    .BRESP( m_axi_AXI_DMA_SLAVE_BRESP ),
    .BID( m_axi_AXI_DMA_SLAVE_BID ),
    .BUSER( m_axi_AXI_DMA_SLAVE_BUSER ),
    .ACLK( ap_clk ),
    .ARESETN( ap_rst_n ),
    .I_ARVALID( AXI_DMA_SLAVE_ARVALID ),
    .I_ARREADY( AXI_DMA_SLAVE_ARREADY ),
    .I_ARADDR( AXI_DMA_SLAVE_ARADDR ),
    .I_ARID( AXI_DMA_SLAVE_ARID ),
    .I_ARLEN( AXI_DMA_SLAVE_ARLEN ),
    .I_ARSIZE( AXI_DMA_SLAVE_ARSIZE ),
    .I_ARLOCK( AXI_DMA_SLAVE_ARLOCK ),
    .I_ARCACHE( AXI_DMA_SLAVE_ARCACHE ),
    .I_ARQOS( AXI_DMA_SLAVE_ARQOS ),
    .I_ARPROT( AXI_DMA_SLAVE_ARPROT ),
    .I_ARUSER( AXI_DMA_SLAVE_ARUSER ),
    .I_ARBURST( AXI_DMA_SLAVE_ARBURST ),
    .I_ARREGION( AXI_DMA_SLAVE_ARREGION ),
    .I_RVALID( AXI_DMA_SLAVE_RVALID ),
    .I_RREADY( AXI_DMA_SLAVE_RREADY ),
    .I_RDATA( AXI_DMA_SLAVE_RDATA ),
    .I_RID( AXI_DMA_SLAVE_RID ),
    .I_RUSER( AXI_DMA_SLAVE_RUSER ),
    .I_RRESP( AXI_DMA_SLAVE_RRESP ),
    .I_RLAST( AXI_DMA_SLAVE_RLAST ),
    .I_AWVALID( AXI_DMA_SLAVE_AWVALID ),
    .I_AWREADY( AXI_DMA_SLAVE_AWREADY ),
    .I_AWADDR( AXI_DMA_SLAVE_AWADDR ),
    .I_AWID( AXI_DMA_SLAVE_AWID ),
    .I_AWLEN( AXI_DMA_SLAVE_AWLEN ),
    .I_AWSIZE( AXI_DMA_SLAVE_AWSIZE ),
    .I_AWLOCK( AXI_DMA_SLAVE_AWLOCK ),
    .I_AWCACHE( AXI_DMA_SLAVE_AWCACHE ),
    .I_AWQOS( AXI_DMA_SLAVE_AWQOS ),
    .I_AWPROT( AXI_DMA_SLAVE_AWPROT ),
    .I_AWUSER( AXI_DMA_SLAVE_AWUSER ),
    .I_AWBURST( AXI_DMA_SLAVE_AWBURST ),
    .I_AWREGION( AXI_DMA_SLAVE_AWREGION ),
    .I_WVALID( AXI_DMA_SLAVE_WVALID ),
    .I_WREADY( AXI_DMA_SLAVE_WREADY ),
    .I_WDATA( AXI_DMA_SLAVE_WDATA ),
    .I_WID( AXI_DMA_SLAVE_WID ),
    .I_WUSER( AXI_DMA_SLAVE_WUSER ),
    .I_WLAST( AXI_DMA_SLAVE_WLAST ),
    .I_WSTRB( AXI_DMA_SLAVE_WSTRB ),
    .I_BVALID( AXI_DMA_SLAVE_BVALID ),
    .I_BREADY( AXI_DMA_SLAVE_BREADY ),
    .I_BRESP( AXI_DMA_SLAVE_BRESP ),
    .I_BID( AXI_DMA_SLAVE_BID ),
    .I_BUSER( AXI_DMA_SLAVE_BUSER )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst_n == 1'b0) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY
    if (ap_rst_n == 1'b0) begin
        ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY <= ap_const_logic_0;
    end else begin
        if ((((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(localEnabled_load_fu_331_p1 == ap_const_lv1_0) & (ap_const_lv1_0 == write_assign_load_load_fu_334_p1) & ~(~(localEnabled_load_fu_331_p1 == ap_const_lv1_0) & (ap_const_lv1_0 == write_assign_load_load_fu_334_p1) & (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY))) | ((ap_ST_st24_fsm_23 == ap_CS_fsm) & ~((ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY) | (AXI_DMA_SLAVE_BVALID == ap_const_logic_0) | (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_WREADY))) | ((ap_ST_st5_fsm_4 == ap_CS_fsm) & ~((ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY) | (AXI_DMA_SLAVE_BVALID == ap_const_logic_0))) | ((ap_ST_st15_fsm_14 == ap_CS_fsm) & ~(ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY)) | ((ap_ST_st16_fsm_15 == ap_CS_fsm) & (ap_const_lv1_0 == tmp_8_fu_414_p3) & ~((AXI_DMA_SLAVE_RVALID == ap_const_logic_0) | ((ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY) & (ap_const_lv1_0 == tmp_8_fu_414_p3)))) | (~((ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY) | (AXI_DMA_SLAVE_BVALID == ap_const_logic_0)) & (ap_ST_st21_fsm_20 == ap_CS_fsm)) | (~(ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY) & (ap_ST_st25_fsm_24 == ap_CS_fsm)) | ((ap_ST_st29_fsm_28 == ap_CS_fsm) & ~((ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY) | ap_sig_bdd_504)) | ((ap_ST_st30_fsm_29 == ap_CS_fsm) & ~((AXI_DMA_SLAVE_RVALID == ap_const_logic_0) | (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY))))) begin
            ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY <= ap_const_logic_0;
        end else if ((((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(localEnabled_load_fu_331_p1 == ap_const_lv1_0) & (ap_const_lv1_0 == write_assign_load_load_fu_334_p1) & (ap_const_logic_1 == AXI_DMA_SLAVE_ARREADY)) | (~(AXI_DMA_SLAVE_BVALID == ap_const_logic_0) & (ap_const_logic_1 == AXI_DMA_SLAVE_ARREADY) & (ap_ST_st5_fsm_4 == ap_CS_fsm)) | ((ap_const_logic_1 == AXI_DMA_SLAVE_ARREADY) & (ap_ST_st15_fsm_14 == ap_CS_fsm)) | (~(AXI_DMA_SLAVE_RVALID == ap_const_logic_0) & (ap_const_logic_1 == AXI_DMA_SLAVE_ARREADY) & (ap_ST_st16_fsm_15 == ap_CS_fsm) & (ap_const_lv1_0 == tmp_8_fu_414_p3)) | (~(AXI_DMA_SLAVE_BVALID == ap_const_logic_0) & (ap_const_logic_1 == AXI_DMA_SLAVE_ARREADY) & (ap_ST_st21_fsm_20 == ap_CS_fsm)) | (~(AXI_DMA_SLAVE_BVALID == ap_const_logic_0) & (ap_ST_st24_fsm_23 == ap_CS_fsm) & (ap_const_logic_1 == AXI_DMA_SLAVE_ARREADY)) | ((ap_const_logic_1 == AXI_DMA_SLAVE_ARREADY) & (ap_ST_st25_fsm_24 == ap_CS_fsm)) | ((ap_const_logic_1 == AXI_DMA_SLAVE_ARREADY) & ~ap_sig_bdd_504 & (ap_ST_st29_fsm_28 == ap_CS_fsm)) | (~(AXI_DMA_SLAVE_RVALID == ap_const_logic_0) & (ap_const_logic_1 == AXI_DMA_SLAVE_ARREADY) & (ap_ST_st30_fsm_29 == ap_CS_fsm)))) begin
            ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY
    if (ap_rst_n == 1'b0) begin
        ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY <= ap_const_logic_0;
    end else begin
        if ((((ap_ST_st8_fsm_7 == ap_CS_fsm) & ~((AXI_DMA_SLAVE_BVALID == ap_const_logic_0) | (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_WREADY))) | (~((AXI_DMA_SLAVE_BVALID == ap_const_logic_0) | (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_WREADY)) & (ap_ST_st9_fsm_8 == ap_CS_fsm)) | ((ap_ST_st24_fsm_23 == ap_CS_fsm) & ~((ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY) | (AXI_DMA_SLAVE_BVALID == ap_const_logic_0) | (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_WREADY))) | ((ap_ST_st4_fsm_3 == ap_CS_fsm) & ~((ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_WREADY))) | (~((ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_WREADY)) & (ap_ST_st7_fsm_6 == ap_CS_fsm)) | ((ap_ST_st13_fsm_12 == ap_CS_fsm) & ~(ap_const_lv1_0 == tmp_2_fu_402_p2) & ~(((ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) & ~(ap_const_lv1_0 == tmp_2_fu_402_p2)) | ((ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_WREADY) & ~(ap_const_lv1_0 == tmp_2_fu_402_p2)))) | (~((ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_WREADY)) & (ap_ST_st17_fsm_16 == ap_CS_fsm)) | (~((ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_WREADY)) & (ap_ST_st20_fsm_19 == ap_CS_fsm)) | (~((ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_WREADY)) & (ap_ST_st23_fsm_22 == ap_CS_fsm)) | ((ap_ST_st28_fsm_27 == ap_CS_fsm) & ~((ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_WREADY) | ap_sig_bdd_504)))) begin
            ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY <= ap_const_logic_0;
        end else if ((((ap_const_logic_1 == AXI_DMA_SLAVE_AWREADY) & (ap_ST_st4_fsm_3 == ap_CS_fsm)) | ((ap_const_logic_1 == AXI_DMA_SLAVE_AWREADY) & (ap_ST_st7_fsm_6 == ap_CS_fsm)) | ((ap_ST_st8_fsm_7 == ap_CS_fsm) & ~(AXI_DMA_SLAVE_BVALID == ap_const_logic_0) & (ap_const_logic_1 == AXI_DMA_SLAVE_AWREADY)) | ((ap_ST_st9_fsm_8 == ap_CS_fsm) & ~(AXI_DMA_SLAVE_BVALID == ap_const_logic_0) & (ap_const_logic_1 == AXI_DMA_SLAVE_AWREADY)) | ((ap_ST_st13_fsm_12 == ap_CS_fsm) & ~(ap_const_lv1_0 == tmp_2_fu_402_p2) & (ap_const_logic_1 == AXI_DMA_SLAVE_AWREADY)) | ((ap_const_logic_1 == AXI_DMA_SLAVE_AWREADY) & (ap_ST_st17_fsm_16 == ap_CS_fsm)) | ((ap_const_logic_1 == AXI_DMA_SLAVE_AWREADY) & (ap_ST_st20_fsm_19 == ap_CS_fsm)) | ((ap_const_logic_1 == AXI_DMA_SLAVE_AWREADY) & (ap_ST_st23_fsm_22 == ap_CS_fsm)) | (~(AXI_DMA_SLAVE_BVALID == ap_const_logic_0) & (ap_ST_st24_fsm_23 == ap_CS_fsm) & (ap_const_logic_1 == AXI_DMA_SLAVE_AWREADY)) | ((ap_const_logic_1 == AXI_DMA_SLAVE_AWREADY) & (ap_ST_st28_fsm_27 == ap_CS_fsm) & ~ap_sig_bdd_504))) begin
            ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ioackin_AXI_DMA_SLAVE_WREADY assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ioackin_AXI_DMA_SLAVE_WREADY
    if (ap_rst_n == 1'b0) begin
        ap_reg_ioackin_AXI_DMA_SLAVE_WREADY <= ap_const_logic_0;
    end else begin
        if ((((ap_ST_st8_fsm_7 == ap_CS_fsm) & ~((AXI_DMA_SLAVE_BVALID == ap_const_logic_0) | (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_WREADY))) | (~((AXI_DMA_SLAVE_BVALID == ap_const_logic_0) | (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_WREADY)) & (ap_ST_st9_fsm_8 == ap_CS_fsm)) | ((ap_ST_st24_fsm_23 == ap_CS_fsm) & ~((ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY) | (AXI_DMA_SLAVE_BVALID == ap_const_logic_0) | (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_WREADY))) | ((ap_ST_st4_fsm_3 == ap_CS_fsm) & ~((ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_WREADY))) | (~((ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_WREADY)) & (ap_ST_st7_fsm_6 == ap_CS_fsm)) | ((ap_ST_st13_fsm_12 == ap_CS_fsm) & ~(ap_const_lv1_0 == tmp_2_fu_402_p2) & ~(((ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) & ~(ap_const_lv1_0 == tmp_2_fu_402_p2)) | ((ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_WREADY) & ~(ap_const_lv1_0 == tmp_2_fu_402_p2)))) | (~((ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_WREADY)) & (ap_ST_st17_fsm_16 == ap_CS_fsm)) | (~((ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_WREADY)) & (ap_ST_st20_fsm_19 == ap_CS_fsm)) | (~((ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_WREADY)) & (ap_ST_st23_fsm_22 == ap_CS_fsm)) | ((ap_ST_st28_fsm_27 == ap_CS_fsm) & ~((ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_WREADY) | ap_sig_bdd_504)))) begin
            ap_reg_ioackin_AXI_DMA_SLAVE_WREADY <= ap_const_logic_0;
        end else if ((((ap_ST_st4_fsm_3 == ap_CS_fsm) & (ap_const_logic_1 == AXI_DMA_SLAVE_WREADY)) | ((ap_const_logic_1 == AXI_DMA_SLAVE_WREADY) & (ap_ST_st7_fsm_6 == ap_CS_fsm)) | ((ap_ST_st8_fsm_7 == ap_CS_fsm) & ~(AXI_DMA_SLAVE_BVALID == ap_const_logic_0) & (ap_const_logic_1 == AXI_DMA_SLAVE_WREADY)) | ((ap_ST_st9_fsm_8 == ap_CS_fsm) & ~(AXI_DMA_SLAVE_BVALID == ap_const_logic_0) & (ap_const_logic_1 == AXI_DMA_SLAVE_WREADY)) | ((ap_ST_st13_fsm_12 == ap_CS_fsm) & ~(ap_const_lv1_0 == tmp_2_fu_402_p2) & (ap_const_logic_1 == AXI_DMA_SLAVE_WREADY)) | ((ap_const_logic_1 == AXI_DMA_SLAVE_WREADY) & (ap_ST_st17_fsm_16 == ap_CS_fsm)) | ((ap_const_logic_1 == AXI_DMA_SLAVE_WREADY) & (ap_ST_st20_fsm_19 == ap_CS_fsm)) | ((ap_const_logic_1 == AXI_DMA_SLAVE_WREADY) & (ap_ST_st23_fsm_22 == ap_CS_fsm)) | (~(AXI_DMA_SLAVE_BVALID == ap_const_logic_0) & (ap_ST_st24_fsm_23 == ap_CS_fsm) & (ap_const_logic_1 == AXI_DMA_SLAVE_WREADY)) | ((ap_const_logic_1 == AXI_DMA_SLAVE_WREADY) & (ap_ST_st28_fsm_27 == ap_CS_fsm) & ~ap_sig_bdd_504))) begin
            ap_reg_ioackin_AXI_DMA_SLAVE_WREADY <= ap_const_logic_1;
        end
    end
end

/// controller_finished_V_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_controller_finished_V_preg
    if (ap_rst_n == 1'b0) begin
        controller_finished_V_preg <= ap_const_lv1_0;
    end else begin
        if ((~(AXI_DMA_SLAVE_BVALID == ap_const_logic_0) & (ap_ST_st14_fsm_13 == ap_CS_fsm))) begin
            controller_finished_V_preg <= ap_const_lv1_0;
        end else if ((((ap_ST_st32_fsm_31 == ap_CS_fsm) & ~(ap_const_lv1_0 == p_Val2_s_phi_fu_263_p4)) | ((ap_ST_st11_fsm_10 == ap_CS_fsm) & ~(localEnabled_reg_481 == ap_const_lv1_0) & (ap_const_lv1_0 == write_assign_load_reg_485) & ~(ap_const_lv1_0 == p_Val2_2_phi_fu_231_p4)))) begin
            controller_finished_V_preg <= ap_const_lv1_1;
        end
    end
end

/// dma_address_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_dma_address_preg
    if (ap_rst_n == 1'b0) begin
        dma_address_preg <= ap_const_lv32_0;
    end else begin
        if (((ap_ST_st24_fsm_23 == ap_CS_fsm) & ~((ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY) | (AXI_DMA_SLAVE_BVALID == ap_const_logic_0) | (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_WREADY)))) begin
            dma_address_preg <= localAddress1_reg_248;
        end
    end
end

/// dma_control_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_dma_control_preg
    if (ap_rst_n == 1'b0) begin
        dma_control_preg <= ap_const_lv32_0;
    end else begin
        if ((((ap_ST_st28_fsm_27 == ap_CS_fsm) & ~((ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_WREADY) | ap_sig_bdd_504)) | ((ap_ST_st30_fsm_29 == ap_CS_fsm) & ~((AXI_DMA_SLAVE_RVALID == ap_const_logic_0) | (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY))))) begin
            dma_control_preg <= AXI_DMA_SLAVE_RDATA;
        end
    end
end

/// dma_status_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_dma_status_preg
    if (ap_rst_n == 1'b0) begin
        dma_status_preg <= ap_const_lv32_0;
    end else begin
        if (((~(AXI_DMA_SLAVE_RVALID == ap_const_logic_0) & (ap_ST_st31_fsm_30 == ap_CS_fsm)) | ((ap_ST_st29_fsm_28 == ap_CS_fsm) & ~((ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY) | ap_sig_bdd_504)))) begin
            dma_status_preg <= AXI_DMA_SLAVE_RDATA;
        end
    end
end

/// reset_scanner_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_reset_scanner_preg
    if (ap_rst_n == 1'b0) begin
        reset_scanner_preg <= ap_const_logic_0;
    end else begin
        if ((ap_ST_st12_fsm_11 == ap_CS_fsm)) begin
            reset_scanner_preg <= ap_const_lv1_0;
        end else if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(localEnabled_load_fu_331_p1 == ap_const_lv1_0) & ~(~(localEnabled_load_fu_331_p1 == ap_const_lv1_0) & (ap_const_lv1_0 == write_assign_load_load_fu_334_p1) & (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY)) & ~(ap_const_lv1_0 == write_assign_load_load_fu_334_p1))) begin
            reset_scanner_preg <= ap_const_lv1_1;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st32_fsm_31 == ap_CS_fsm) & ~(ap_const_lv1_0 == p_Val2_s_phi_fu_263_p4))) begin
        i_reg_237 <= i_1_reg_545;
    end else if ((ap_ST_st12_fsm_11 == ap_CS_fsm)) begin
        i_reg_237 <= ap_const_lv32_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st32_fsm_31 == ap_CS_fsm) & ~(ap_const_lv1_0 == p_Val2_s_phi_fu_263_p4))) begin
        localAddress1_reg_248 <= localAddress_1_reg_558;
    end else if ((ap_ST_st12_fsm_11 == ap_CS_fsm)) begin
        localAddress1_reg_248 <= startAddress_assign_fu_106;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0))) begin
        enabled_assign_fu_122 <= enabled_read_read_fu_126_p2;
        write_assign_fu_110 <= write_read_read_fu_132_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st13_fsm_12 == ap_CS_fsm) & ~(((ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) & ~(ap_const_lv1_0 == tmp_2_fu_402_p2)) | ((ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_WREADY) & ~(ap_const_lv1_0 == tmp_2_fu_402_p2))))) begin
        i_1_reg_545 <= i_1_fu_408_p2;
        tmp_2_reg_541 <= tmp_2_fu_402_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(~(localEnabled_load_fu_331_p1 == ap_const_lv1_0) & (ap_const_lv1_0 == write_assign_load_load_fu_334_p1) & (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY)))) begin
        iterations_assign_fu_118 <= iterations;
        length_assign_fu_114 <= length_r;
        localEnabled_reg_481 <= enabled_assign_fu_122;
        startAddress_assign_fu_106 <= startAddress;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st24_fsm_23 == ap_CS_fsm) & ~((ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY) | (AXI_DMA_SLAVE_BVALID == ap_const_logic_0) | (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_WREADY)))) begin
        localAddress_1_reg_558 <= localAddress_1_fu_445_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((((ap_ST_st10_fsm_9 == ap_CS_fsm) & ~(AXI_DMA_SLAVE_BVALID == ap_const_logic_0)) | ((ap_ST_st11_fsm_10 == ap_CS_fsm) & ~(localEnabled_reg_481 == ap_const_lv1_0) & (ap_const_lv1_0 == write_assign_load_reg_485) & (ap_const_lv1_0 == p_Val2_2_phi_fu_231_p4)))) begin
        p_Val2_2_reg_228 <= fabric_interrupt_write_finished_V;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((~(AXI_DMA_SLAVE_RVALID == ap_const_logic_0) & (ap_ST_st31_fsm_30 == ap_CS_fsm)) | ((ap_ST_st32_fsm_31 == ap_CS_fsm) & (ap_const_lv1_0 == p_Val2_s_phi_fu_263_p4)))) begin
        p_Val2_s_reg_260 <= fabric_interrupt_read_finished_V;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((((ap_ST_st3_fsm_2 == ap_CS_fsm) & ~(AXI_DMA_SLAVE_RVALID == ap_const_logic_0)) | (~(AXI_DMA_SLAVE_RVALID == ap_const_logic_0) & (ap_ST_st19_fsm_18 == ap_CS_fsm)))) begin
        reg_298 <= {{AXI_DMA_SLAVE_RDATA[ap_const_lv32_1F : ap_const_lv32_1]}};
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((~(AXI_DMA_SLAVE_RVALID == ap_const_logic_0) & (ap_ST_st6_fsm_5 == ap_CS_fsm)) | (~(AXI_DMA_SLAVE_RVALID == ap_const_logic_0) & (ap_ST_st22_fsm_21 == ap_CS_fsm)))) begin
        reg_302 <= {{AXI_DMA_SLAVE_RDATA[ap_const_lv32_1F : ap_const_lv32_D]}};
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((~(AXI_DMA_SLAVE_RVALID == ap_const_logic_0) & (ap_ST_st22_fsm_21 == ap_CS_fsm))) begin
        tmp_10_reg_553 <= tmp_10_fu_431_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((~(AXI_DMA_SLAVE_RVALID == ap_const_logic_0) & (ap_ST_st6_fsm_5 == ap_CS_fsm))) begin
        tmp_4_reg_495 <= tmp_4_fu_353_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(localEnabled_load_fu_331_p1 == ap_const_lv1_0) & ~(~(localEnabled_load_fu_331_p1 == ap_const_lv1_0) & (ap_const_lv1_0 == write_assign_load_load_fu_334_p1) & (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY)))) begin
        write_assign_load_reg_485 <= write_assign_fu_110;
    end
end

/// AXI_DMA_SLAVE_ARADDR assign process. ///
always @ (ap_CS_fsm or AXI_DMA_SLAVE_RVALID or AXI_DMA_SLAVE_BVALID or localEnabled_load_fu_331_p1 or write_assign_load_load_fu_334_p1 or AXI_DMA_SLAVE_addr_3_reg_489 or AXI_DMA_SLAVE_addr_reg_525 or ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY or tmp_8_fu_414_p3 or ap_sig_bdd_504)
begin
    if ((((ap_const_logic_0 == ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY) & (ap_ST_st25_fsm_24 == ap_CS_fsm)) | (~(AXI_DMA_SLAVE_RVALID == ap_const_logic_0) & (ap_const_logic_0 == ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY) & (ap_ST_st30_fsm_29 == ap_CS_fsm)))) begin
        AXI_DMA_SLAVE_ARADDR = AXI_DMA_SLAVE_addr_reg_525;
    end else if ((((ap_const_logic_0 == ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY) & (ap_ST_st15_fsm_14 == ap_CS_fsm)) | (~(AXI_DMA_SLAVE_RVALID == ap_const_logic_0) & (ap_const_logic_0 == ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY) & (ap_ST_st16_fsm_15 == ap_CS_fsm) & (ap_const_lv1_0 == tmp_8_fu_414_p3)) | (~(AXI_DMA_SLAVE_BVALID == ap_const_logic_0) & (ap_const_logic_0 == ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY) & (ap_ST_st21_fsm_20 == ap_CS_fsm)) | (~(AXI_DMA_SLAVE_BVALID == ap_const_logic_0) & (ap_ST_st24_fsm_23 == ap_CS_fsm) & (ap_const_logic_0 == ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY)) | ((ap_const_logic_0 == ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY) & ~ap_sig_bdd_504 & (ap_ST_st29_fsm_28 == ap_CS_fsm)))) begin
        AXI_DMA_SLAVE_ARADDR = ap_const_lv32_0;
    end else if ((~(AXI_DMA_SLAVE_BVALID == ap_const_logic_0) & (ap_const_logic_0 == ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY) & (ap_ST_st5_fsm_4 == ap_CS_fsm))) begin
        AXI_DMA_SLAVE_ARADDR = AXI_DMA_SLAVE_addr_3_reg_489;
    end else if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(localEnabled_load_fu_331_p1 == ap_const_lv1_0) & (ap_const_lv1_0 == write_assign_load_load_fu_334_p1) & (ap_const_logic_0 == ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY))) begin
        AXI_DMA_SLAVE_ARADDR = ap_const_lv64_C;
    end else begin
        AXI_DMA_SLAVE_ARADDR = 'bx;
    end
end

/// AXI_DMA_SLAVE_ARVALID assign process. ///
always @ (ap_CS_fsm or AXI_DMA_SLAVE_RVALID or AXI_DMA_SLAVE_BVALID or localEnabled_load_fu_331_p1 or write_assign_load_load_fu_334_p1 or ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY or tmp_8_fu_414_p3 or ap_sig_bdd_504)
begin
    if ((((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(localEnabled_load_fu_331_p1 == ap_const_lv1_0) & (ap_const_lv1_0 == write_assign_load_load_fu_334_p1) & (ap_const_logic_0 == ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY)) | (~(AXI_DMA_SLAVE_BVALID == ap_const_logic_0) & (ap_const_logic_0 == ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY) & (ap_ST_st5_fsm_4 == ap_CS_fsm)) | ((ap_const_logic_0 == ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY) & (ap_ST_st15_fsm_14 == ap_CS_fsm)) | (~(AXI_DMA_SLAVE_RVALID == ap_const_logic_0) & (ap_const_logic_0 == ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY) & (ap_ST_st16_fsm_15 == ap_CS_fsm) & (ap_const_lv1_0 == tmp_8_fu_414_p3)) | (~(AXI_DMA_SLAVE_BVALID == ap_const_logic_0) & (ap_const_logic_0 == ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY) & (ap_ST_st21_fsm_20 == ap_CS_fsm)) | (~(AXI_DMA_SLAVE_BVALID == ap_const_logic_0) & (ap_ST_st24_fsm_23 == ap_CS_fsm) & (ap_const_logic_0 == ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY)) | ((ap_const_logic_0 == ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY) & (ap_ST_st25_fsm_24 == ap_CS_fsm)) | ((ap_const_logic_0 == ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY) & ~ap_sig_bdd_504 & (ap_ST_st29_fsm_28 == ap_CS_fsm)) | (~(AXI_DMA_SLAVE_RVALID == ap_const_logic_0) & (ap_const_logic_0 == ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY) & (ap_ST_st30_fsm_29 == ap_CS_fsm)))) begin
        AXI_DMA_SLAVE_ARVALID = ap_const_logic_1;
    end else begin
        AXI_DMA_SLAVE_ARVALID = ap_const_logic_0;
    end
end

/// AXI_DMA_SLAVE_AWADDR assign process. ///
always @ (ap_CS_fsm or AXI_DMA_SLAVE_BVALID or AXI_DMA_SLAVE_addr_3_reg_489 or AXI_DMA_SLAVE_addr_1_reg_531 or AXI_DMA_SLAVE_addr_2_reg_536 or tmp_2_fu_402_p2 or ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY or ap_sig_bdd_504)
begin
    if (((ap_const_logic_0 == ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY) & (ap_ST_st28_fsm_27 == ap_CS_fsm) & ~ap_sig_bdd_504)) begin
        AXI_DMA_SLAVE_AWADDR = AXI_DMA_SLAVE_addr_2_reg_536;
    end else if ((~(AXI_DMA_SLAVE_BVALID == ap_const_logic_0) & (ap_ST_st24_fsm_23 == ap_CS_fsm) & (ap_const_logic_0 == ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY))) begin
        AXI_DMA_SLAVE_AWADDR = AXI_DMA_SLAVE_addr_1_reg_531;
    end else if ((((ap_ST_st13_fsm_12 == ap_CS_fsm) & ~(ap_const_lv1_0 == tmp_2_fu_402_p2) & (ap_const_logic_0 == ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY)) | ((ap_const_logic_0 == ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY) & (ap_ST_st17_fsm_16 == ap_CS_fsm)) | ((ap_const_logic_0 == ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY) & (ap_ST_st20_fsm_19 == ap_CS_fsm)) | ((ap_const_logic_0 == ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY) & (ap_ST_st23_fsm_22 == ap_CS_fsm)))) begin
        AXI_DMA_SLAVE_AWADDR = ap_const_lv32_0;
    end else if (((ap_ST_st9_fsm_8 == ap_CS_fsm) & ~(AXI_DMA_SLAVE_BVALID == ap_const_logic_0) & (ap_const_logic_0 == ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY))) begin
        AXI_DMA_SLAVE_AWADDR = ap_const_lv64_16;
    end else if (((ap_ST_st8_fsm_7 == ap_CS_fsm) & ~(AXI_DMA_SLAVE_BVALID == ap_const_logic_0) & (ap_const_logic_0 == ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY))) begin
        AXI_DMA_SLAVE_AWADDR = ap_const_lv64_12;
    end else if ((((ap_ST_st4_fsm_3 == ap_CS_fsm) & (ap_const_logic_0 == ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY)) | ((ap_const_logic_0 == ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY) & (ap_ST_st7_fsm_6 == ap_CS_fsm)))) begin
        AXI_DMA_SLAVE_AWADDR = AXI_DMA_SLAVE_addr_3_reg_489;
    end else begin
        AXI_DMA_SLAVE_AWADDR = 'bx;
    end
end

/// AXI_DMA_SLAVE_AWVALID assign process. ///
always @ (ap_CS_fsm or AXI_DMA_SLAVE_BVALID or tmp_2_fu_402_p2 or ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY or ap_sig_bdd_504)
begin
    if ((((ap_ST_st4_fsm_3 == ap_CS_fsm) & (ap_const_logic_0 == ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY)) | ((ap_const_logic_0 == ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY) & (ap_ST_st7_fsm_6 == ap_CS_fsm)) | ((ap_ST_st8_fsm_7 == ap_CS_fsm) & ~(AXI_DMA_SLAVE_BVALID == ap_const_logic_0) & (ap_const_logic_0 == ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY)) | ((ap_ST_st9_fsm_8 == ap_CS_fsm) & ~(AXI_DMA_SLAVE_BVALID == ap_const_logic_0) & (ap_const_logic_0 == ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY)) | ((ap_ST_st13_fsm_12 == ap_CS_fsm) & ~(ap_const_lv1_0 == tmp_2_fu_402_p2) & (ap_const_logic_0 == ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY)) | ((ap_const_logic_0 == ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY) & (ap_ST_st17_fsm_16 == ap_CS_fsm)) | ((ap_const_logic_0 == ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY) & (ap_ST_st20_fsm_19 == ap_CS_fsm)) | ((ap_const_logic_0 == ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY) & (ap_ST_st23_fsm_22 == ap_CS_fsm)) | (~(AXI_DMA_SLAVE_BVALID == ap_const_logic_0) & (ap_ST_st24_fsm_23 == ap_CS_fsm) & (ap_const_logic_0 == ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY)) | ((ap_const_logic_0 == ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY) & (ap_ST_st28_fsm_27 == ap_CS_fsm) & ~ap_sig_bdd_504))) begin
        AXI_DMA_SLAVE_AWVALID = ap_const_logic_1;
    end else begin
        AXI_DMA_SLAVE_AWVALID = ap_const_logic_0;
    end
end

/// AXI_DMA_SLAVE_BREADY assign process. ///
always @ (ap_CS_fsm or AXI_DMA_SLAVE_BVALID or ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY or ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY or ap_sig_ioackin_AXI_DMA_SLAVE_WREADY or ap_sig_bdd_504)
begin
    if ((((ap_ST_st8_fsm_7 == ap_CS_fsm) & ~((AXI_DMA_SLAVE_BVALID == ap_const_logic_0) | (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_WREADY))) | (~((AXI_DMA_SLAVE_BVALID == ap_const_logic_0) | (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_WREADY)) & (ap_ST_st9_fsm_8 == ap_CS_fsm)) | ((ap_ST_st10_fsm_9 == ap_CS_fsm) & ~(AXI_DMA_SLAVE_BVALID == ap_const_logic_0)) | ((ap_ST_st24_fsm_23 == ap_CS_fsm) & ~((ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY) | (AXI_DMA_SLAVE_BVALID == ap_const_logic_0) | (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_WREADY))) | ((ap_ST_st5_fsm_4 == ap_CS_fsm) & ~((ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY) | (AXI_DMA_SLAVE_BVALID == ap_const_logic_0))) | (~(AXI_DMA_SLAVE_BVALID == ap_const_logic_0) & (ap_ST_st14_fsm_13 == ap_CS_fsm)) | (~(AXI_DMA_SLAVE_BVALID == ap_const_logic_0) & (ap_ST_st18_fsm_17 == ap_CS_fsm)) | (~((ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY) | (AXI_DMA_SLAVE_BVALID == ap_const_logic_0)) & (ap_ST_st21_fsm_20 == ap_CS_fsm)) | ((ap_ST_st28_fsm_27 == ap_CS_fsm) & ~((ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_WREADY) | ap_sig_bdd_504)) | ((ap_ST_st29_fsm_28 == ap_CS_fsm) & ~((ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY) | ap_sig_bdd_504)))) begin
        AXI_DMA_SLAVE_BREADY = ap_const_logic_1;
    end else begin
        AXI_DMA_SLAVE_BREADY = ap_const_logic_0;
    end
end

/// AXI_DMA_SLAVE_RREADY assign process. ///
always @ (ap_CS_fsm or AXI_DMA_SLAVE_RVALID or ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY or ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY or ap_sig_ioackin_AXI_DMA_SLAVE_WREADY or tmp_8_fu_414_p3 or ap_sig_bdd_504)
begin
    if ((((ap_ST_st3_fsm_2 == ap_CS_fsm) & ~(AXI_DMA_SLAVE_RVALID == ap_const_logic_0)) | (~(AXI_DMA_SLAVE_RVALID == ap_const_logic_0) & (ap_ST_st19_fsm_18 == ap_CS_fsm)) | (~(AXI_DMA_SLAVE_RVALID == ap_const_logic_0) & (ap_ST_st6_fsm_5 == ap_CS_fsm)) | (~(AXI_DMA_SLAVE_RVALID == ap_const_logic_0) & (ap_ST_st22_fsm_21 == ap_CS_fsm)) | (~(AXI_DMA_SLAVE_RVALID == ap_const_logic_0) & (ap_ST_st31_fsm_30 == ap_CS_fsm)) | ((ap_ST_st16_fsm_15 == ap_CS_fsm) & ~((AXI_DMA_SLAVE_RVALID == ap_const_logic_0) | ((ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY) & (ap_const_lv1_0 == tmp_8_fu_414_p3)))) | ((ap_ST_st28_fsm_27 == ap_CS_fsm) & ~((ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_WREADY) | ap_sig_bdd_504)) | ((ap_ST_st29_fsm_28 == ap_CS_fsm) & ~((ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY) | ap_sig_bdd_504)) | ((ap_ST_st30_fsm_29 == ap_CS_fsm) & ~((AXI_DMA_SLAVE_RVALID == ap_const_logic_0) | (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY))))) begin
        AXI_DMA_SLAVE_RREADY = ap_const_logic_1;
    end else begin
        AXI_DMA_SLAVE_RREADY = ap_const_logic_0;
    end
end

/// AXI_DMA_SLAVE_WDATA assign process. ///
always @ (ap_CS_fsm or AXI_DMA_SLAVE_BVALID or tmp_2_fu_402_p2 or localAddress1_reg_248 or ap_reg_ioackin_AXI_DMA_SLAVE_WREADY or tmp_fu_344_p3 or tmp_1_fu_357_p4 or tmp_5_fu_422_p3 or tmp_6_fu_435_p4 or ap_sig_bdd_504 or startAddress_assign_fu_106 or length_assign_fu_114)
begin
    if ((~(AXI_DMA_SLAVE_BVALID == ap_const_logic_0) & (ap_ST_st24_fsm_23 == ap_CS_fsm) & (ap_const_logic_0 == ap_reg_ioackin_AXI_DMA_SLAVE_WREADY))) begin
        AXI_DMA_SLAVE_WDATA = localAddress1_reg_248;
    end else if (((ap_const_logic_0 == ap_reg_ioackin_AXI_DMA_SLAVE_WREADY) & (ap_ST_st23_fsm_22 == ap_CS_fsm))) begin
        AXI_DMA_SLAVE_WDATA = tmp_6_fu_435_p4;
    end else if (((ap_const_logic_0 == ap_reg_ioackin_AXI_DMA_SLAVE_WREADY) & (ap_ST_st20_fsm_19 == ap_CS_fsm))) begin
        AXI_DMA_SLAVE_WDATA = tmp_5_fu_422_p3;
    end else if (((ap_const_logic_0 == ap_reg_ioackin_AXI_DMA_SLAVE_WREADY) & (ap_ST_st17_fsm_16 == ap_CS_fsm))) begin
        AXI_DMA_SLAVE_WDATA = ap_const_lv32_0;
    end else if (((ap_ST_st13_fsm_12 == ap_CS_fsm) & ~(ap_const_lv1_0 == tmp_2_fu_402_p2) & (ap_const_logic_0 == ap_reg_ioackin_AXI_DMA_SLAVE_WREADY))) begin
        AXI_DMA_SLAVE_WDATA = ap_const_lv32_4;
    end else if ((((ap_ST_st9_fsm_8 == ap_CS_fsm) & ~(AXI_DMA_SLAVE_BVALID == ap_const_logic_0) & (ap_const_logic_0 == ap_reg_ioackin_AXI_DMA_SLAVE_WREADY)) | ((ap_const_logic_0 == ap_reg_ioackin_AXI_DMA_SLAVE_WREADY) & (ap_ST_st28_fsm_27 == ap_CS_fsm) & ~ap_sig_bdd_504))) begin
        AXI_DMA_SLAVE_WDATA = length_assign_fu_114;
    end else if (((ap_ST_st8_fsm_7 == ap_CS_fsm) & ~(AXI_DMA_SLAVE_BVALID == ap_const_logic_0) & (ap_const_logic_0 == ap_reg_ioackin_AXI_DMA_SLAVE_WREADY))) begin
        AXI_DMA_SLAVE_WDATA = startAddress_assign_fu_106;
    end else if (((ap_const_logic_0 == ap_reg_ioackin_AXI_DMA_SLAVE_WREADY) & (ap_ST_st7_fsm_6 == ap_CS_fsm))) begin
        AXI_DMA_SLAVE_WDATA = tmp_1_fu_357_p4;
    end else if (((ap_ST_st4_fsm_3 == ap_CS_fsm) & (ap_const_logic_0 == ap_reg_ioackin_AXI_DMA_SLAVE_WREADY))) begin
        AXI_DMA_SLAVE_WDATA = tmp_fu_344_p3;
    end else begin
        AXI_DMA_SLAVE_WDATA = 'bx;
    end
end

/// AXI_DMA_SLAVE_WVALID assign process. ///
always @ (ap_CS_fsm or AXI_DMA_SLAVE_BVALID or tmp_2_fu_402_p2 or ap_reg_ioackin_AXI_DMA_SLAVE_WREADY or ap_sig_bdd_504)
begin
    if ((((ap_ST_st4_fsm_3 == ap_CS_fsm) & (ap_const_logic_0 == ap_reg_ioackin_AXI_DMA_SLAVE_WREADY)) | ((ap_const_logic_0 == ap_reg_ioackin_AXI_DMA_SLAVE_WREADY) & (ap_ST_st7_fsm_6 == ap_CS_fsm)) | ((ap_ST_st8_fsm_7 == ap_CS_fsm) & ~(AXI_DMA_SLAVE_BVALID == ap_const_logic_0) & (ap_const_logic_0 == ap_reg_ioackin_AXI_DMA_SLAVE_WREADY)) | ((ap_ST_st9_fsm_8 == ap_CS_fsm) & ~(AXI_DMA_SLAVE_BVALID == ap_const_logic_0) & (ap_const_logic_0 == ap_reg_ioackin_AXI_DMA_SLAVE_WREADY)) | ((ap_ST_st13_fsm_12 == ap_CS_fsm) & ~(ap_const_lv1_0 == tmp_2_fu_402_p2) & (ap_const_logic_0 == ap_reg_ioackin_AXI_DMA_SLAVE_WREADY)) | ((ap_const_logic_0 == ap_reg_ioackin_AXI_DMA_SLAVE_WREADY) & (ap_ST_st17_fsm_16 == ap_CS_fsm)) | ((ap_const_logic_0 == ap_reg_ioackin_AXI_DMA_SLAVE_WREADY) & (ap_ST_st20_fsm_19 == ap_CS_fsm)) | ((ap_const_logic_0 == ap_reg_ioackin_AXI_DMA_SLAVE_WREADY) & (ap_ST_st23_fsm_22 == ap_CS_fsm)) | (~(AXI_DMA_SLAVE_BVALID == ap_const_logic_0) & (ap_ST_st24_fsm_23 == ap_CS_fsm) & (ap_const_logic_0 == ap_reg_ioackin_AXI_DMA_SLAVE_WREADY)) | ((ap_const_logic_0 == ap_reg_ioackin_AXI_DMA_SLAVE_WREADY) & (ap_ST_st28_fsm_27 == ap_CS_fsm) & ~ap_sig_bdd_504))) begin
        AXI_DMA_SLAVE_WVALID = ap_const_logic_1;
    end else begin
        AXI_DMA_SLAVE_WVALID = ap_const_logic_0;
    end
end

/// ap_done assign process. ///
always @ (ap_CS_fsm or localEnabled_reg_481 or write_assign_load_reg_485 or p_Val2_2_phi_fu_231_p4 or tmp_2_reg_541)
begin
    if (((ap_ST_st11_fsm_10 == ap_CS_fsm) & ((localEnabled_reg_481 == ap_const_lv1_0) | ((ap_const_lv1_0 == write_assign_load_reg_485) & ~(ap_const_lv1_0 == p_Val2_2_phi_fu_231_p4)) | (~(ap_const_lv1_0 == write_assign_load_reg_485) & (ap_const_lv1_0 == tmp_2_reg_541))))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_CS_fsm or localEnabled_reg_481 or write_assign_load_reg_485 or p_Val2_2_phi_fu_231_p4 or tmp_2_reg_541)
begin
    if (((ap_ST_st11_fsm_10 == ap_CS_fsm) & ((localEnabled_reg_481 == ap_const_lv1_0) | ((ap_const_lv1_0 == write_assign_load_reg_485) & ~(ap_const_lv1_0 == p_Val2_2_phi_fu_231_p4)) | (~(ap_const_lv1_0 == write_assign_load_reg_485) & (ap_const_lv1_0 == tmp_2_reg_541))))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY assign process. ///
always @ (AXI_DMA_SLAVE_ARREADY or ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY)
begin
    if ((ap_const_logic_0 == ap_reg_ioackin_AXI_DMA_SLAVE_ARREADY)) begin
        ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY = AXI_DMA_SLAVE_ARREADY;
    end else begin
        ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY = ap_const_logic_1;
    end
end

/// ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY assign process. ///
always @ (AXI_DMA_SLAVE_AWREADY or ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY)
begin
    if ((ap_const_logic_0 == ap_reg_ioackin_AXI_DMA_SLAVE_AWREADY)) begin
        ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY = AXI_DMA_SLAVE_AWREADY;
    end else begin
        ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY = ap_const_logic_1;
    end
end

/// ap_sig_ioackin_AXI_DMA_SLAVE_WREADY assign process. ///
always @ (AXI_DMA_SLAVE_WREADY or ap_reg_ioackin_AXI_DMA_SLAVE_WREADY)
begin
    if ((ap_const_logic_0 == ap_reg_ioackin_AXI_DMA_SLAVE_WREADY)) begin
        ap_sig_ioackin_AXI_DMA_SLAVE_WREADY = AXI_DMA_SLAVE_WREADY;
    end else begin
        ap_sig_ioackin_AXI_DMA_SLAVE_WREADY = ap_const_logic_1;
    end
end

/// controller_finished_V assign process. ///
always @ (ap_CS_fsm or AXI_DMA_SLAVE_BVALID or localEnabled_reg_481 or write_assign_load_reg_485 or p_Val2_2_phi_fu_231_p4 or p_Val2_s_phi_fu_263_p4 or controller_finished_V_preg)
begin
    if ((~(AXI_DMA_SLAVE_BVALID == ap_const_logic_0) & (ap_ST_st14_fsm_13 == ap_CS_fsm))) begin
        controller_finished_V = ap_const_lv1_0;
    end else if ((((ap_ST_st32_fsm_31 == ap_CS_fsm) & ~(ap_const_lv1_0 == p_Val2_s_phi_fu_263_p4)) | ((ap_ST_st11_fsm_10 == ap_CS_fsm) & ~(localEnabled_reg_481 == ap_const_lv1_0) & (ap_const_lv1_0 == write_assign_load_reg_485) & ~(ap_const_lv1_0 == p_Val2_2_phi_fu_231_p4)))) begin
        controller_finished_V = ap_const_lv1_1;
    end else begin
        controller_finished_V = controller_finished_V_preg;
    end
end

/// dma_address assign process. ///
always @ (ap_CS_fsm or AXI_DMA_SLAVE_BVALID or ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY or ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY or ap_sig_ioackin_AXI_DMA_SLAVE_WREADY or localAddress1_reg_248 or dma_address_preg)
begin
    if (((ap_ST_st24_fsm_23 == ap_CS_fsm) & ~((ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY) | (AXI_DMA_SLAVE_BVALID == ap_const_logic_0) | (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_WREADY)))) begin
        dma_address = localAddress1_reg_248;
    end else begin
        dma_address = dma_address_preg;
    end
end

/// dma_control assign process. ///
always @ (ap_CS_fsm or AXI_DMA_SLAVE_RVALID or AXI_DMA_SLAVE_RDATA or ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY or ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY or ap_sig_ioackin_AXI_DMA_SLAVE_WREADY or ap_sig_bdd_504 or dma_control_preg)
begin
    if ((((ap_ST_st28_fsm_27 == ap_CS_fsm) & ~((ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_WREADY) | ap_sig_bdd_504)) | ((ap_ST_st30_fsm_29 == ap_CS_fsm) & ~((AXI_DMA_SLAVE_RVALID == ap_const_logic_0) | (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY))))) begin
        dma_control = AXI_DMA_SLAVE_RDATA;
    end else begin
        dma_control = dma_control_preg;
    end
end

/// dma_status assign process. ///
always @ (ap_CS_fsm or AXI_DMA_SLAVE_RVALID or AXI_DMA_SLAVE_RDATA or ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY or ap_sig_bdd_504 or dma_status_preg)
begin
    if (((~(AXI_DMA_SLAVE_RVALID == ap_const_logic_0) & (ap_ST_st31_fsm_30 == ap_CS_fsm)) | ((ap_ST_st29_fsm_28 == ap_CS_fsm) & ~((ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY) | ap_sig_bdd_504)))) begin
        dma_status = AXI_DMA_SLAVE_RDATA;
    end else begin
        dma_status = dma_status_preg;
    end
end

/// reset_scanner assign process. ///
always @ (ap_CS_fsm or localEnabled_load_fu_331_p1 or write_assign_load_load_fu_334_p1 or ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY or reset_scanner_preg)
begin
    if ((ap_ST_st12_fsm_11 == ap_CS_fsm)) begin
        reset_scanner = ap_const_lv1_0;
    end else if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(localEnabled_load_fu_331_p1 == ap_const_lv1_0) & ~(~(localEnabled_load_fu_331_p1 == ap_const_lv1_0) & (ap_const_lv1_0 == write_assign_load_load_fu_334_p1) & (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY)) & ~(ap_const_lv1_0 == write_assign_load_load_fu_334_p1))) begin
        reset_scanner = ap_const_lv1_1;
    end else begin
        reset_scanner = reset_scanner_preg;
    end
end
always @ (ap_start or ap_CS_fsm or AXI_DMA_SLAVE_RVALID or AXI_DMA_SLAVE_BVALID or localEnabled_load_fu_331_p1 or localEnabled_reg_481 or write_assign_load_load_fu_334_p1 or ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY or write_assign_load_reg_485 or ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY or ap_sig_ioackin_AXI_DMA_SLAVE_WREADY or p_Val2_2_phi_fu_231_p4 or tmp_2_fu_402_p2 or tmp_2_reg_541 or p_Val2_s_phi_fu_263_p4 or tmp_8_fu_414_p3 or ap_sig_bdd_504)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        ap_ST_st2_fsm_1 : 
            if ((~(localEnabled_load_fu_331_p1 == ap_const_lv1_0) & ~(~(localEnabled_load_fu_331_p1 == ap_const_lv1_0) & (ap_const_lv1_0 == write_assign_load_load_fu_334_p1) & (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY)) & ~(ap_const_lv1_0 == write_assign_load_load_fu_334_p1))) begin
                ap_NS_fsm = ap_ST_st12_fsm_11;
            end else if ((~(localEnabled_load_fu_331_p1 == ap_const_lv1_0) & (ap_const_lv1_0 == write_assign_load_load_fu_334_p1) & ~(~(localEnabled_load_fu_331_p1 == ap_const_lv1_0) & (ap_const_lv1_0 == write_assign_load_load_fu_334_p1) & (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY)))) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else if (((localEnabled_load_fu_331_p1 == ap_const_lv1_0) & ~(~(localEnabled_load_fu_331_p1 == ap_const_lv1_0) & (ap_const_lv1_0 == write_assign_load_load_fu_334_p1) & (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY)))) begin
                ap_NS_fsm = ap_ST_st11_fsm_10;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        ap_ST_st3_fsm_2 : 
            if (~(AXI_DMA_SLAVE_RVALID == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        ap_ST_st4_fsm_3 : 
            if (~((ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_WREADY))) begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        ap_ST_st5_fsm_4 : 
            if (~((ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY) | (AXI_DMA_SLAVE_BVALID == ap_const_logic_0))) begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end else begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end
        ap_ST_st6_fsm_5 : 
            if (~(AXI_DMA_SLAVE_RVALID == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st7_fsm_6;
            end else begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end
        ap_ST_st7_fsm_6 : 
            if (~((ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_WREADY))) begin
                ap_NS_fsm = ap_ST_st8_fsm_7;
            end else begin
                ap_NS_fsm = ap_ST_st7_fsm_6;
            end
        ap_ST_st8_fsm_7 : 
            if (~((AXI_DMA_SLAVE_BVALID == ap_const_logic_0) | (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_WREADY))) begin
                ap_NS_fsm = ap_ST_st9_fsm_8;
            end else begin
                ap_NS_fsm = ap_ST_st8_fsm_7;
            end
        ap_ST_st9_fsm_8 : 
            if (~((AXI_DMA_SLAVE_BVALID == ap_const_logic_0) | (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_WREADY))) begin
                ap_NS_fsm = ap_ST_st10_fsm_9;
            end else begin
                ap_NS_fsm = ap_ST_st9_fsm_8;
            end
        ap_ST_st10_fsm_9 : 
            if (~(AXI_DMA_SLAVE_BVALID == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st11_fsm_10;
            end else begin
                ap_NS_fsm = ap_ST_st10_fsm_9;
            end
        ap_ST_st11_fsm_10 : 
            if (((localEnabled_reg_481 == ap_const_lv1_0) | ((ap_const_lv1_0 == write_assign_load_reg_485) & ~(ap_const_lv1_0 == p_Val2_2_phi_fu_231_p4)) | (~(ap_const_lv1_0 == write_assign_load_reg_485) & (ap_const_lv1_0 == tmp_2_reg_541)))) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st11_fsm_10;
            end
        ap_ST_st12_fsm_11 : 
            ap_NS_fsm = ap_ST_st13_fsm_12;
        ap_ST_st13_fsm_12 : 
            if ((~(ap_const_lv1_0 == tmp_2_fu_402_p2) & ~(((ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) & ~(ap_const_lv1_0 == tmp_2_fu_402_p2)) | ((ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_WREADY) & ~(ap_const_lv1_0 == tmp_2_fu_402_p2))))) begin
                ap_NS_fsm = ap_ST_st14_fsm_13;
            end else if (((ap_const_lv1_0 == tmp_2_fu_402_p2) & ~(((ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) & ~(ap_const_lv1_0 == tmp_2_fu_402_p2)) | ((ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_WREADY) & ~(ap_const_lv1_0 == tmp_2_fu_402_p2))))) begin
                ap_NS_fsm = ap_ST_st11_fsm_10;
            end else begin
                ap_NS_fsm = ap_ST_st13_fsm_12;
            end
        ap_ST_st14_fsm_13 : 
            if (~(AXI_DMA_SLAVE_BVALID == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st15_fsm_14;
            end else begin
                ap_NS_fsm = ap_ST_st14_fsm_13;
            end
        ap_ST_st15_fsm_14 : 
            if (~(ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY)) begin
                ap_NS_fsm = ap_ST_st16_fsm_15;
            end else begin
                ap_NS_fsm = ap_ST_st15_fsm_14;
            end
        ap_ST_st16_fsm_15 : 
            if (((ap_const_lv1_0 == tmp_8_fu_414_p3) & ~((AXI_DMA_SLAVE_RVALID == ap_const_logic_0) | ((ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY) & (ap_const_lv1_0 == tmp_8_fu_414_p3))))) begin
                ap_NS_fsm = ap_ST_st19_fsm_18;
            end else if ((~((AXI_DMA_SLAVE_RVALID == ap_const_logic_0) | ((ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY) & (ap_const_lv1_0 == tmp_8_fu_414_p3))) & ~(ap_const_lv1_0 == tmp_8_fu_414_p3))) begin
                ap_NS_fsm = ap_ST_st17_fsm_16;
            end else begin
                ap_NS_fsm = ap_ST_st16_fsm_15;
            end
        ap_ST_st17_fsm_16 : 
            if (~((ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_WREADY))) begin
                ap_NS_fsm = ap_ST_st18_fsm_17;
            end else begin
                ap_NS_fsm = ap_ST_st17_fsm_16;
            end
        ap_ST_st18_fsm_17 : 
            if (~(AXI_DMA_SLAVE_BVALID == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st15_fsm_14;
            end else begin
                ap_NS_fsm = ap_ST_st18_fsm_17;
            end
        ap_ST_st19_fsm_18 : 
            if (~(AXI_DMA_SLAVE_RVALID == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st20_fsm_19;
            end else begin
                ap_NS_fsm = ap_ST_st19_fsm_18;
            end
        ap_ST_st20_fsm_19 : 
            if (~((ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_WREADY))) begin
                ap_NS_fsm = ap_ST_st21_fsm_20;
            end else begin
                ap_NS_fsm = ap_ST_st20_fsm_19;
            end
        ap_ST_st21_fsm_20 : 
            if (~((ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY) | (AXI_DMA_SLAVE_BVALID == ap_const_logic_0))) begin
                ap_NS_fsm = ap_ST_st22_fsm_21;
            end else begin
                ap_NS_fsm = ap_ST_st21_fsm_20;
            end
        ap_ST_st22_fsm_21 : 
            if (~(AXI_DMA_SLAVE_RVALID == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st23_fsm_22;
            end else begin
                ap_NS_fsm = ap_ST_st22_fsm_21;
            end
        ap_ST_st23_fsm_22 : 
            if (~((ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_WREADY))) begin
                ap_NS_fsm = ap_ST_st24_fsm_23;
            end else begin
                ap_NS_fsm = ap_ST_st23_fsm_22;
            end
        ap_ST_st24_fsm_23 : 
            if (~((ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY) | (AXI_DMA_SLAVE_BVALID == ap_const_logic_0) | (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_WREADY))) begin
                ap_NS_fsm = ap_ST_st25_fsm_24;
            end else begin
                ap_NS_fsm = ap_ST_st24_fsm_23;
            end
        ap_ST_st25_fsm_24 : 
            if (~(ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY)) begin
                ap_NS_fsm = ap_ST_st26_fsm_25;
            end else begin
                ap_NS_fsm = ap_ST_st25_fsm_24;
            end
        ap_ST_st26_fsm_25 : 
            ap_NS_fsm = ap_ST_st27_fsm_26;
        ap_ST_st27_fsm_26 : 
            ap_NS_fsm = ap_ST_st28_fsm_27;
        ap_ST_st28_fsm_27 : 
            if (~((ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_WREADY) | ap_sig_bdd_504)) begin
                ap_NS_fsm = ap_ST_st29_fsm_28;
            end else begin
                ap_NS_fsm = ap_ST_st28_fsm_27;
            end
        ap_ST_st29_fsm_28 : 
            if (~((ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY) | ap_sig_bdd_504)) begin
                ap_NS_fsm = ap_ST_st30_fsm_29;
            end else begin
                ap_NS_fsm = ap_ST_st29_fsm_28;
            end
        ap_ST_st30_fsm_29 : 
            if (~((AXI_DMA_SLAVE_RVALID == ap_const_logic_0) | (ap_const_logic_0 == ap_sig_ioackin_AXI_DMA_SLAVE_ARREADY))) begin
                ap_NS_fsm = ap_ST_st31_fsm_30;
            end else begin
                ap_NS_fsm = ap_ST_st30_fsm_29;
            end
        ap_ST_st31_fsm_30 : 
            if (~(AXI_DMA_SLAVE_RVALID == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st32_fsm_31;
            end else begin
                ap_NS_fsm = ap_ST_st31_fsm_30;
            end
        ap_ST_st32_fsm_31 : 
            if (~(ap_const_lv1_0 == p_Val2_s_phi_fu_263_p4)) begin
                ap_NS_fsm = ap_ST_st13_fsm_12;
            end else begin
                ap_NS_fsm = ap_ST_st32_fsm_31;
            end
        default : 
            ap_NS_fsm = 'bx;
    endcase
end
assign AXI_DMA_SLAVE_ARBURST = ap_const_lv2_0;
assign AXI_DMA_SLAVE_ARCACHE = ap_const_lv4_0;
assign AXI_DMA_SLAVE_ARID = ap_const_lv1_0;
assign AXI_DMA_SLAVE_ARLEN = ap_const_lv32_1;
assign AXI_DMA_SLAVE_ARLOCK = ap_const_lv2_0;
assign AXI_DMA_SLAVE_ARPROT = ap_const_lv3_0;
assign AXI_DMA_SLAVE_ARQOS = ap_const_lv4_0;
assign AXI_DMA_SLAVE_ARREGION = ap_const_lv4_0;
assign AXI_DMA_SLAVE_ARSIZE = ap_const_lv3_0;
assign AXI_DMA_SLAVE_ARUSER = ap_const_lv1_0;
assign AXI_DMA_SLAVE_AWBURST = ap_const_lv2_0;
assign AXI_DMA_SLAVE_AWCACHE = ap_const_lv4_0;
assign AXI_DMA_SLAVE_AWID = ap_const_lv1_0;
assign AXI_DMA_SLAVE_AWLEN = ap_const_lv32_1;
assign AXI_DMA_SLAVE_AWLOCK = ap_const_lv2_0;
assign AXI_DMA_SLAVE_AWPROT = ap_const_lv3_0;
assign AXI_DMA_SLAVE_AWQOS = ap_const_lv4_0;
assign AXI_DMA_SLAVE_AWREGION = ap_const_lv4_0;
assign AXI_DMA_SLAVE_AWSIZE = ap_const_lv3_0;
assign AXI_DMA_SLAVE_AWUSER = ap_const_lv1_0;
assign AXI_DMA_SLAVE_WID = ap_const_lv1_0;
assign AXI_DMA_SLAVE_WLAST = ap_const_logic_0;
assign AXI_DMA_SLAVE_WSTRB = ap_const_lv4_F;
assign AXI_DMA_SLAVE_WUSER = ap_const_lv1_0;
assign AXI_DMA_SLAVE_addr_1_fu_387_p2 = ap_const_lv64_6;
assign AXI_DMA_SLAVE_addr_2_fu_393_p2 = ap_const_lv64_A;
assign AXI_DMA_SLAVE_addr_3_fu_337_p2 = ap_const_lv64_C;
assign AXI_DMA_SLAVE_addr_fu_381_p2 = ap_const_lv64_1;

/// ap_sig_bdd_504 assign process. ///
always @ (AXI_DMA_SLAVE_RVALID or AXI_DMA_SLAVE_BVALID)
begin
    ap_sig_bdd_504 = ((AXI_DMA_SLAVE_RVALID == ap_const_logic_0) | (AXI_DMA_SLAVE_BVALID == ap_const_logic_0));
end
assign enabled_read_read_fu_126_p2 = enabled;
assign i_1_fu_408_p2 = (i_reg_237 + ap_const_lv32_1);
assign localAddress_1_fu_445_p2 = (localAddress1_reg_248 + ap_const_lv32_4);
assign localEnabled_load_fu_331_p1 = enabled_assign_fu_122;
assign p_Val2_2_phi_fu_231_p4 = p_Val2_2_reg_228;
assign p_Val2_s_phi_fu_263_p4 = p_Val2_s_reg_260;
assign tmp_10_fu_431_p1 = AXI_DMA_SLAVE_RDATA[11:0];
assign tmp_1_fu_357_p4 = {{{reg_302}, {ap_const_lv1_1}}, {tmp_4_reg_495}};
assign tmp_2_fu_402_p2 = ($signed(i_reg_237) < $signed(iterations_assign_fu_118)? 1'b1: 1'b0);
assign tmp_4_fu_353_p1 = AXI_DMA_SLAVE_RDATA[11:0];
assign tmp_5_fu_422_p3 = {{reg_298}, {ap_const_lv1_1}};
assign tmp_6_fu_435_p4 = {{{reg_302}, {ap_const_lv1_1}}, {tmp_10_reg_553}};
assign tmp_8_fu_414_p3 = AXI_DMA_SLAVE_RDATA[ap_const_lv32_2];
assign tmp_fu_344_p3 = {{reg_298}, {ap_const_lv1_1}};
assign write_assign_load_load_fu_334_p1 = write_assign_fu_110;
assign write_read_read_fu_132_p2 = write_r;
always @ (posedge ap_clk)
begin
    AXI_DMA_SLAVE_addr_3_reg_489[31:0] <= 32'b00000000000000000000000000001100;
    AXI_DMA_SLAVE_addr_reg_525[31:0] <= 32'b00000000000000000000000000000001;
    AXI_DMA_SLAVE_addr_1_reg_531[31:0] <= 32'b00000000000000000000000000000110;
    AXI_DMA_SLAVE_addr_2_reg_536[31:0] <= 32'b00000000000000000000000000001010;
end



endmodule //pl_axi_dma_controller

